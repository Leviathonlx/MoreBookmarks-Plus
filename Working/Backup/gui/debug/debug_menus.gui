# OPEN WITH: gui.CreateDockable gui/debug_menus.gui toolbars_windowÂ§
template editor_text
{
	font = StandardGameFont
	fontsize = 13
	fontcolor = { 1 1 1 1 }
}

widget = {
	name = "language_window"
	position = { 50 50 }
	size = { 600 80 }
	layer = debug

	background = {
		texture = "gfx/editor_gui/editor_toolbar_background.dds"
		spriteType = CorneredStretched
		spriteborder = { 5 5 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin = { 5 5 }
	}

	vbox = {
		restrictparent_min = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_bottom = 10

			editor_textbox = {
				raw_text = "Switch Languages"
				layoutpolicy_horizontal = expanding
				autoresize = yes
			}
		}

		hbox = {
			margin = { 5 5 }
			spacing = 3
			using = dockable_background

			dockable_button = {
				size = { 150 35 }
				raw_text = "English"
				onclick = "[ExecuteConsoleCommand('switchlanguage english')]"
			}

			dockable_button = {
				size = { 150 35 }
				raw_text = "Latin"
				onclick = "[ExecuteConsoleCommand('switchlanguage latin')]"
			}

			dockable_button = {
				size = { 150 35 }
				raw_text = "German"
				onclick = "[ExecuteConsoleCommand('switchlanguage german')]"
			}

			dockable_button = {
				size = { 150 35 }
				raw_text = "French"
				onclick = "[ExecuteConsoleCommand('switchlanguage french')]"
			}
		}
	}
}

window = {
	name = "environment_debug_window"
	size = { 355 220 }
	position = { 630 300 }
	layer = debug

	background = {
		texture = "gfx/editor_gui/editor_toolbar_background.dds"
		spriteType = CorneredStretched
		spriteborder = { 5 5 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin = { 5 5 }
	}

	vbox = {
		restrictparent_min = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_bottom = 10

			editor_textbox = {
				layoutpolicy_horizontal = expanding
				autoresize = yes
				raw_text = "Lighting environments"
			}
		}

		hbox = {
			margin = { 5 5 }
			spacing = 3

			using = dockable_background

			vbox = {
				layoutpolicy_vertical = expanding
				spacing = 5

				editor_textbox  = {
					autoresize = yes
					raw_text = "Environment Settings"
					fontcolor = { 1 1 1 0.5 }
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Standard"
					onclick = "[ExecuteConsoleCommand('Environment.Debug.LoadEnvironment gfx/map/environment/environment.txt')]"
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Neutral"
					onclick = "[ExecuteConsoleCommand('Environment.Debug.LoadEnvironment gfx/map/environment/environment_neutral.txt')]"
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Debug"
					onclick = "[ExecuteConsoleCommand('Environment.Debug.LoadEnvironment gfx/map/environment/environment_debug.txt')]"
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Greyscale"
					onclick = "[ExecuteConsoleCommand('Environment.Debug.LoadEnvironment gfx/map/environment/environment_greyscale.txt')]"
				}
			}

			vbox = {
				layoutpolicy_vertical = expanding
				spacing = 5

				editor_textbox  = {
					autoresize = yes
					raw_text = "Portrait Environments"
					fontcolor = { 1 1 1 0.5 }
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Portrait Standard"
					onclick = "[ExecuteConsoleCommand('PortraitEnv.Debug.LoadEnvironment gfx/portraits/jomini_environment.txt')]"
				}

				# dockable_button = {
				# 	size = { 180 30 }
				# 	raw_text = "Old"
				# 	onclick = "[ExecuteConsoleCommand('PortraitEnv.Debug.LoadEnvironment gfx/portraits/jomini_environment_old.txt')]"
				# }

				dockable_button = {
					size = { 180 30 }
					raw_text = "Portrait Neutral"
					onclick = "[ExecuteConsoleCommand('PortraitEnv.Debug.LoadEnvironment gfx/portraits/jomini_environment_neutral.txt')]"
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Purge Portrait Cache"
					onclick = "[ExecuteConsoleCommand('PurgePortraits')]"
					tintcolor = { 1 0.5 0.1 0.8 }
					raw_tooltip = "Purge Portrait cache"
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Toggle Tonemap Curve"
					onclick = "[ExecuteConsoleCommand('shader_debug PDX_DEBUG_TONEMAP_CURVE')]"
					tintcolor = { 200 20 0 0.8 }
					raw_tooltip = "Toggle Tonemap Curve"
				}
			}
		}
	}
}

window = {
	name = "map_debug_menu"
	size = { 470 380 }
	parentanchor = top|right
	layer = debug

	background = {
		texture = "gfx/editor_gui/editor_toolbar_background.dds"
		spriteType = CorneredStretched
		spriteborder = { 5 5 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin = { 5 5 }
	}

	hbox = {
	layoutpolicy_horizontal = expanding
	margin = { 1 1 }
	spacing = 3
#	using = dockable_background

		vbox = {
			restrictparent_min = yes
	
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
					editor_textbox = {
						raw_text = "General"
						autoresize = yes
						fontcolor = { 0.1 .7 0.75 1 }
					}
		}
			dockable_button = {
				size = { 150 28 }
				raw_text = "3D Stats"
				raw_tooltip = "Show CPU/GPU stats and performance"
				
				onclick = "[ExecuteConsoleCommand('3dstats')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/travel_speed_good.dds"
				}
			}
			dockable_button = {
				size = { 150 28 }
				raw_text = "Free Camera"
				raw_tooltip = "Unlock the camera constraints while holding the right mouse button"
				onclick = "[ExecuteConsoleCommand('Camera.Restrictions')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/compass_positive.dds"
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Reload Assets"
				raw_tooltip = "Reloads all asset files"
				onclick = "[ExecuteConsoleCommand('reload assets')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/magic_positive.dds"
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Reload Texture"
				raw_tooltip = "Reloads all texture files"
				onclick = "[ExecuteConsoleCommand('reload texture')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/magic_positive.dds"
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Reload Terrain"
				raw_tooltip = "Reload all Terrain files"
				onclick = "[ExecuteConsoleCommand('reload terrain')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/magic_positive.dds"
				}
			}
	#Purpose unknown
	#		dockable_button = {
	#			size = { 150 28 }
	#			raw_text = "Add Map Objects"
	#			onclick = "[ExecuteConsoleCommand('gui.createwidget gui/debug_menus.gui map_object_menu')]"
	#		}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Map Modes"
				raw_tooltip = "Access the special map mode menu"
				onclick = "[ExecuteConsoleCommand('Dockables.Create GameMapModeSelector')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/intrigue_positive.dds"
				}
			}
		
			dockable_button = {
				size = { 150 28 }
				raw_text = "Map Editor"
				raw_tooltip = "Intialize Map Editor (No guaranteed return from this mode)"
				onclick = "[ExecuteConsoleCommand('Dockables.Create GameMapModeSelector')]"
				
				icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/rock_positive.dds"
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
					editor_textbox = {
						raw_text = "Debug Names"
						autoresize = yes
						fontcolor = { 0.5 1 0.2 1 }
					}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Entity"
				raw_tooltip = "Show entity names"
				onclick = "[ExecuteConsoleCommand('entity.info')]"
			icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/wit_positive.dds"
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Mesh"
				raw_tooltip = "Show mesh names"
				onclick = "[ExecuteConsoleCommand('mesh.info')]"
			icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/grandeur_positive.dds"
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Texture"
				raw_tooltip = "Show texture names"
				onclick = "[ExecuteConsoleCommand('mesh.texturenames')]"
			icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/magic_negative.dds"
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Joint"
				raw_tooltip = "Show skeletal joint names (When reeeeeally zoomed in)"
				onclick = "[ExecuteConsoleCommand('mesh.jointnames')]"
			icon = {
					parentanchor = left
					position = { 0 -1 }
					size = { 30 30 }
					texture = "gfx/interface/icons/modifiers/magic_positive.dds"
				}
			}
		}
	
	
		vbox = {
			restrictparent_min = yes
	
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
				editor_textbox = {
					autoresize = yes
					raw_text = "Show On/Off"
					fontcolor = { 0.75 .2 .2 1 }
				}
			}
			
				dockable_button = {
					size = { 150 28 }
					raw_text = "Fog of War"
					raw_tooltip = "Toggle Fog of War"
					onclick = "[ExecuteConsoleCommand('FogOfWar.Enable')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/traits/calm.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Borders"
					raw_tooltip = "Borders"
					onclick = "[ExecuteConsoleCommand('Border.Draw')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/message_feed/alliance.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Gradient Borders"
					raw_tooltip = "Toggle gradient borders and fills"
					onclick = "[ExecuteConsoleCommand('GradientBorders.Enable')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/message_feed/generic_good_effect.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Rivers"
					raw_tooltip = "Toggle rivers"
					onclick = "[ExecuteConsoleCommand('Draw.Rivers')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/combat_effects/defender_river.dds"
					}
				}
				dockable_button = {
					size = { 150 28 }
					raw_text = "Ocean"
					raw_tooltip = "Toggle Ocean"
					onclick = "[ExecuteConsoleCommand('Draw.Water')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/terrain_types/sea.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Bloom"
					raw_tooltip = "Toggle Bloom"
					onclick = "[ExecuteConsoleCommand('Draw.Bloom')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/war_status/war_won_icon.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Map names"
					raw_tooltip = "Toggle map names"
					onclick = "[ExecuteConsoleCommand('Draw.MapNames')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/traits/stuttering.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Map Objects"
					raw_tooltip = "Toggle map objects"
					onclick = "[ExecuteConsoleCommand('Draw.MapObjects')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/vassal_stances/barons_and_minor_landholders.dds"
					}
				}

				#No roads in CK3
				dockable_button = {
					size = { 150 28 }
					raw_text = "Roads"
					raw_tooltip = "No roads in CK3"
					onclick = "[ExecuteConsoleCommand('Draw.Roads')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/travel/icon_travel_hud_placeholder.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Shadows"
					raw_tooltip = "Toggle Shadows"
					onclick = "[ExecuteConsoleCommand('Mesh.DrawShadows')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/message_feed/spy_master.dds"
					}
				}
	
				dockable_button = {
					size = { 150 28 }
					raw_text = "Surround Mask"
					raw_tooltip = "Toggle surrounding edge fog"
					onclick = "[ExecuteConsoleCommand('Draw.Surround')]"
					icon = {
						parentanchor = left
						position = { 0 -1 }
						size = { 30 30 }
						texture = "gfx/interface/icons/traits/curious.dds"
					}
				}
		}

		vbox = {
			restrictparent_min = yes
			
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
				
				editor_textbox = {
				autoresize = yes
				raw_text = "Tweak"
				fontcolor = { 0.75 .35 .65 1 }
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Water"
				raw_tooltip = "Tweak water settings"
				onclick = "[ExecuteConsoleCommand('tweak water')]"
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Environment"
				raw_tooltip = "Tweak environment settings"
				onclick = "[ExecuteConsoleCommand('tweak environment')]"
			}
            
            
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
				
				editor_textbox = {
				autoresize = yes
				raw_text = "Debug"
				fontcolor = { 0.75 .35 .65 1 }
				}
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Collision"
				raw_tooltip = "Show collision boxes"
				onclick = "[ExecuteConsoleCommand('mesh.collisionmeshes')]"
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Bounding Box"
				raw_tooltip = "Show bounding boxes"
				onclick = "[ExecuteConsoleCommand('mesh.boundingvolumes')]"
			}
	        
			dockable_button = {
				size = { 150 28 }
				raw_text = "Normals"
				raw_tooltip = "Show normals"
				onclick = "[ExecuteConsoleCommand('mesh.normals')]"
			}
	        
			dockable_button = {
				size = { 150 28 }
				raw_text = "Skeleton"
				raw_tooltip = "Show skeleton joints"
				onclick = "[ExecuteConsoleCommand('mesh.skeleton')]"
			}
	        
			dockable_button = {
				size = { 150 28 }
				raw_text = "Mip levels"
				raw_tooltip = "Show mip-mapping levels"
				onclick = "[ExecuteConsoleCommand('mesh.miplevels')]"
			}
	        
			dockable_button = {
				size = { 150 28 }
				raw_text = "LOD Levels"
				raw_tooltip = "Show LOD levels"
				onclick = "[ExecuteConsoleCommand('Mesh.LodLevels')]"
			}
	        
			dockable_button = {
				size = { 150 28 }
				raw_text = "Lod Screen"
				raw_tooltip = "Show LOD screen percentage"
				onclick = "[ExecuteConsoleCommand('Mesh.ScreenPercentage')]"
			}
	        
			dockable_button = {
				size = { 150 28 }
				raw_text = "Post-FX Volumes"
				raw_tooltip = "Show post-effect volumes"
				onclick = "[ExecuteConsoleCommand('Draw.DebugPostEffectVolumes')]"
			}
			
			dockable_button = {
				size = { 150 28 }
				raw_text = "Clear Spawns"
				raw_tooltip = "Clear away any custom spawned entities from the map"
				onclick = "[ExecuteConsoleCommand('clearspawnedentities')]"
			}
		}
	}
}



window = {
	name = "flag_preview_window"
	size = { 500 230 }
	position = { 850 300 }
	layer = debug

	background = {
		texture = "gfx/editor_gui/editor_toolbar_background.dds"
		spriteType = CorneredStretched
		spriteborder = { 5 5 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin = { 5 5 }
	}

	vbox = {
		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_bottom = 10

			editor_textbox = {
				layoutpolicy_horizontal = expanding
				autoresize = yes
				raw_text = "Flag Preview"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = dockable_background

			visible = "[IsInGame]"

			hbox = {

				coa_realm_huge = {
					datacontext = "[GetPlayer]"
				}

				coa_realm_big = {
					datacontext = "[GetPlayer]"
				}

				coa_realm_medium = {
					datacontext = "[GetPlayer]"
				}

				coa_realm_small = {
					datacontext = "[GetPlayer]"
				}
			}

			hbox = {
				spacing = 5

				icon = {
					name = "hourglass"
					texture = "gfx/interface/icons/temp_icon_search.dds"
					color = { 0.788235 0.643137 0.419608 1 }
					size = { 35 35 }
				}

				editor_textinput = {
					name = "console_edit"
					size = { 400 35 }
					margin = { 5 0 }
					alwaystransparent = no
					focuspolicy = all
					fontsize = 15

					#	onreturnpressed = "[FindTitleView.OnDone]"
					#	ontextedited = "[FindTitleView.OnEdit]"
				}
			}
		}
	}
}

widget = {
	name = "tweak_window"
	size = { 200 200 }
	layer = debug

	background = {
		texture = "gfx/editor_gui/editor_toolbar_background.dds"
		spriteType = CorneredStretched
		spriteborder = { 5 5 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}

	vbox = {
		restrictparent_min = yes

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }
			margin_bottom = 10

			editor_textbox = {
				layoutpolicy_horizontal = expanding
				autoresize = yes
				raw_text = "Tweak"
			}
		}

		vbox = {
			margin = { 5 5 }
			spacing = 3

			using = dockable_background

			dockable_button = {
				size = { 180 30 }
				raw_text = "Defines"
				onclick = "[ExecuteConsoleCommand('tweak NDefines')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Graphics Defines"
				onclick = "[ExecuteConsoleCommand('tweak NGraphics')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Audio Defines"
				onclick = "[ExecuteConsoleCommand('tweak NAudio')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Rivers"
				onclick = "[ExecuteConsoleCommand('tweak river')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Environment"
				onclick = "[ExecuteConsoleCommand('tweak environment')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Borders"
				onclick = "[ExecuteConsoleCommand('tweak border')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Draw"
				onclick = "[ExecuteConsoleCommand('tweak draw')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Mesh"
				onclick = "[ExecuteConsoleCommand('tweak mesh')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Terrain"
				onclick = "[ExecuteConsoleCommand('tweak terrain')]"
			}

			dockable_button = {
				size = { 180 30 }
				raw_text = "Map objects"
				onclick = "[ExecuteConsoleCommand('tweak MapObjects')]"
			}

		}
	}
}
widget = {
	name = "court_debug_menu"
	size = { 320 375 }
	parentanchor = top|right
	layer = debug

	background = {
		texture = "gfx/editor_gui/editor_toolbar_background.dds"
		spriteType = CorneredStretched
		spriteborder = { 5 5 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin = { 5 5 }
	}
	
	
	hbox = {
	layoutpolicy_horizontal = expanding
	margin = { 1 1 }
	spacing = 3
#	using = dockable_background

	
		vbox = {
			restrictparent_min = yes
	
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
				editor_textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "Court Debug Menu"
				}
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "3D Stats"
				raw_tooltip = "Show CPU/GPU stats and performance"
				
				onclick = "[ExecuteConsoleCommand('3dstats')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Reload Assets"
				raw_tooltip = "Reloads all asset files"
				onclick = "[ExecuteConsoleCommand('reload assets')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Reload Texture"
				raw_tooltip = "Reloads all texture files"
				onclick = "[ExecuteConsoleCommand('reload texture')]"
			}

			hbox = {
				#SIZEBUMPER
				layoutpolicy_horizontal = expanding
				size = { 0 0 }
				margin = { 10 5 }
				margin_bottom = 20
	
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
				editor_textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "Texture Debug"
				}
			}

	
			dockable_button = {
				size = { 150 25 }
				raw_text = "Albedo / Diffuse"
				raw_tooltip = "Render only Diffuse (Att! Long initial load time)"
				
				onclick = "[ExecuteConsoleCommand('shader_debug PDX_DEBUG_DIFFUSE ')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Normal"
				raw_tooltip = "Render only Normals (Att! Long initial load time)"
				
				onclick = "[ExecuteConsoleCommand('shader_debug PDX_DEBUG_NORMAL ')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Roughness"
				raw_tooltip = "Render only Roughness (Att! Long initial load time)"
				
				onclick = "[ExecuteConsoleCommand('shader_debug PDX_DEBUG_ROUGHNESS ')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Metalness"
				raw_tooltip = "Render only Metalness (Att! Long initial load time)"
				
				onclick = "[ExecuteConsoleCommand('shader_debug PDX_DEBUG_METALNESS ')]"
			}
			

			hbox = {
				#BOTTOM-SIZEBUMPER
				layoutpolicy_horizontal = expanding
				size = { 150 100 }
				margin = { 10 5 }
				margin_bottom = 14
	
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
				editor_textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "Lighting Debug"
				}
			}

			dockable_button = {
				size = { 150 25 }
				raw_text = "SSAO"
				raw_tooltip = "Render only Screen Space Ambient Occlusion"
				
				onclick = "[ExecuteConsoleCommand('shader_debug PDX_DEBUG_SHADOW ')]"
			}
			
		}
	
		vbox = {
			restrictparent_min = yes
	

			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
				editor_textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "Debug Names"
				}
			}
	
			dockable_button = {
				size = { 150 25 }
				raw_text = "Entity"
				raw_tooltip = "Show entity names"
				onclick = "[ExecuteConsoleCommand('entity.info')]"
				
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Mesh"
				raw_tooltip = "Show mesh names"
				onclick = "[ExecuteConsoleCommand('mesh.info')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Texture"
				raw_tooltip = "Show texture names"
				onclick = "[ExecuteConsoleCommand('mesh.texturenames')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Joint"
				raw_tooltip = "Show skeletal joint names"
				onclick = "[ExecuteConsoleCommand('mesh.jointnames')]"
			}
	
			hbox = {
				layoutpolicy_horizontal = expanding
				size = { 150 50 }
				margin = { 10 5 }
				margin_bottom = 10
	
				editor_textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "Debug Tools"
				}
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Collision"
				raw_tooltip = "Show collision boxes"
				onclick = "[ExecuteConsoleCommand('mesh.collisionmeshes')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Bounding Box"
				raw_tooltip = "Show bounding boxes"
				onclick = "[ExecuteConsoleCommand('mesh.boundingvolumes')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Normals"
				raw_tooltip = "Show normals"
				onclick = "[ExecuteConsoleCommand('mesh.normals')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Skeleton"
				raw_tooltip = "Show skeleton joints"
				onclick = "[ExecuteConsoleCommand('mesh.skeleton')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Mip levels"
				raw_tooltip = "Show mip-mapping levels"
				onclick = "[ExecuteConsoleCommand('Debug.TextureMode MipLevel')]"
			}
			
			dockable_button = {
				size = { 150 25 }
				raw_text = "Texel Density"
				raw_tooltip = "Show texel density levels"
				onclick = "[ExecuteConsoleCommand('Debug.TextureMode TexelDensity ')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "LOD Levels"
				raw_tooltip = "Show LOD levels"
				onclick = "[ExecuteConsoleCommand('Mesh.LodLevels')]"
			}
		
			dockable_button = {
				size = { 150 25 }
				raw_text = "Lod Screen Percentage"
				raw_tooltip = "Show LOD screen percentage"
				onclick = "[ExecuteConsoleCommand('Mesh.ScreenPercentage')]"
			}
	
	
		}
	}
}

widget = {
	name = "map_object_menu"
	size = { 100% 100% }
	position = { 1 1 }

	textbox = {
		position = { 0 25% }
		size = { 100% 20 }
		using = editor_text
		align = center
		raw_text = "Click anywhere to place map objects"
	}

	button = {
		size = { 100% 100% }
		onclick = "[ExecuteConsoleCommand('MapObjects.Painter.AddPosition')]"
	}

	widget = {
		name = "background"
		size = { 70 110 }
		position = { 100 25 }

		vbox = {
			restrictparent_min = yes

			background = {
				texture = "gfx/editor_gui/editor_toolbar_background.dds"
				spriteType = CorneredStretched
				spriteborder = { 5 5 }
				shaderfile = "gfx/FX/pdxgui_default.shader"
				margin = { 5 5 }
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 5 }
				margin_bottom = 10

				editor_textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					raw_text = "Place Map Objects"
				}
			}

			vbox = {
				dockable_button = {
					size = { 180 30 }
					raw_text = "Config"
					onclick = "[ExecuteConsoleCommand('tweak MapObjects.Painter')]"
				}

				dockable_button = {
					size = { 180 30 }
					raw_text = "Cancel"
					onclick = "[ExecuteConsoleCommand('GUI.ClearWidgets')]"
				}
			}
		}
	}

}
