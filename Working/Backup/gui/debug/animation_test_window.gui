template animation_test_portrait
{
	using = pe_torso_button_template
	alwaystransparent = no
	size = { 330 330 }

	background_texture = "gfx/portraits/portrait_transparent.dds"
	framesize = { 80 120 }
	mask = "gfx/portraits/portrait_editor_mask.dds"
}

window = {
	name = "animation_test_window"
	size = { 1600 1050 }
	parentanchor = top|right
	position = { -80 130 }
	layer = middle

	using = Window_Background
	using = Window_Decoration_Spike
	using = Animation_ShowHide_Standard

	textbox = {
		size = { 80 25 }
		position = { 50 30 }
		fontsize = 16
		using = editor_font
		raw_text = "Animation"
	}
				
	blockoverride "button_close"
	{
		parentanchor = top|right
	}
		
	flowcontainer = {
		position = { 30 60 }
		direction = horizontal

		dropDown = {				
			alwaystransparent = no
			name = "animations_dropdown"
			size = { 250 20 }
			datamodel = "[AnimationTestWindow.GetAnimationGroupItems]"
			onselectionchanged = "[AnimationTestWindow.SetSelectedAnimationGroup]"
			selectedindex = "[AnimationTestWindow.GetSelectedAnimationGroupIndex]"

			active_item = {
				widget = {
					alwaystransparent = no
					size = { 250 20 }

					button = {
						size = { 200 20 }
						position = { 0 0 }
						texture = "gfx/editor_gui/editor_dropdown.dds"
						spriteType = CorneredStretched
						gfxtype = framedbuttongfx
						effectname = "NoHighlight"
						spriteborder = { 4 4 }
						spriteborder_right = 24
						button_trigger = none
						framesize = { 32 16 }
						upframe = 1
						downframe = 2
						overframe = 3
						disableframe = 4
					}

					pe_text = {
						text = "[AnimationTestGroupItem.GetName]"
						position = { 0 0 }
						size = { 200 20 }
					}
				}
			}

			item = {
				widget = {
					alwaystransparent = no
					size = { 180 20 }

					button = {
						size = { 180 18 }
						texture = "gfx/editor_gui/editor_dropdown_item.dds"
						spriteType = CorneredTiled
						spriteborder = { 1 1 }
						gfxtype = framedbuttongfx
						framesize = { 8 8 }
						upframe = 1
						downframe = 2
						overframe = 2
						disableframe = 1
						button_trigger = none
					}

					pe_text = {
						text = "[AnimationTestGroupItem.GetName]"
						position = { 16 0 }
						size = { 160 18 }
					}
				}
			}

			list = {
				scrollarea = {
					position = { 15 20 }
					maximumsize = { 200 610 }
					autoresizescrollarea = yes

					background = {
						margin = { 2 2 }
						margin_bottom = 6
						margin_right = 6
						texture = "gfx/editor_gui/editor_dropdown_list.dds"
						spriteType = CorneredStretched
						spriteborder = { 6 6 }
						spriteborder_right = 8
						spriteborder_bottom = 8
						shaderfile = "gfx/FX/pdxgui_default.shader"
					}

					scrollwidget = {
						fixedgridbox = {
							alwaystransparent = no
							addcolumn = 175
							addrow = 18
						}
					}
					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}
					scrollbar_horizontal = {
						using = editor_horizontal_scrollbar
					}
				}
			}
		}
	}	
		
	vbox = {
		position = { -20 -40 }
		hbox = {
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_female', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Average Female"  
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_male', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Average Male"  
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_dwarf_female', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Dwarf Female" 
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_dwarf_male', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Dwarf Male"
				}
			}
		}
		hbox = {#These can be removed if you add positions to the portraits
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_fat_dwarf_female', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Fat Dwarf Female"
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_fat_dwarf_male', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Fat Dwarf Male"
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_female_pregnant', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Pregnant Female(9 months)"	
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_muscular_female', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Muscular Female"
				}
			}				
		}
		
		hbox = {#These can be removed if you add positions to the portraits
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_muscular_male', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Muscular Male"
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_female_child', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Children Female"
				}
			}
		
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_male_child', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Children Male"
				}
			}

			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_hunchbacked_female', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Hunchbacked female"
				}
			}
			
			vbox = {
				button = {
					using = animation_test_portrait
					portrait_texture = "[GetAnimatedBookmarkPortrait('bookmark_animation_test_hunchbacked_male', AnimationTestWindow.GetSelectedAnimationGroup,'environment_body`', 'camera_lifestyles', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
				}
				text_label_center = {
					raw_text = "Hunchbacked Male"
				}
			}						
		}
	}
}

