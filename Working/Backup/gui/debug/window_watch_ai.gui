window = {
	using = editor_window
	name = "ai_watch_window"
	parentanchor = hcenter|vcenter
	size = { 1200 700 }
	position = { 0 0 }
	layer = top

	button = {
		using = editor_button
		name = "close_button"
		position = { -4 5 }
		size = { 20 20 }
		parentanchor = top|right
		raw_text = "x"
		align = center|nobaseline
		onclick = "[AIWatchWindow.Close]"
		shortcut = "close_window"
	}
	
	checkbutton = {
		using = editor_checkbutton
		position = { -54 8 }
		parentanchor = top|right
		checked = "[AIWatchWindow.WillPauseOnChange]"
		onclick = "[AIWatchWindow.ToggleChangeOnPause]"
	}
	
	watch_textbox = {
		position = { -94 4 }
		size = { 100 20 }
		fontsize = 14
		parentanchor = top|right
		widgetanchor = top|right
		raw_text = "Pause on Change:"
		align = left
	}
	
	watch_textbox = {
		position = { 5 0 }
		size = { 400 30 }
		fontsize = 16
		text = "[AIWatchWindow.GetCharacter.GetUIName]"
		align = left
	}
	
	flowcontainer = {
		name = "tab_buttons"
		position = { 0 30 }
		parentanchor = top|hcenter
		
		button_standard_list = {
			name = "strategy_button"
			size = { 120 40 }
			down = "[AIWatchWindow.IsTabStrategy]"
			onclick = "[AIWatchWindow.SetTabStrategy]"
			raw_text = "Strategy"
		}
		
		button_standard_list= {
			name = "marriage_button"
			size = { 120 40 }
			down = "[AIWatchWindow.IsTabMarriage]"
			onclick = "[AIWatchWindow.SetTabMarriage]"
			raw_text = "Marriage"
		}

		button_standard_list = {
			name = "scheme_button"
			size = { 120 40 }
			down = "[AIWatchWindow.IsTabScheme]"
			onclick = "[AIWatchWindow.SetTabScheme]"
			raw_text = "Scheme"
		}
		
		button_standard_list = {
			name = "cb_button"
			size = { 120 40 }
			down = "[AIWatchWindow.IsTabCB]"
			onclick = "[AIWatchWindow.SetTabCB]"
			raw_text = "CB"
		}

		button_standard_list = {
			name = "activity_button"
			size = { 120 40 }

			down = "[AIWatchWindow.IsTabActivities]"
			onclick = "[AIWatchWindow.SetTabActivities]"

			raw_text = "Activities"
		}

		button_standard_list = {
			name = "economy_button"
			size = { 120 40 }

			down = "[AIWatchWindow.IsTabEconomy]"
			onclick = "[AIWatchWindow.SetTabEconomy]"

			raw_text = "Economy"
		}
	}
	
	########################################
	### STRATEGY
	########################################
	widget = {
		name = "strategy_widget"
		size = { 1200 630 }
		position = { 0 70 }
		parentanchor = top|left
		visible = "[AIWatchWindow.IsTabStrategy]"

		### WANTED TITLES
		watch_textbox = {
			position = { 10 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Wanted titles:"
			align = left
		}
		
		scrollarea = {
			position = { 0 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "wanted_titles_grid"
					datamodel = "[AIWatchWindow.GetWantedTitleItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 40
					maxhorizontalslots = 1

					item = {
						container = {
							watch_textbox = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								position = { 10 0 }
								size = { 240 30 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}

							watch_textbox = {
								position = { 10 20 }
								size = { 280 30 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Score: [SAIValueInfo.GetValue]"
							}
						}
					}
				}
			}
		}
		
		### THREATS
		watch_textbox = {
			position = { 310 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Threats:"
			align = left
		}
		
		scrollarea = {
			position = { 300 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "threats_grid"
					datamodel = "[AIWatchWindow.GetThreatItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAIStrategyInfo.GetCharacter]"
								size = { 64 96 }
								position = { 0 -37 }
								parentanchor = top|left

								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAIStrategyInfo.OnClick]"
								}
							}

							text_multi = {
								datacontext = "[SAIStrategyInfo.GetCharacter]"
								position = { 70 0 }
								size = { 210 24 }
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}
							
							text_single = {
								position = { 70 24 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Threat: [SAIStrategyInfo.GetThreat]"
							}

							text_single = {
								position = { 70 44 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Enemy: [SAIStrategyInfo.GetEnemy]"
							}

							text_single = {
								position = { 175 44 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Friend: [SAIStrategyInfo.GetFriend]"
							}
						}
					}
				}
			}
		}
		
		### ENEMIES
		watch_textbox = {
			position = { 610 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Enemies:"
			align = left
		}
		
		scrollarea = {
			position = { 600 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "enemies_grid"
					datamodel = "[AIWatchWindow.GetEnemyItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAIStrategyInfo.GetCharacter]"
								size = { 64 96 }
								position = { 0 -37 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAIStrategyInfo.OnClick]"
								}
							}

							text_multi = {
								datacontext = "[SAIStrategyInfo.GetCharacter]"
								position = { 70 0 }
								size = { 210 24 }
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}
							
							text_single = {
								position = { 70 24 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Enemy: [SAIStrategyInfo.GetEnemy]"
							}

							text_single = {
								position = { 70 44 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Threat: [SAIStrategyInfo.GetThreat]"
							}

							text_single = {
								position = { 175 44 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Friend: [SAIStrategyInfo.GetFriend]"
							}
						}
					}
				}
			}
		}
		
		### FRIENDS
		watch_textbox = {
			position = { 910 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Friends:"
			align = left
		}
		
		scrollarea = {
			position = { 900 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "friends_grid"
					datamodel = "[AIWatchWindow.GetFriendItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAIStrategyInfo.GetCharacter]"
								size = { 64 96 }
								position = { 0 -37 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAIStrategyInfo.OnClick]"
								}
							}

							text_multi = {
								datacontext = "[SAIStrategyInfo.GetCharacter]"
								position = { 70 0 }
								size = { 210 24 }
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}
							
							text_single = {
								position = { 70 24 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Friend: [SAIStrategyInfo.GetFriend]"
							}

							text_single = {
								position = { 70 44 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Threat: [SAIStrategyInfo.GetThreat]"
							}

							text_single = {
								position = { 175 44 }
								size = { 105 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Enemy: [SAIStrategyInfo.GetEnemy]"
							}
						}
					}
				}
			}
		}
	}
	
	########################################
	### MARRIAGE
	########################################
	widget = {
		name = "marriage_widget"
		size = { 1200 630 }
		position = { 0 70 }
		parentanchor = top|left
		visible = "[AIWatchWindow.IsTabMarriage]"

		watch_textbox = {
			position = { 10 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Marriages:"
			align = left
		}
		
		scrollarea = {
			name = "courtiers_scrollarea"
			position = { 0 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "courtiers_grid"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								size = { 64 96 }
								position = { 0 -37 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAIStrategyInfo.OnClick]"
								}
							}

							text_single = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								position = { 70 1 }
								size = { 100 30 }
								multiline = yes
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}
						}
					}
				}
			}
		}

		watch_textbox = {
			position = { 310 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Spouses:"
			align = left
		}

		button_standard_list = {
			name = "calculate_spouse_candidates_button"
			position = { 480 0 }
			size = { 120 40 }
			onclick = "[AIWatchWindow.CalculateSpouseCandidates]"
			raw_text = "Calculate"
		}

		scrollarea = {
			name = "spouse_scrollarea"
			position = { 300 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "spouse_grid"
					datamodel = "[AIWatchWindow.GetTargetItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								size = { 64 96 }
								position = { 0 -37 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAIStrategyInfo.OnClick]"
								}
							}

							text_multi = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								position = { 70 0 }
								size = { 210 30 }
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}
							
							text_single = {
								position = { 70 30 }
								size = { 210 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Score: [SAIValueInfo.GetValue]"
							}
						}
					}
				}
			}
		}
	}
	
	########################################
	### SCHEME
	########################################
	widget = {
		name = "scheme_widget"
		size = { 1200 630 }
		position = { 0 70 }
		parentanchor = top|left
		visible = "[AIWatchWindow.IsTabScheme]"

		watch_textbox = {
			position = { 10 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Schemes:"
			align = left
		}
		
		scrollarea = {
			name = "schemes_scrollarea"
			position = { 0 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "schemes_grid"
					datamodel = "[AIWatchWindow.GetSchemeTypeItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						button_standard_list = {
							datacontext = "[SAISchemeTypeInfo.GetSchemeType]"
							name = "scheme_button"
							position = { 480 0 }
							size = { 200 40 }
							onclick = "[SAISchemeTypeInfo.OnClick]"
							text = "[SchemeType.GetTypeName]"
						}
					}
				}
			}
		}

		watch_textbox = {
			position = { 310 0 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Targets:"
			align = left
		}

		button_standard_list = {
			name = "calculate_target_candidates_button"
			position = { 480 0 }
			size = { 120 40 }
			onclick = "[AIWatchWindow.CalculateSchemeTargetCandidates]"
			raw_text = "Calculate"
		}

		scrollarea = {
			name = "scheme_target_scrollarea"
			position = { 300 30 }
			size = { 300 580 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "scheme_targets_grid"
					datamodel = "[AIWatchWindow.GetTargetItems]"
					position = { 0 0 }
					size = { 300 580 }
					addcolumn = 300
					addrow = 64
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								size = { 64 96 }
								position = { 0 -37 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAIStrategyInfo.OnClick]"
								}
							}

							text_multi = {
								datacontext = "[SAIValueInfo.GetCharacter]"
								position = { 70 0 }
								size = { 210 30 }
								parentanchor = top|left
								align = left|top
								text = "[Character.GetUINameNoTooltip]"
							}
							
							text_single = {
								position = { 70 30 }
								size = { 210 20 }
								fontsize = 14
								parentanchor = top|left
								align = left|top
								raw_text = "Score: [SAIValueInfo.GetValue]"
							}
						}
					}
				}
			}
		}
	}
	
	########################################
	### CB
	########################################
	widget = {
		name = "cb_widget"
		size = { 1200 630 }
		position = { 0 70 }
		parentanchor = top|left
		visible = "[AIWatchWindow.IsTabCB]"

		watch_textbox = {
			position = { 10 40 }
			size = { 180 20 }
			fontsize = 16
			parentanchor = top|left
			raw_text = "Casus Bellis:"
			align = left
		}

		button_standard_list = {
			name = "calculate_cb_candidates_button"
			position = { 480 0 }
			size = { 120 40 }
			onclick = "[AIWatchWindow.CalculateCBCandidates]"
			raw_text = "Calculate"
		}

		scrollarea = {
			name = "cb_scrollarea"
			position = { 0 70 }
			size = { 1200 550 }
			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "cb_grid"
					datamodel = "[AIWatchWindow.GetCBTypeItems]"
					position = { 0 0 }
					size = { 1200 550 }
					addcolumn = 1200
					addrow = 120
					maxhorizontalslots = 1

					item = {
						container = {
							portrait_head_small = {
								datacontext = "[SAICBTypeInfo.GetTarget]"
								position = { 0 0 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAICBTypeInfo.OnClickTarget]"
								}
							}

							portrait_head_small = {
								datacontext = "[SAICBTypeInfo.GetClaimant]"
								position = { 85 0 }
								parentanchor = top|left
								blockoverride "portrait_button_template_onclick"
								{
									onclick = "[SAICBTypeInfo.OnClickClaimant]"
								}
							}

							widget = {
								position = { 200 0 }
								size = { 540 120 }
								tooltip = [SAICBTypeInfo.GetScoreTooltip]
								
								watch_textbox = {
									size = { 120 20 }
									fontsize = 14
									parentanchor = top|left
									align = left|top
									raw_text = "Score: [SAICBTypeInfo.GetScore]"
									
								}

								text_multi = {
									datacontext = "[SAICBTypeInfo.GetCBType]"
									position = { 240 0 }
									size = { 300 20 }
									fontsize = 14
									parentanchor = top|left
									align = left|top
									text = "[CasusBelliType.GetName]"
								}

								text_multi = {
									datacontext = "[SAICBTypeInfo.GetTarget]"
									position = { 0 20 }
									size = { 340 25 }
									parentanchor = top|left
									align = left|top
									text = "[Character.GetUINameNoTooltip]"
								}

								text_single = {
									visible = "[SAICBTypeInfo.HasHostages]"
									position = { 0 50 }
									raw_text = "Have hostages"
								}
							}
						}
					}
				}
			}
		}
	}


	########################################
	### Activities
	########################################
	widget = {
		name = "activities_widget"
		visible = "[AIWatchWindow.IsTabActivities]"
		parentanchor = top|left
		position = { 0 70 }
		size = { 1200 630 }

		watch_textbox = {
			parentanchor = top|left
			position = { 10 40 }
			size = { 180 20 }

			raw_text = "Activities: "
			fontsize = 16
			align = left
		}

		button_standard_list = {
			name = "calculate_activity_candidates_button"
			position = { 480 0 }
			size = { 120 40 }

			onclick = "[AIWatchWindow.CalculateActivityCandidates]"
			
			raw_text = "Calculate"
		}

		scrollarea = {
			name = "activity_scrollarea"
			position = { 0 70 }
			size = { 300 550 }

			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = editor_vertical_scrollbar
			}

			scrollwidget = {
				fixedgridbox = {
					name = "activity_grid"
					datamodel = "[AIWatchWindow.GetActivityItems]"
					position = { 0 0 }
					size = { 300 550 }
					
					addrow = 120
					addcolumn = 300
					maxhorizontalslots = 1

					item = {
						container = {
							watch_textbox = {
								parentanchor = top|left
								position = { 10 0 }
								size = { 280 30 }
								
								raw_text = "[SAIActivityInfo.GetType.GetName]"
								fontsize = 14
								align = left|top
							}

							watch_textbox = {
								parentanchor = top|left
								position = { 10 20 }
								size = { 280 30 }

								raw_text = "Priority: [SAIActivityInfo.GetScore]"
								fontsize = 14
								align = left|top

								tooltipwidget = {
									widget_value_breakdown_tooltip = {
										datacontext = "[AIWatchWindow.AccessAIWillHostBreakdownTooltip( SAIActivityInfo.Self )]"
									}
								}
							}

							button_standard_list = {
								name = "calculate_creation_data_button"
								position = { 120 0 }
								size = { 120 40 }

								onclick = "[AIWatchWindow.CalculateValuesForActivity(SAIActivityInfo.GetType.Self)]"

								raw_text = "Calculate Creation test"
							}
						}
					}
				}
			}
		}


		watch_textbox = {
			parentanchor = top|left
			position = { 310 40 }
			size = { 180 20 }

			raw_text = "Creation Data:"
			fontsize = 16
			align = left
		}

		widget = {
			name = "activity_creation_area"
			position = { 300 70 }
			size = { 900 550 }

			widget = {
				name = "activity_province_creation_data"
				position = { 0 0 }
				size = { 200 550 }

				watch_textbox = {
					parentanchor = top|left
					position = { 0 0 }
					size = { 180 20 }

					raw_text = "Provinces:"
					fontsize = 16
					align = left
				}

				watch_textbox = {
					parentanchor = top|left
					position = { 0 20 }
					size = { 180 20 }

					raw_text = "Select num: [AIWatchWindow.GetActivitySelectNumProvinces]"
					fontsize = 14
					align = left
				}

				scrollarea = {
					name = "activity_locations_scrollarea"
					position = { 0 50 }
					size = { 200 500 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "activity_locations_grid"
							datamodel = "[AIWatchWindow.GetActivityLocationItems]"
							position = { 0 0 }
							size = { 200 500 }

							addrow = 90
							addcolumn = 200
							maxhorizontalslots = 1

							item = {
								container = {
									watch_textbox = {
										parentanchor = top|left
										position = { 0 0 }
										size = { 280 20 }
										
										raw_text = "[SAIActivityLocationInfo.GetLocation.GetNameNoTooltip]"
										fontsize = 12
										align = left|top
									}

									watch_textbox = {
										parentanchor = top|left
										position = { 0 20 }
										size = { 280 20 }

										raw_text = "Weight: [SAIActivityLocationInfo.GetScore]"
										fontsize = 12
										align = left|top

										tooltipwidget = {
											widget_value_breakdown_tooltip = {
												datacontext = "[AIWatchWindow.AccessValueBreakdownForActivityProvince(SAIActivityLocationInfo.Self)]"
											}
										}
									}

									button_standard_list = {
										name = "calculate_activity_phases_button"
										position = { 0 40 }
										size = { 120 40 }

										onclick = "[SAIActivityLocationInfo.CalculatePhases]"
										
										raw_text = "Calculate Phases"
									}
								}
							}
						}
					}
				}
			}

			widget = {
				name = "activity_phase_creation_data"
				position = { 200 0 }
				size = { 200 550 }

				watch_textbox = {
					parentanchor = top|left
					position = { 0 0 }
					size = { 180 20 }

					raw_text = "Phases:"
					fontsize = 16
					align = left
				}

				scrollarea = {
					name = "activity_phases_scrollarea"
					position = { 0 30 }
					size = { 200 500 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "activity_phases_grid"
							datamodel = "[AIWatchWindow.GetActivityPhaseItems]"
							position = { 0 0 }
							size = { 200 500 }

							addrow = 50
							addcolumn = 200
							maxhorizontalslots = 1

							item = {
								container = {
									watch_textbox = {
										parentanchor = top|left
										position = { 0 0 }
										size = { 280 20 }
										
										raw_text = "[SAIActivityPhaseInfo.GetPhase.GetName]"
										fontsize = 12
										align = left|top
									}

									watch_textbox = {
										parentanchor = top|left
										position = { 0 20 }
										size = { 280 20 }

										raw_text = "Weight: [Select_CString(SAIActivityPhaseInfo.GetPhase.IsPredefined, '-predefined- ', SAIActivityPhaseInfo.GetScore)]"
										fontsize = 12
										align = left|top

										tooltipwidget = {
											widget_value_breakdown_tooltip = {
												datacontext = "[AIWatchWindow.AccessValueBreakdownForActivityPhase(SAIActivityPhaseInfo.Self)]"
											}
										}
									}
								}
							}
						}
					}
				}
			}

			widget = {
				name = "activity_options_creation_data"
				position = { 400 0 }
				size = { 200 550 }


				watch_textbox = {
					parentanchor = top|left
					position = { 0 0 }
					size = { 180 20 }

					raw_text = "Options:"
					fontsize = 16
					align = left
				}

				scrollarea = {
					name = "activity_options_scrollarea"
					position = { 0 30 }
					size = { 200 500 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = editor_vertical_scrollbar
					}

					scrollwidget = {
						fixedgridbox = {
							name = "activity_options_grid"
							datamodel = "[AIWatchWindow.GetActivityOptionItems]"
							position = { 0 0 }
							size = { 200 500 }

							addrow = 70
							addcolumn = 200
							maxhorizontalslots = 1

							item = {
								container = {
									watch_textbox = {
										parentanchor = top|left
										position = { 0 0 }
										size = { 280 20 }
										
										raw_text = "Category: [SAIActivityOptionInfo.GetCategory.GetName]"
										fontsize = 12
										align = left|top
									}

									watch_textbox = {
										parentanchor = top|left
										position = { 0 20 }
										size = { 280 20 }
										
										raw_text = "Type: [SAIActivityOptionInfo.GetType.GetName]"
										fontsize = 12
										align = left|top
									}
									
									watch_textbox = {
										parentanchor = top|left
										position = { 0 40 }
										size = { 280 20 }

										raw_text = "Weight: [SAIActivityOptionInfo.GetScore]"
										fontsize = 12
										align = left|top

										tooltipwidget = {
											widget_value_breakdown_tooltip = {
												datacontext = "[AIWatchWindow.AccessValueBreakdownForActivityOption(SAIActivityOptionInfo.Self)]"
											}
										}
									}
								}
							}
						}
					}
				}
			}

			watch_textbox = {
				parentanchor = top|left
				position = { 600 0 }
				size = { 180 20 }

				raw_text = "Guests:"
				fontsize = 16
				align = left
			}

			scrollarea = {
				name = "guest_list_scrollarea"
				position = { 600 30 }
				size = { 300 580 }
				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = editor_vertical_scrollbar
				}

				scrollwidget = {
					fixedgridbox = {
						name = "activity_guest_list_grid"
						datamodel = "[AIWatchWindow.GetTargetItems]"
						position = { 0 0 }
						size = { 300 580 }

						addcolumn = 300
						addrow = 64
						maxhorizontalslots = 1

						item = {
							container = {
								portrait_head_small = {
									datacontext = "[SAIValueInfo.GetCharacter]"
									parentanchor = top|left
									size = { 64 96 }
									position = { 0 -37 }

									blockoverride "portrait_button_template_onclick"
									{
										onclick = "[SAIStrategyInfo.OnClick]"
									}
								}

								text_multi = {
									datacontext = "[SAIValueInfo.GetCharacter]"
									parentanchor = top|left
									position = { 70 0 }
									size = { 210 30 }

									text = "[Character.GetUINameNoTooltip]"
									align = left|top
								}
								
								text_single = {
									parentanchor = top|left
									position = { 70 30 }
									size = { 210 20 }
									
									raw_text = "Will accept: [SAIValueInfo.GetValue]"
									fontsize = 14
									align = left|top
								}
							}
						}
					}
				}
			}
		}
	}

	########################################
	### Economic values
	########################################

	widget = {
		name = "economic_decision_values"
		visible = "[AIWatchWindow.IsTabEconomy]"
		parentanchor = top|left
		position = { 0 70 }
		size = { 1200 630 }

		hbox = {
			vbox = {
				name = "men_at_arms_values"
				layoutpolicy_horizontal = expanding
				maximumsize = { 300 -1 }
				margin = { 8 8 }

				background = {
					using = Background_Area_Border
				}

				watch_textbox = {
					size = { 180 20 }
					fontsize = 16
					raw_text = "Men-at Arms Values"
					align = left
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area_Light
					}
					
					raw_tooltip = "[AIWatchWindow.GetCharacter.MakeScope().GetScriptValueDesc( 'ai_men_at_arms_expense_gold_min' )]"
					#raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_gold_min' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "expense_gold_min: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_gold_min' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area
					}
					
					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_gold_ideal' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "expense_gold_ideal: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_gold_ideal' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area_Light
					}

					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_gold_max' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "expense_gold_max: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_gold_max' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area
					}

					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_prestige_min' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "expense_prestige_min: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_prestige_min' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area_Light
					}

					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_prestige_ideal' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "expense_prestige_ideal: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_prestige_ideal' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area
					}
					
					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_prestige_max' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "expense_prestige_max: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_expense_prestige_max' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area_Light
					}
					
					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_chance_expense_below_min' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "chance_expense_below_min: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_chance_expense_below_min' )|V2]"
						align = right
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 2 }

					background = { 
						using = Background_Area
					}
					
					raw_tooltip = "[GetScriptValueBreakdown( AIWatchWindow.GetCharacter, 'ai_men_at_arms_chance_expense_below_ideal' )]"

					watch_textbox = {
						size = { 180 20 }
						fontsize = 16
						raw_text = "chance_expense_below_ideal: "
						align = left
					}

					expand = { }

					watch_textbox = {
						size = { 40 20 }
						fontsize = 16
						raw_text = "[CalculateScriptValue( AIWatchWindow.GetCharacter, 'ai_men_at_arms_chance_expense_below_ideal' )|V2]"
						align = right
					}
				}
			}
		}
	}
}
