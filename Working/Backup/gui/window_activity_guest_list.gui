window = {
	name = "activity_guest_list"
	datacontext = "[ActivityGuestListWindow.AccessList]"

	position = { 600 0 }
	size = { 1200 90% }
	layer = middle

	allow_outside = yes

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_y = 70
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_y = 100
	}

	vbox = {
		using = Window_Margins

		datacontext = "[ActivityGuestListWindow.GetActivityType]"

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "ACTIVITY_GUEST_LIST_HEADER"
			}
			blockoverride "button_close"
			{
				onclick = "[ActivityGuestListWindow.Close]"
			}
		}

		hbox = {
			name = "window_contents"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {
				name = "left_side_planning_activity"
				visible = "[ActivityGuestListWindow.IsFromPlanning]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				spacing = 8

				text_multi = {
					name = "guest_list_instruction_text"
					layoutpolicy_horizontal = expanding

					text = "[ActivityType.GetLocalizedText( 'guest_help_text' )]"
					align = center|nobaseline
					autoresize = yes
					minimumsize = { 430 -1 }
					maximumsize = { 430 -1 }

					margin = { 16 8 }

					background = {
						using = Background_Area
					}
				}

				vbox = {
					name = "guest_category_picking"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					visible = "[GreaterThan_int32(GetDataModelSize(ActivityType.GetGuestInviteRules), '(int32)1')]"
					enabled = "[Not( ActivityGuestListWindow.IsSelectingSpecialGuest )]"

					margin = { 16 0 }

					spacing = 8

					text_label_center = {
						text = "ACTIVITY_GUEST_LIST_INVITE_GROUP"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content"
						{
							layoutpolicy_horizontal = expanding

							vbox = {
								name = "invite_groups"
								datamodel = "[ActivityType.GetGuestInviteRules]"
								layoutpolicy_horizontal = expanding

								spacing = 4

								item = {
									button_standard = {
										name = "add_invite_rule"
										datacontext = "[OrderedActivityInviteRule.GetRule]"

										layoutpolicy_horizontal = expanding

										onclick = "[ActivityGuestListWindow.ToggleInviteFromRules( OrderedActivityInviteRule.Self )]"
										text = "[ActivityGuestInviteRule.GetName]"
										down = "[ActivityGuestListWindow.IsInviteRuleActive( OrderedActivityInviteRule.Self )]"
									}
								}
							}
						}
					}
				}

				text_multi = {
					name = "too_many_guests_warning"

					text = "ACTIVITY_GUEST_LIST_INVITING_OVER_MAX"
					visible = "[GreaterThan_int32( CharacterSelectionList.NumberOfShownCharacters, ActivityType.GetMaxNumGuests )]"

					align = center|nobaseline
					autoresize = yes
					minimumsize = { 430 -1 }
					maximumsize = { 430 -1 }

					layoutpolicy_horizontal = expanding

					margin = { 8 8 }

					background = {
						using = Background_Area
					}
				}

				expand = {}

				hbox = {
					datamodel = "[ActivityGuestListWindow.AccessSpecialGuests]"
					datacontext = "[ActivityGuestListWindow.AccessPlanner]"
					spacing = 32
					margin_bottom = 8

					item = {
						vbox_special_guest_portrait = {
							blockoverride "button_change_visible"
							{
								visible = "[And( And( ActivitySpecialGuest.GetCharacter.IsValid, ActivityGuestListWindow.IsFromPlanning ), Not( ActivitySpecialGuest.GetType.HasAutoSelectCharacter ) )]"
							}

							blockoverride "portrait"
							{
								portrait_shoulders = {
									visible = "[Character.IsValid]"
									parentanchor = center
								}
							}
							blockoverride "size"
							{
								size = { 150 160 }
							}
							blockoverride "target_glow"
							{
								animation_attention_text = {
									visible = "[ObjectsEqual( ActivityGuestListWindow.GetSelectingSpecialGuest, ActivitySpecialGuest.Self )]"
								}
							}
						}
					}
				}
			}

			vbox = {
				name = "left_side_ongoing_activity"
				datacontext = "[ActivityGuestListWindow.GetHost]"
				visible = "[Not( ActivityGuestListWindow.IsFromPlanning )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					datacontext = "[GetIllustration( 'activity_guest_list' )]"
					layoutpolicy_horizontal = expanding

					margin_top = 4

					background = {
						texture = "[Illustration.GetTexture( Character.GetInvolvedActivity.MakeScope )]"
						alpha = 0.4
						fittype = centercrop

						margin_top = -32

						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 4 }
						margin_right = 4

						text_label_center = {
							layoutpolicy_horizontal = expanding
							text = "ACTIVITY_GUEST_LIST_HOST"
						}
					}

					widget = {
						size = { 440 500 }

						portrait_body_large = {
							parentanchor = bottom|hcenter
							scale = 0.87
							size = { 500 560 }
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 0 16 }

						background ={
							using = Background_Area_Dark
						}

						text_single = {
							text = "[Character.GetUINameNotMeNoTooltip]"
							align = nobaseline
							max_width = 420
						}
					}
				}

				expand = {}

				hbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[ActivityGuestListWindow.GetSpecialGuests]"
					spacing = -32

					item = {
						vbox_special_guest_portrait = {
							blockoverride "button_change_visible"
							{
								visible = no
							}

							blockoverride "title_text"
							{
								# Make sure we use the name appropriate for the guest/host
								text = "[ActivitySpecialGuest.GetType.GetNameIfHost( ActivityGuestListWindow.GetHost )]"
							}

							blockoverride "title_tooltip_properties"
							{
								tooltip = "ACTIVITY_PLANNER_SPECIAL_GUEST_ONGOING_TT"
								using = tooltip_ne
							}

							blockoverride "portrait"
							{
								portrait_shoulders = {
									visible = "[Character.IsValid]"
									parentanchor = center
								}
							}

							blockoverride "size"
							{
								size = { 150 160 }
							}

							blockoverride "selectable_target_portrait_properties"
							{
								enabled = no
							}
						}
					}
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_vertical = expanding

				divider = {
					layoutpolicy_vertical = expanding
				}
			}

			vbox = {
				name = "right_side"
				layoutpolicy_vertical = expanding

				text_label_center = {
					name = "guest_list_instruction_text"
					visible = "[And(ActivityGuestListWindow.IsFromPlanning, Not( ActivityType.IsOpenInvite ))]"
					layoutpolicy_horizontal = expanding

					text = "ACTIVITY_GUEST_LIST_INFO"
					default_format = "#I"
					align = center|nobaseline

					margin = {4 4}
				}

				vbox_character_list = {
					name = "invited_characters"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_properties"
					{
						size = { 660 0 }
					}

					blockoverride "container_implementation" {
						fixedgridbox = {
							name = "characters_grid"
							datamodel = "[CharacterSelectionList.GetList]"
							visible = "[Not(CharacterSelectionList.IsBuildingList)]"
							addcolumn = 630
							addrow = 98

							item = {
								widget_guest_list_item = {}
							}
						}
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 16 16 }

			background = {
				using = Background_Area
			}
			button_primary = {
				text = "CLOSE_LABEL"
				onclick = "[ActivityGuestListWindow.Close]"
			}
		}
	}

	window_character_filter = {
		parentanchor = top|left
		widgetanchor = left
		position = { -20 20 }

		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hostage_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types GuestListWindow
{
	type widget_guest_list_item = widget {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 630 96 }

		hbox = {
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area_With_Header
			}

			vbox = {
				layoutpolicy_vertical = expanding
				margin_top = 2

				portrait_head_small = {}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin_left = 4
				spacing = 4

				hbox = {
					layoutpolicy_horizontal = expanding
					
					margin_top = 4
					margin_right = 8

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Character.GetUINameNoTooltip]"
						using = Font_Size_Medium
						autoresize = no
						fontsize_min = 13
						align = nobaseline
						max_width = 370
					}

					expand = {}

					hbox_skills_grid = {}

				}

				hbox = {
					layoutpolicy_horizontal = expanding

					using = character_age_or_death_text

					blockoverride "list_layout" {}

					expand = {}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						spacing = 4 

						## Dynasty
						widget = {
							size = { 30 30 }

							coa_house_small = {
								datacontext = "[Character.GetHouse]"
								scale = 0.55
								parentanchor = center
							}
						}

						## Traits
						fixedgridbox = {
							name = "traits_grid"
							datamodel = "[CharacterListItem.GetTraits]"
							flipdirection = yes
							size = { 150 60 }
							addcolumn = 30
							addrow = 30
							maxhorizontalslots = 8
							maxverticalslots = 1

							item = {
								container = {
									visible = "[Trait.IsValid]"

									icon_trait = {
										blockoverride "icon_size"
										{
											size = { 30 30 }
										}

										blockoverride "tooltip_placement"
										{
											using = tooltip_se
										}

										blockoverride "glow_radius"
										{
											glow_radius = 3
										}
									}
								}
							}
						}
					}

					expand = {}

					vbox = {
						visible = "[ActivityGuestListWindow.IsFromPlanning]"
						margin = { 8 0 }

						button_standard = {
							name = "select_special_guest"
							size = { 160 30 }
							text = "SELECT"
							onclick = "[CharacterListItem.OnClick( 'select_special_guest' )]"
							visible = "[ActivityGuestListWindow.IsSelectingSpecialGuest]"
							tooltip = "ACTIVITY_GUEST_LIST_SELECT_HONORARY_GUEST"
						}

						hbox = {
							name = "guest_info"
							layoutpolicy_horizontal = expanding
							visible = "[Not( ActivityGuestListWindow.IsSelectingSpecialGuest )]"
							spacing = 4

							expand = {}

							text_single = {
								text = "ACTIVITY_GUEST_LIST_TRAVEL_TIME_INFO"
							}

							hbox = {
								visible = "[GreaterThan_CFixedPoint( ActivityGuestListWindow.GetJoinChance( CharacterListItem.Self ), '(CFixedPoint)0' )]"


								icon = {
									size = { 30 30 }

									texture = "gfx/interface/icons/symbols/icon_check.dds"

									tooltip = "ACTIVITY_GUEST_WILL_ACCEPT"
								}

								warning_icon = {
									visible = "[ActivityGuestListWindow.MayNotArriveInTime( CharacterListItem.Self )]"
									size = { 30 30 }

									tooltip = "ACTIVITY_GUEST_MAY_NOT_ARRIVE"
								}
							}

							icon = {
								visible = "[LessThanOrEqualTo_CFixedPoint( ActivityGuestListWindow.GetJoinChance( CharacterListItem.Self ), '(CFixedPoint)0' )]"
								size = { 30 30 }

								texture = "gfx/interface/icons/symbols/icon_cross.dds"

								tooltip = "ACTIVITY_GUEST_WILL_DECLINE"
							}
						}
					}

					hbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						visible = "[Not( ActivityGuestListWindow.IsFromPlanning )]"

						margin = { 12 0 }

						expand = {}

						text_single = {
							text = "[Character.GetActivityStateText( 'verb' )]"
						}
					}
				}

				expand = {}
			}
		}
	}
}
