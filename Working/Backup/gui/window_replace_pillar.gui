######################################################
################## CULTURE REPLACE PILLAR #############
######################################################

window = {
	name = "replace_pillar_window"
	parentanchor = center
	layer = windows_layer
	layoutpolicy_vertical = expanding

	datacontext = "[GetPlayer.GetCulture]"

	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		using = Animation_FadeIn_Quick
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	vbox = {
		set_parent_size_to_minimum = yes
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "REPLACE_PILLAR_WINDOW_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[ReplacePillarWindow.Close]"
			}
		}

		vbox = {
			name = "pillar_selection"
			margin = { 0 8 }
			spacing = 6

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			scrollbox = {
				size = { 0 500 }

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					flowcontainer = {
						datamodel = "[ReplacePillarWindow.GetPossiblePillars]"
						direction = vertical
						spacing = 15

						layoutpolicy_vertical = growing

						item = {
							widget_pillar_item = {
							}
						}
					}
				}
			}

			vbox = {
				name = "cost"
				datacontext = "[ReplacePillarWindow.GetSelectedPillar]"
				visible = "[CulturePillar.IsValid]"
				minimumsize = { 0 28 }
				spacing = 10
				tooltip = "REPLACE_PILLAR_COST_TOOLTIP"

				text_single = {
					layoutpolicy_horizontal = expanding
					align = center|nobaseline
					text = "REPLACE_PILLAR_TOTAL_COST"
					default_format = "#high"
					using = Font_Size_Medium

					background = {
						visible = "[Not( ReplacePillarWindow.CanPayCost )]"
						margin = { 5 0 }
						using = Status_Bad
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 44 8 }
				spacing = 20

				button_standard= {
					name = "decline_button"
					text = "CANCEL_BUTTON"
					onclick = [ReplacePillarWindow.Close]
					shortcut = "close_window"
				}

				button_primary = {
					name = "done"
					layoutpolicy_horizontal = expanding
					onclick = "[ReplacePillarWindow.ReplacePillar]"
					onclick = "[ReplacePillarWindow.Close]"
					enabled = "[ReplacePillarWindow.CanReplacePillar]"
					text = "REPLACE_PILLAR_EXECUTE_LABEL"

					tooltip = "REPLACE_PILLAR_EXECUTE_TOOLTIP"

					warning_icon = {
						visible = "[Culture.IsReforming]"
						parentanchor = vcenter|right
						size = { 25 25 }
						position = { -3 0 }
						alwaystransparent = yes
					}
				}
			}
		}
	}
}

types CultureReplacePillarTypes
{
	type widget_pillar_item = widget {
		size = {  300 90  }

		tooltipwidget = {
			using = culture_pillar_tooltip

			blockoverride "above_description_text" {
				text = "[ReplacePillarWindow.GetPickPillarBlockers( CulturePillar.Self )]"
			}
		}

		vbox = {
			button_standard = {
				size = {  300 60  }
				onclick = "[ReplacePillarWindow.SelectPillar( CulturePillar.Self )]"
				enabled = "[ReplacePillarWindow.CanPickPillar( CulturePillar.Self )]"

				highlight_icon = {
					name = "ethos_icon"
					visible = "[ReplacePillarWindow.IsEthos]"
					block "icon_size" {
						size = { 300 60 }
					}
					texture = "[CulturePillar.GetIcon]"
					using = Mask_Rough_Edges
				}

				icon = {
					name = "selection_glow"
					visible = "[ObjectsEqual( ReplacePillarWindow.GetSelectedPillar, CulturePillar.Self )]"
					parentanchor = center
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 14 12 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}


				hbox = {
					margin_top = 10
					margin_right = 10
					margin_bottom = 10
					margin_left = 10

					expand = {}

					icon_doctrine = {
						name = "doctrine_icon"
						visible = "[ReplacePillarWindow.IsMartial]"
						size = { 44 44 }
						texture = "[CulturePillar.GetIcon]"
					}

					spacer = {
						size = { 15 44 }
					}

					text_label_center = {
						name = "name"
						visible = "[Not( ReplacePillarWindow.IsMartial ) ]"
						text = "[CulturePillar.GetNameNoTooltip]"
						maximumsize = { 180 44 }
						fontsize_min = 12
						multiline = yes
						elide = right
					
						using = Font_Size_Medium
					
						block "default_format" {
							default_format = "#high"
						}
					}

					text_label_center = {
						name = "name2"
						visible = "[ReplacePillarWindow.IsMartial]"
						text = "[CulturePillar.GetNameNoTooltip]"
						maximumsize = { 180 44 }
						fontsize_min = 12
						multiline = yes
						elide = right

						using = Font_Size_Medium
					}

					expand = {}

				}
			}
			hbox = {
				spacing = 20
				text_label_center = {
					name = "cost"
					text = "[ReplacePillarWindow.GetPillarCostString( CulturePillar.Self )]"
					maximumsize = { 130 44 }
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right

					using = Font_Size_Small
					tooltip = "[ReplacePillarWindow.GetPillarCostBreakdown( CulturePillar.Self )]"
					using = tooltip_se

					background = {
						visible = "[Not( ReplacePillarWindow.CanAffordPillar( CulturePillar.Self ) )]"
						margin_bottom = -1
						margin_top = -3
						margin_right = 15
						using = Status_Bad
					}
				}

				text_label_center = {
					name = "time"
					text = "[Culture.GetTotalReformTimeForPillar]"
					maximumsize = { 130 44 }
					fontsize_min = 12
					multiline = yes
					align = center
					elide = right

					using = Font_Size_Small
					tooltip = "ESTABLISHMENT_TIME_TOOLTIP_PILLAR"
					using = tooltip_se
				}
			}
		}
	}
}
