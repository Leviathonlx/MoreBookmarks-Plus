window = {
	name = "load_ruler_window"
	size = { 100% 100% }
	movable = no
	layer = confirmation
	filter_mouse = all

	background = {
		texture = "gfx/interface/colors/black.dds"
		alpha = 0.6
	}

	button_normal = {
		size = { 100% 100% }
		onclick = "[RulerDesignerLoadWindow.Cancel]"
	}

	widget = {
		size = { 520 880 }
		position = { -300 0 }
		parentanchor = center
		alwaystransparent = no

		using = Window_Background
		using = Window_Decoration_Frontend_Spike

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			spacer = {
				size = { 38 860 }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				spacer = {
					size = { 444 20 }
				}

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text"
					{
						text = "RULER_DESIGNER_LOAD_WINDOW_TITLE"
					}

					blockoverride "button_close" {
						visible = no
					}
				}

				scrollbox = {
					layoutpolicy_horizontal = growing
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[RulerDesignerLoadWindow.GetSavedRulers]"
							spacing = 3

							item = {
								button_saved_rulers = {
									blockoverride "down_state" {
										down = "[RulerDesignerLoadWindow.IsSelectedItem(SaveRulerItem.Self)]"
									}
									size = { 410 120 }
								}
							}
						}
					}
				}

				spacer = {
					size = { 444 15 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_standard_back = {
						shortcut = "close_window"

						onclick = "[RulerDesignerLoadWindow.Cancel]"
					}
				}

				spacer = {
					size = { 414 30 }
				}
			}

			spacer = {
				size = { 38 760 }
			}
		}
	}

	widget ={
		name = "character_info"
		size = { 620 820}
		position = { 250 0 }
		parentanchor = center
		datacontext = "[RulerDesignerLoadWindow.GetSelectedRuler]"
		visible = "[RulerDesignerLoadWindow.IsRulerSelected]"

		background = {
			using = Background_Area_Light
			using =Mask_Rough_Edges
		}

		background = {
			name = "background_loadgame"
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
				spriteType = Corneredstretched
				blend_mode = alphamultiply
				alpha = 0.7
				mirror = horizontal
			}
		}

		vbox = {
			hbox = {
				name = "header"
				margin = { 20 6}
				layoutpolicy_horizontal = expanding

				background = {
					texture = "gfx/interface/colors/black.dds"
					using = Mask_Rough_Edges
					margin_bottom = 40

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
						mirror = vertical
						blend_mode = alphamultiply
					}
				}

				background = {
					margin = {5 5}
					using = Background_Area_Light
					using = Mask_Rough_Edges
				}

				background = {
					using = Background_Area_Dark
					using = Mask_Rough_Edges
					alpha = 0.20
					margin = {5 5}

					modify_texture = {
						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						spriteType = Corneredtiled
						blend_mode = alphamultiply
						alpha = 1
						texture_density = 0.8
					}
				}

				text_single = {
					name = "filename"
					text = "[SaveRulerItem.GetFilename]"
					max_width = 320
					using = Font_Type_Flavor
					using = Font_Size_Big
					align = nobaseline
				}

				expand = {}

				hbox = {
					spacing = 5

					text_single = {
						text = "[SaveRulerItem.GetUsedPoints]"
						visible = "[LessThanOrEqualTo_int32( SaveRulerItem.GetUsedPoints, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
						default_format = "#P;bold"
						align = nobaseline
					}

					text_single = {
						text = "[SaveRulerItem.GetUsedPoints]"
						visible = "[GreaterThan_int32( SaveRulerItem.GetUsedPoints, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
						default_format = "#N;bold"
						align = nobaseline
					}

					text_single = {
						name = "customization_points"
						text = "RULER_DESIGNER_SAVE_LOAD_USED_POINTS_LABEL"
						align = nobaseline
					}
				}
			}

			vbox = {
				layoutpolicy_vertical = expanding
				hbox = {
					layoutpolicy_horizontal = expanding
					margin = {20 10}
					background = {
						texture = "gfx/interface/illustrations/event_scenes_frontend/temple.dds"
						fittype = centercrop
						using = Mask_Rough_Edges
						margin_right = -10

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
							blend_mode = alphamultiply
							alpha = 0.8
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}
					}

					background = {
						texture = "gfx/interface/colors/black.dds"
						alpha = 0.8
						margin_right = -10
						using = Mask_Rough_Edges

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
							blend_mode = alphamultiply
							alpha = 0.8
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}
					}

					widget = {
						size = { 250 470}

						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							spacing = 10

							hbox = {
								margin_top = 5
								name = "age"
								spacing = 5
								layoutpolicy_horizontal = expanding
								text_single = {
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_AGE"
									align = nobaseline
								}
								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[SaveRulerItem.GetAge]"
									align = nobaseline
									default_format = "#high"
								}

								expand = {}
							}

							hbox = {
								name = "sex"
								spacing = 5
								layoutpolicy_horizontal = expanding

								text_single = {
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_SEX"
									align = nobaseline
								}

								icon = {
									size = { 30 30 }
									visible = "[Not( SaveRulerItem.IsFemale )]"
									texture = "gfx/interface/icons/flat_icons/male.dds"
									using = Master_Button_Modify_Texture
								}

								icon = {
									size = { 30 30 }
									visible = "[SaveRulerItem.IsFemale]"
									texture = "gfx/interface/icons/flat_icons/female.dds"
									using = Master_Button_Modify_Texture
								}

								expand = {}
							}

							hbox = {
								name = "sexuality"
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin_bottom= 5
								text_single = {
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_SEXUALITY"
									align = nobaseline
								}
								widget = {
									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/randomize.dds"
										visible = "[SaveRulerItem.HasSexuality( 'none' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_RANDOM
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/heterosexual.dds"
										visible = "[SaveRulerItem.HasSexuality( 'heterosexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_HETEROSEXUAL
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/homosexual_female.dds"
										visible = "[And( SaveRulerItem.IsFemale, SaveRulerItem.HasSexuality( 'homosexual' ) )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/homosexual_female.dds"
										visible = "[And( Not( SaveRulerItem.IsFemale ), SaveRulerItem.HasSexuality( 'homosexual' ) )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/bisexual_female.dds"
										visible = "[And( SaveRulerItem.IsFemale, SaveRulerItem.HasSexuality( 'bisexual' ) )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_BISEXUAL
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/bisexual_male.dds"
										visible = "[And( Not( SaveRulerItem.IsFemale ), SaveRulerItem.HasSexuality( 'bisexual' ) )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_BISEXUAL
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/flat_icons/asexual.dds"
										visible = "[SaveRulerItem.HasSexuality( 'asexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_ASEXUAL
										using = tooltip_se
										using = Master_Button_Modify_Texture
									}
								}
								expand = {}
							}

							vbox = {
								name = "faith"
								datacontext = "[SaveRulerItem.GetFaith]"
								layoutpolicy_horizontal = expanding
								spacing = 5

								text_label_left = {
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_FAITH"
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									tooltipwidget = {
										faith_tooltip_core_tenents = {}
									}

									icon = {
										name = "item_icon"
										size = { 50 50 }
										texture = "[Faith.GetIcon]"
										using = tooltip_se
									}

									vbox = {
										margin_left = 5

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[Faith.GetReligion.GetNameNoTooltip]"
												default_format = "#high;bold"
												margin_right = 5
												margin_bottom = 5
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[Faith.GetNameNoTooltip]"
												default_format = "#high"
												margin_bottom = 5
											}
										}
									}

									expand = {}
								}

								expand = {}
							}

							vbox = {
								name = "culture"
								datacontext = "[SaveRulerItem.GetCulture]"
								layoutpolicy_horizontal = expanding

								text_label_left ={
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_CULTURE"
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5
									text_single ={
										text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_CULTURE_DESC"
										default_format = "#high"
									}

									expand = {}
								}
							}


							vbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 10
								spacing = 5

								text_label_left ={
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_FAMILY"
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
								}

								text_single ={
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_FAMILY_DESC"
									layoutpolicy_horizontal = expanding
									default_format = "#high"
								}
							}

							vbox = {
								name = "skills"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_top = 10
								spacing = 5

								text_label_left = {
									layoutpolicy_horizontal = expanding
									text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_SKILLS"
									using = Font_Size_Medium
								}

								fixedgridbox = {
									datamodel = "[SaveRulerItem.GetGuiSkills]"
									datamodel_wrap = 2
									addrow = 35
									addcolumn = 70
									layoutpolicy_horizontal = expanding
									item = {
										widget = {
											name = "skill_item"
											size = { 70 35 }

											background = {
												using = Background_Area
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												icon = {
													name = "skill_icon"
													texture = "gfx/interface/icons/icon_skills.dds"
													size = { 32 32 }
													framesize = { 60 60 }
													frame = "[SaveRulerSkillGui.GetFrame]"
												}

												text_single = {
													name = "skill_value"
													text = "[SaveRulerSkillGui.GetValue]"

													datacontext = "[SaveRulerSkillGui.GetModifiedValueBreakdown]"

													tooltip_visible = "[ValueBreakdown.HasTooltip]"
													tooltipwidget = {
														widget_value_breakdown_tooltip = {}
													}

													using = Font_Size_Big
													default_format = "#high"
													align = nobaseline|center
													min_width = 25
												}
											}
										}
									}
								}
							}

							expand = {}
						}
					}

					vbox = {
						name = "character portrait"
						layoutpolicy_vertical = expanding

						portrait_button = {
							name = "character"
							using = portrait_base
							size = { 300 470 }

							portrait_texture = "[SaveRulerItem.GetTexture('environment_body', 'camera_body', PdxGetWidgetScreenSize(PdxGuiWidget.Self) )]"
							mask = "gfx/portraits/portrait_mask_body.dds"

							blockoverride "grayscale" {}
							blockoverride "portrait_button_template_onmouseenter" {}
							blockoverride "portrait_button_template_onmouseleave" {}
							blockoverride "portrait_button_template_onclick" {}
							blockoverride "portrait_button_template_onrightclick" {}
							blockoverride "portrait_button_template_tooltip" {}
							blockoverride "portrait_transformation"
							{
								portrait_scale = { -1 1 }
								portrait_offset = { 1 0 }
							}
							alwaystransparent = yes
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 20 5}
					margin_bottom = 20
					name = "traits"
					spacing = 5

					text_label_left= {
						text = "RULER_DESIGNER_LOAD_WINDOW_DETAILS_TRAITS"
						layoutpolicy_horizontal = expanding
						using = Font_Size_Medium
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						visible = "[LessThan_int32(GetDataModelSize(SaveRulerItem.GetGuiTraits), '(int32)8')]"

						dynamicgridbox = {
							datamodel = "[SaveRulerItem.GetGuiTraits]"
							datamodel_wrap = 10
							flipdirection = yes
							layoutpolicy_horizontal = expanding
							item = {
								icon_trait = {
									blockoverride "icon_size"
									{
										size = { 70 70 }
									}
									datacontext = "[SaveRulerTraitGui.GetTrait]"
									datacontext = "[GetNullCharacter]"
									blockoverride "faith_context"
									{
										datacontext = "[SaveRulerItem.GetFaith]"
									}
								}
							}
						}
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						datamodel = "[SaveRulerItem.GetGuiTraits]"
						visible = "[GreaterThan_int32(GetDataModelSize(SaveRulerItem.GetGuiTraits), '(int32)7')]"
						blockoverride "scrollbox_content"
						{
							dynamicgridbox = {
								datamodel = "[SaveRulerItem.GetGuiTraits]"
								datamodel_wrap = 10
								flipdirection = yes
								layoutpolicy_horizontal = expanding
								item = {
									icon_trait = {

										datacontext = "[SaveRulerTraitGui.GetTrait]"
										datacontext = "[GetNullCharacter]"
										blockoverride "faith_context"
										{
											datacontext = "[SaveRulerItem.GetFaith]"
										}
									}
								}
							}
						}
					}

					expand = {}
				}
			}

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 20 12}

				background = {
					texture = "gfx/interface/colors/black.dds"
					alpha = 0.7
					margin_top = 80

					modify_texture ={
						texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					margin = {5 5}
					using = Background_Area_Light
					using = Mask_Rough_Edges
				}

				background = {
					using = Background_Area_Dark
					using = Mask_Rough_Edges
					alpha = 0.15
					margin = {5 5}
					modify_texture = {
						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						spriteType = Corneredtiled
						blend_mode = alphamultiply
						alpha = 1
						texture_density = 0.8
					}
				}

				button_standard = {
					name = "delete_button"
					text = "RULER_DESIGNER_LOAD_WINDOW_DELETE_FILE"

					onclick = "[RulerDesignerLoadWindow.Delete]"


					button_icon = {
						name = "button_close"
						texture = "gfx/interface/icons/flat_icons/window_close.dds"
						parentanchor = left|vcenter
						position = { 5 0 }
						size = { 25 25 }
						alwaystransparent = yes
					}
				}

				expand = {}

				button_primary = {
					name = "load_button"
					text = "LOAD"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"

					onclick = "[RulerDesignerLoadWindow.Load]"
				}
			}
		}
	}
}
