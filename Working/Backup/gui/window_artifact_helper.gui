types ArtifactHelperTypes
{
type artifact_test_helper_window = window {
	size = { 800 800 }
	filter_mouse = all
	layer = middle
	using = Window_Movable
	using = Window_Background_Sidebar

	vbox = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Selected type:  "
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[ArtifactHelperWindow.HasSelectedType]"
						raw_text = "[ArtifactHelperWindow.GetSelectedType.GetKey]"
					}

					expand = {}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Selected visual type:  "
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[ArtifactHelperWindow.HasSelectedVisualType]"
						raw_text = "[ArtifactHelperWindow.GetSelectedVisualType.GetKey]"
					}

					expand = {}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						raw_text = "Selected asset:  "
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						visible = "[ArtifactHelperWindow.HasSelectedAsset]"
						raw_text = "[ArtifactHelperWindow.GetSelectedAsset]"
					}

					expand = {}
				}
			}

			vbox = {
				layoutpolicy_vertical = expanding

				icon = {
					visible = "[Not( ArtifactHelperWindow.CanCreate )]"
					size = { 30 30 }
					texture = "gfx/interface/icons/symbols/icon_cross.dds"
					raw_tooltip = "Cant create artifact - sele from all 3 columns: type, visual, asset"
				}

				expand = {}
			}

			vbox = {
				button_standard = {
					raw_text = "Create"
					onclick = "[ArtifactHelperWindow.CreateArtifact]"
					enabled = "[ArtifactHelperWindow.CanCreate]"
					raw_tooltip = "Create new artifact with selected properties. All options must be selected"
				}

				button_standard = {
					raw_text = "Force Update"
					onclick = "[ArtifactHelperWindow.UpdateEntities]"
					raw_tooltip = "Refresh list of entities"
				}

				editbox_search_field = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 200 25 }
					margin_left = 15
					margin_right = 20
					margin_bottom = 6

					blockoverride "editbox_properties" 
					{
						onreturnpressed = "[ArtifactHelperWindow.OnFilterUpdate]"
						ontextedited = "[ArtifactHelperWindow.OnFilterUpdate]"
					}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			button_tab = {
				layoutpolicy_horizontal = expanding
				raw_text = "All"
				raw_tooltip = "Show all entities in the game"
				onclick = "[ArtifactHelperWindow.SetEntitiesCategory( 'all' )]"
				down = "[ArtifactHelperWindow.IsEntitiesCategory( 'all' )]"
			}

			button_tab = {
				layoutpolicy_horizontal = expanding
				raw_text = "Artifacts"
				raw_tooltip = "Show all entities in the artifacts folder"
				onclick = "[ArtifactHelperWindow.SetEntitiesCategory( 'artifacts' )]"
				down = "[ArtifactHelperWindow.IsEntitiesCategory( 'artifacts' )]"
			}

			button_tab = {
				layoutpolicy_horizontal = expanding
				raw_text = "Visual Type"
				raw_tooltip = "Show entities available for currently selected visual type"
				onclick = "[ArtifactHelperWindow.SetEntitiesCategory( 'visual_type' )]"
				down = "[ArtifactHelperWindow.IsEntitiesCategory( 'visual_type' )]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				maximumsize = { 220 -1 }

				text_single = {
					raw_text = "Type and slot"
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[ArtifactHelperWindow.GetArtifactTypes]"

							item = {
								button_standard = {
									size = { 200 25 }
									text = "[ArtifactType.GetKey]"
									align = left
									tooltip = "[ArtifactType.GetKey]"
									onclick = "[ArtifactHelperWindow.OnTypeSelect( ArtifactType.Self )]"
									down = "[ArtifactHelperWindow.IsTypeSelected( ArtifactType.Self )]"
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				maximumsize = { 220 -1 }

				text_single = {
					raw_text = "Visual type"
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						vbox = {
							layoutpolicy_horizontal = expanding
							datamodel = "[ArtifactHelperWindow.GetArtifactVisualTypes]"

							item = {
								button_standard = {
									size = { 200 25 }
									text = "[ArtifactVisualType.GetKey]"
									align = left
									tooltip = "[ArtifactVisualType.GetKey]"
									onclick = "[ArtifactHelperWindow.OnVisualTypeSelect( ArtifactVisualType.Self )]"
									down = "[ArtifactHelperWindow.IsVisualTypeSelected( ArtifactVisualType.Self )]"
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				text_single = {
					raw_text = "Entity"
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content" {
						fixedgridbox = {
							addcolumn = 350
							addrow = 25
							datamodel_reuse_widgets = yes
							datamodel = "[ArtifactHelperWindow.GetEntitiesList]"

							item = {
								button_standard = {
									size = { 350 25 }
									text = "[CString.GetString]"
									align = left
									tooltip = "[CString.GetString]"
									onclick = "[ArtifactHelperWindow.OnAssetSelect( CString.Self )]"
									down = "[ArtifactHelperWindow.IsAssetSelected( CString.Self )]"
								}
							}
						}
					}
				}
			}
		}
	}
}
}
