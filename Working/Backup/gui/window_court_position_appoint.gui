
#############################################################
################# APPOINT COURT POSITONS ####################
#############################################################


window = {
	name = "appoint_court_position_view"
	widgetid = "appoint_court_position_view"
	parentanchor = "top|right"
	position = { -610 80 }
	size = { 680 920 }
	movable = no
	layer = middle
	allow_outside = yes

	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		using = Animation_FadeIn_Quick
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	vbox = {
		using = Window_Margins
		layoutpolicy_vertical = expanding
		datacontext = "[AppointCourtPositionView.GetCourtOwner]"

		#Header for appointing
		header_pattern = {
			layoutpolicy_horizontal = expanding
			visible = "[AppointCourtPositionView.IsAppointingNewPosition]"

			blockoverride "header_text"
			{
				text = APPOINT_COURT_POSITION_VIEW_select_character_header
			}

			blockoverride "button_close"
			{
				onclick = "[AppointCourtPositionView.Close]"
			}
		}

		#Header for replacing
		header_pattern = {
			layoutpolicy_horizontal = expanding
			visible = "[AppointCourtPositionView.IsReplacingPosition]"

			blockoverride "header_text"
			{
				text = APPOINT_COURT_POSITION_VIEW_replace_character_header
			}

			blockoverride "button_close"
			{
				onclick = "[AppointCourtPositionView.Close]"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = fixed

			vbox = {
				datacontext = "[AppointCourtPositionView.GetCourtPositionType]"
				visible = "[AppointCourtPositionView.IsAppointingNewPosition]"

				layoutpolicy_horizontal = expanding
				spacing = 5
				margin = { 20 2 }
				margin_bottom = 8

				background = {
					using = Background_Area_With_Header_Dark
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						default_format = "#high"
						text = "[CourtPositionType.GetNameNoTooltip]"
					}

					text_single = {
						align = right
						text = "APPOINT_COURT_POSITION_VIEW_salary"
						tooltip = "[CourtPositionType.GetSalaryBreakdownFor( Character.Self )]"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin_top = 5

					text_multi = {
						default_format = "#F"
						autoresize = yes
						max_width = 550
						min_width = 550
						text = "[CourtPositionType.GetDescription]"
					}

					expand = {}
				}
			}

			hbox = {
				datacontext = "[AppointCourtPositionView.GetCourtPositionToReplace]"
				datacontext = "[CourtPosition.GetEmployee]"
				visible = "[AppointCourtPositionView.IsReplacingPosition]"
				layoutpolicy_horizontal = expanding
				spacing = 5
				margin = { 20 10 }

				background = {
					using = Background_Area_Dark
					alpha = 0.5
				}

				portrait_head = { }

				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "APPOINT_COURT_POSITION_VIEW_REPLACE_CURRENTLY_APPOINTED"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Character.GetNameNoTooltip]"
						default_format = "#high"
					}

					text_single = {
						name = "character_relation"
						layoutpolicy_horizontal = expanding
						text = "[Character.GetRelationToString( GetPlayer )]"
						tooltip = "EXTENDED_RELATIONS_TOOLTIP"
						default_format = "#low"
						autoresize = no
						visible = "[Character.HasRelationTo( GetPlayer )]"
					}


					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 5

						vbox = {
							layoutpolicy_vertical = expanding

							expand = {}

							button_standard = {
								size = { 130 33 }

								text = "APPOINT_COURT_POSITION_VIEW_REPLACE_FIRE_CURRENT_HOLDER"
								onclick = "[AppointCourtPositionView.RevokeSelectedPosition]"
								tooltip = COURT_POSITION_REVOKE
							}
						}

						expand = {}

						caravan_master_travel_info = {
							margin_top = 10
							visible = "[AppointCourtPositionView.GetCourtPositionType.IsTravelRelated]"
						}

						vbox = {
							minimumsize = { 200 0 }

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "COURT_POSITION_aptitude_description_position"
								max_width = 200
								align = right
								
								tooltipwidget = {
									court_position_aptitude_breakdown_tooltip = {
										datacontext = "[CourtPosition.GetAptitudeTooltip]"

										blockoverride "header_text" {
											text = COURT_POSITION_aptitude_description_position
										}

										blockoverride "modifier_list" {
											text = "[CourtPosition.GetEmployerBonuses]"
										}
									}
								}
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "APPOINT_COURT_POSITION_VIEW_REPLACE_CURRENT_SALARY"
								tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
								max_width = 200
								align = right
							}
						}
					}
				}
			}
		}

		#Character List
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			### fades in correctly but does something wierd on hide, investigate ###
			#using = Animation_ShowHide_Quick

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[AppointCourtPositionView.GetCourt]"

				blockoverride "sort_buttons"
				{
					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding

						blockoverride "sort_dropdown" {
							dropdown_sort_characterlist = {
								name = "eligible_courtiers_sort_options"
							}
						}

						blockoverride "skill_sort_buttons" {}
					}
				}

				blockoverride "special_character" {
					hbox = {
						visible = "[AppointCourtPositionView.IsReplacingPosition]"
					}

				}

				blockoverride "container_implementation" {
					vbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						item = {
							court_position_candidate_list_item = {
								datacontext = "[CharacterListItem.GetCharacter]"

								block "item_size" {
									size = { 420 110 }
									layoutpolicy_horizontal = expanding
								}
							}
						}
					}
				}
			}
		}

		hbox_liege_modifiers = {
			datacontext = "[AppointCourtPositionView.GetCourtPositionType]"
			visible = "[AppointCourtPositionView.IsAppointingNewPosition]"
		}

		hbox_liege_modifiers = {
			datacontext = "[AppointCourtPositionView.GetCourtPositionToReplace.GetPositionType]"
			visible = "[AppointCourtPositionView.IsReplacingPosition]"
		}

		hbox = {
			spacing = 5
			margin = { 0 10 }

			warning_icon = {
				size = { 32 32 }
				visible = "[And(AppointCourtPositionView.HasSelectedCharacter, AppointCourtPositionView.IsReplacingPosition)]"
				tooltip = APPOINT_COURT_POSITION_VIEW_REPLACE_CONSEQUENCE_FOR_REVOKE_TOOLTIP
			}

			alert_icon = {
				size = { 32 32 }
				visible = "[And(AppointCourtPositionView.HasSelectedCharacter, AppointCourtPositionView.IsAppointingNewPosition )]"
				tooltip = APPOINT_COURT_POSITION_VIEW_REVOKE_CONSEQUENCE_FOR_APPOINTMENT_TOOLTIP
			}

			button_primary = {
				onclick = "[AppointCourtPositionView.AppointSelectedCourtier]"
				enabled = "[AppointCourtPositionView.HasSelectedCharacter]"
				text = APPOINT_COURT_POSITION_VIEW_appoint_button
			}
		}
	}

	window_character_filter = {
		name = "appoint_court_character_filter_window"
		datacontext = "[AppointCourtPositionView.GetCourt]"

		blockoverride "editbox_properties"
		{
			name = "eligible_courtiers_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hostage_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types AppointCourtPositionTypes
{

	type hbox_liege_modifiers = vbox {
		layoutpolicy_horizontal = expanding
		margin = { 20 0 }
		margin_bottom = 15
		spacing = 10

		background = {
			using = Background_Area
		}

		vbox = {
			visible = "[Not(AppointCourtPositionView.HasSelectedCharacter)]"
			spacing = 5

			text_single = {
				text = APPOINT_COURT_POSITION_VIEW_NO_SELECTED_COURTIER
				using = Font_Size_Medium
				default_format = "#I"
				margin = { 5 5 }
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				margin = { 10 10 }
				margin_top = 5

				background = {
					using = Background_Area_Light
					margin_top = 2
					alpha = 0.6
				}

				background = {
					using = Background_Frame
					margin_top = 2
					margin_bottom = 2
					margin_right = -3
				}

				text_multi = {
					layoutpolicy_vertical = expanding
					autoresize = yes
					margin = { 8 4 }
					min_width = 440
					max_width = 440
					text = "[CourtPositionType.GetEmployerModifierDescription]"
				}

				text_multi = {
					visible = "[CourtPositionType.HasLiegeCourtModifiers]"
					layoutpolicy_vertical = expanding
					autoresize = yes
					margin = { 8 4 }
					min_width = 440
					max_width = 440
					text = "COURT_POSITION_TYPE_EMPLOYER_COURT_EFFECTS"
				}
			}
		}

		hbox = {
			datacontext = "[AppointCourtPositionView.GetSelectedCharacter]"
			visible = "[AppointCourtPositionView.HasSelectedCharacter]"
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_top = 10

			vbox = {
				margin = { 10 10 }
				margin_top = 5

				background = {
					using = Background_Area_Light
					margin_top = 2
					alpha = 0.6
				}

				background = {
					using = Background_Frame
					margin_top = 2
					margin_bottom = 2
					margin_right = -3
				}

				text_single = {
					layoutpolicy_vertical = expanding
					min_width = 440
					max_width = 440
					margin = { 8 4 }
					align = right
					visible = "[Not(EqualTo_int32(AppointCourtPositionView.GetOpinionBonusForSelectedEmployee, '(int32)0'))]"
					text = APPOINT_COURT_POSITION_VIEW_OPINION_BONUS
				}

				text_single = {
					name = "aptitude"
					align = left|nobaseline
					min_width = 440
					max_width = 440

					background = {
						using = Background_Area

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
							blend_mode = alphamultiply
						}
					}
					margin = {8 8}

					text = "APPOINT_COURT_POSITION_VIEW_APTITUDE"

					tooltipwidget = {
						court_position_aptitude_breakdown_tooltip = {
							datacontext = "[AppointCourtPositionView.GetAptitudeTooltip(Character.Self)]"

							blockoverride "header_text" {
								text = APPOINT_COURT_POSITION_VIEW_APTITUDE
							}

							blockoverride "modifier_list" {

							}
						}
					}
				}

				text_single = {
					datacontext = "[AppointCourtPositionView.GetSelectedCharacter]"
					visible = "[CourtPositionType.IsTravelRelated]"
					layoutpolicy_vertical = expanding
					autoresize = yes
					margin = { 8 4 }
					min_width = 440
					max_width = 440
					text = "APPOINT_COURT_POSITION_VIEW_salary_per_travel"
					tooltip = "[Character.GetTravelLeaderCostBreakdown]"
				}

				text_multi = {
					layoutpolicy_vertical = expanding
					autoresize = yes
					margin = { 8 4 }
					min_width = 440
					max_width = 440
					text = "[AppointCourtPositionView.GetLiegeModifierForSelectedEmployee]"
				}

				text_multi = {
					layoutpolicy_vertical = expanding
					visible = "[CourtPositionType.HasLiegeCourtModifiers]"
					align = left
					autoresize = yes
					margin = { 8 4 }
					min_width = 440
					max_width = 440
					text = COURT_POSITION_APPOINT_EMPLOYER_COURT_EFFECTS
				}
			}
		}
	}

	type court_position_candidate_list_item = widget {
		size = { 10 110 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}

		hbox = {
			margin = { 0 5 }
			spacing = 15

			portrait_head_small = {
				blockoverride "portrait_button" {
					text_single = {
						name = "tutorial_highlight_character_view_opinion"
						visible = "[InDebugMode]"
						max_width = 100
						margin = { 3 0 }
						using = tooltip_es
						default_format = "#D"
						raw_text = "AI Score: [AppointCourtPositionView.GetAICandidateScoreFor(Character.Self)|0]"
					}
				}
			}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				onclick = "[CharacterListItem.OnClick('character')]"
				enabled = "[CharacterListItem.IsSelectable]"

				framesize = { 252 80 }
				spriteType = Corneredtiled
				spriteborder = { 20 20 }

				down = "[AppointCourtPositionView.IsItemSelected(CharacterListItem.Self)]"

				background = {
					texture = "gfx/interface/buttons/button_entry_characterlist.dds"
					spriteType = Corneredtiled
					margin = { 10 0 }
					using = Color_Orange
					alpha = 0
					using = Mask_Rough_Edges
				}

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				# Selected icon
				icon = {
					visible = "[AppointCourtPositionView.IsItemSelected(CharacterListItem.Self)]"
					parentanchor = left|vcenter
					position = { -20 0 }
					size = { 20 20 }
					texture = "gfx/interface/buttons/button_entry_characterlist_arrow.dds"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						tooltipwidget = {
							court_position_aptitude_breakdown_tooltip = {
								datacontext = "[AppointCourtPositionView.GetAptitudeTooltip(Character.Self)]"

								blockoverride "header_text" {
									text = APPOINT_COURT_POSITION_VIEW_APTITUDE
								}

								blockoverride "modifier_list" {
									text = "[AppointCourtPositionView.GetLiegeModifierForPositionType(Character.Self)]"
								}
							}
						}

						# Name, Relation, Age and Aptitude
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name, Relation, Age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								# Name
								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
									autoresize = no
									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								# Relation and Age
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
											default_format = "#low"
											autoresize = no
											align = nobaseline
											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
								
								# Personality
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text_single = {
										name = "character_relation"
										layoutpolicy_horizontal = expanding
										raw_text = "[Character.GetAIPersonality]"
										default_format = "#low"
										autoresize = no
										align = nobaseline
										visible = "[Character.HasRelationTo( GetPlayer )]"
										alwaystransparent = yes
									}
								}
							}

							# Aptitude
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10
								margin_bottom = 7

								text_single = {
									text = APPOINT_COURT_POSITION_VIEW_APTITUDE
								}

								expand = {}

								caravan_master_travel_info = {
									visible = "[AppointCourtPositionView.GetCourtPositionType.IsTravelRelated]"
								}

							}

							expand = {}
						}

						expand = {}

						# SKills and Traits
						vbox = {
							minimumsize = { 200 0 }
							datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_bottom = 5
							margin_right = 5

							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								datamodel = "[CharacterListItem.GetSkillItems]"
								margin_right = 5

								item = {
									widget_skill_item_no_icon = {}
								}
							}

							expand = {}

							# Traits
							fixedgridbox = {
								name = "traits_grid"
								datamodel = "[CharacterListItem.GetTraits]"
								flipdirection = yes
								addcolumn = 30
								addrow = 30
								datamodel_wrap = 7
								maxverticalslots = 2

								item = {
									container = {
										visible = "[Trait.IsValid]"

										icon_trait = {
											blockoverride "icon_size"
											{
												size = { 30 30 }
											}

											blockoverride "tooltip_placement"
											{
												using = tooltip_se
											}

											blockoverride "glow_radius"
											{
												glow_radius = 3
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

types CourtPosition
{
	type caravan_master_travel_info = hbox {
		spacing = 8

		hbox = {
			spacing = 3

			tooltip = "[Character.GetTravelSpeedAptitudeBreakdown]"

			icon = {
				size = { 25 25 }
				texture = "gfx/interface/icons/travel/travel_speed_icon.dds"
			}

			text_single = {
				name = "value"
				margin_bottom = 4
				align = center
				text = "[Max_CFixedPoint(Character.GetTravelSpeedAptitude, '(CFixedPoint)0' )|0]"
			}
		}

		hbox = {
			spacing = 3

			tooltip = "[Character.GetTravelSafetyAptitudeBreakdown]"

			icon = {
				size = { 25 25 }
				texture = "gfx/interface/icons/travel/travel_safety_icon.dds"
			}

			text_single = {
				name = "value"
				margin_bottom = 4
				align = center
				text = "[Max_CFixedPoint(Character.GetTravelSafetyAptitude, '(CFixedPoint)0' )|0]"
			}
		}
	}
}
