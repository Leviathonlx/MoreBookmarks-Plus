window = {
	name = "reforge_artifact_window"
	position = { 0 20 }
	parentanchor = center
	layer = middle

	using = Window_Background
	using = Window_Decoration_Spike

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		margin_bottom = 28
		set_parent_size_to_minimum = yes

		using = Window_Margins
		using = Window_Background

		header_pattern = {
			layoutpolicy_horizontal = expanding
			minimumsize = { 100% 0 }

			blockoverride "header_text"
			{
				text = "REFORGE_ARTIFACT_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[ReforgeArtifactWindow.Close]"
			}
		}

		vbox_reforge_effects_me = {
			blockoverride "EffectText" {
				text = "[ReforgeArtifactWindow.GetCharacterEffectsDesc]"
			}
		}

		expand = { minimumsize = { 0 10 } }
		
		vbox_reforge_effects_artifact = {
			blockoverride "EffectText" {
				text = "[ReforgeArtifactWindow.GetArtifactEffectsDesc]"
			}
		}

		expand = { minimumsize = { 0 10 } }

		button_checkbox_label = {
			datacontext = "[ReforgeArtifactWindow.GetArtifact]"

			visible = "[Artifact.CanReforge( ReforgeArtifactWindow.GetCharacter.Self )]"
			onclick = "[ReforgeArtifactWindow.ToggleCompleteReforge]"

			blockoverride "checkbox"
			{
				checked = "[ReforgeArtifactWindow.IsCompleteReforge]"
			}

			blockoverride "text"
			{
				text = "[ReforgeArtifactWindow.GetCompleteReforgeDesc]"
			}
		}

		expand = { minimumsize = { 0 10 } }

		button_primary_big = {
			datacontext = "[ReforgeArtifactWindow.GetArtifact]"
			visible = "[ReforgeArtifactWindow.IsCompleteReforge]"

			text = "REFORGE"

			onclick = "[ReforgeArtifactWindow.Reforge]"
			enabled = "[Artifact.CanReforge( ReforgeArtifactWindow.GetCharacter.Self )]"
			tooltip = "[Artifact.GetReforgeTooltip( ReforgeArtifactWindow.GetCharacter.Self )]"

			clicksound = "event:/DLC/EP1/SFX/UI/artifact_reforge"
		}

		button_primary_big = {
			datacontext = "[ReforgeArtifactWindow.GetArtifact]"
			visible = "[Not( ReforgeArtifactWindow.IsCompleteReforge )]"

			text = "REPAIR"

			onclick = "[ReforgeArtifactWindow.Reforge]"
			enabled = "[Artifact.CanRepair( ReforgeArtifactWindow.GetCharacter.Self )]"
			tooltip = "[Artifact.GetRepairTooltip( ReforgeArtifactWindow.GetCharacter.Self )]"

			clicksound = "event:/DLC/EP1/SFX/UI/artifact_reforge"
		}
	}
}

types ReforgeArtifactWindow
{
	type vbox_reforge_effects_me = vbox {
		name = "me"
		datacontext = "[ReforgeArtifactWindow.GetCharacter]"
		margin_bottom = 5
		minimumsize = { 500 -1 }

		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		background = {
			using = Background_Area_With_Header
		}

		text_single = {
			text = "EFFECTS_ON_ME"
			layoutpolicy_horizontal = expanding
			margin = { 15 4 }
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_top = 4
			margin_left = 8

			portrait_head = {
				blockoverride "opinion_box" {}
			}

			text_multi = {
				name = "effects_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresize = yes
				max_width = 375
				margin = { 5 10 }
				block "EffectText" {}
			}

			expand = {}
		}
	}

	type vbox_reforge_effects_artifact = vbox {
		name = "recipient"
		datacontext = "[ReforgeArtifactWindow.GetArtifact]"
		margin_bottom = 5
		minimumsize = { 500 -1 }

		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		background = {
			using = Background_Area_With_Header
		}

		text_single = {
			datacontext = "[ReforgeArtifactWindow.GetArtifact]"
			text = "EFFECTS_ON_ARTIFACT"
			layoutpolicy_horizontal = expanding
			margin = { 15 4 }
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 0 }
			margin_top = 5
			spacing = 5

			text_multi = {
				name = "effects_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresize = yes
				max_width = 375
				margin = { 5 10 }
				block "EffectText" {}
			}

			expand = {}

			vbox = {
				name = "artifact_icon"
				margin_right = 6
				margin_bottom = 4
				spacing = 4

				widget = {
					size = { 80 80 }

					button_artifact = {}

					tooltipwidget = {
						artifact_tooltip = {}
					}
				}

				vbox = {
					margin_left = 10

					progressbar_standard = {
						name = "durability"
						size = { 80 10 }

						min = 0
						max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
						value = "[FixedPointToFloat( Artifact.GetDurability )]"
					}
				}
			}
		}
	}
}
