window = {
	name = "activity_locale_window"

	datacontext = "[GetPlayer]"
	datacontext = "[GetVariableSystem]"
	datacontext = "[ActivityLocaleWindow.GetActivity]"

	layer = middle # figure this one out
	parentanchor = center
	size = { 100% 100% }

	movable = no

	filter_mouse = all
	alwaystransparent = no

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Sound_Window_AmbienceMute_Snapshot
		on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		on_start = "[GetVariableSystem.Clear( 'activity_view' )]"
		on_start = "[VariableSystem.Clear( 'activity_locale_popup' )]"
	}

	widget = {
		name = "activity_scene"
		size = { 100% 100% }

		# Filled from code based on activity background image
		#
		#	Example:
		#		my_example_activity = {
		#			...
		#			background = "test_locale_background.dds"
		#			...
		#		}
		#
		#		Adds - gui/activity_locale_widgets/test_locale_background.gui
		widget = {
			name = "activity_locale_background_widget"
			size = { 100% 100% }
		}

		# Filled from code based on active locale visuals defined within
		# the activity type's "locales" field
		#
		#	Example:
		#		my_example_activity = {
		#			...
		#			locales = { locale_1 = my_example_locale }
		#			...
		#		}
		#
		#		my_example_locale = {
		#			...
		#			visuals = my_example_locale_visual
		#			...
		#		}
		#
		#		Adds - gui/activity_locale_widgets/my_example_locale_visual.gui
		#				|- widget - my_example_locale_visual
		widget = {
			name = "activity_locale_widgets"
			size = { 100% 100% }
		}

		# Filled from code based on activity background image
		#
		#	Example:
		#		my_example_activity = {
		#			...
		#			background = "test_locale_background.dds"
		#			...
		#		}
		#
		#		Adds - gui/activity_locale_widgets/test_locale_background_top_layer.gui
		widget = {
			name = "activity_locale_background_widget_top_layer"
			size = { 100% 100% }
		}

		# Filled from code based on active locale visuals defined within
		# the activity type's "locales" field.
		#
		#	Example:
		#		my_example_activity = {
		#			...
		#			locales = { locale_1 = my_example_locale }
		#			...
		#		}
		#
		#		my_example_locale = {
		#			...
		#			visuals = my_example_locale_visual
		#			...
		#		}
		#
		#		Adds - gui/activity_locale_widgets/my_example_locale_visual.gui
		#				|- widget - my_example_locale_visual_banner
		widget = {
			name = "activity_locale_background_widget_banner_layer"
			size = { 100% 100% }
		}
	}

	widget = {
		name = "locale_header"
		size = { 600 90 }
		parentanchor = top|left

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2

			margin = { 16 16 }

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
				blend_mode = alphamultiply
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 16 0 }

			hbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_Dark

					margin = { 20 0 }
					margin_top = 16
					margin_bottom = 8

					modify_texture = {
						texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
						alpha = 0.1
						blend_mode = alphamultiply
						spriteType = Corneredtiled
						spriteborder = { 160 0 }
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "[Activity.GetShortNameNoTooltip]"
					align = nobaseline
					fontsize = 28
					fontsize_min = 16
					max_width = 600

					using = Font_Size_Big
					using = Font_Type_Flavor
				}
			}


			text_single = {
				layoutpolicy_horizontal = expanding

				text = ACTIVITY_IN_CURRENT_LOCATION
				align = nobaseline
				max_width = 600

				using = Font_Size_Medium
			}
		}
	}

	activity_pulse_action_popup_left = {
		layer = top
		parentanchor = bottom|left
		position = { 0 -280 }
		visible = "[Not(ActivityLocaleWindow.HasActiveEvent)]"

		datacontext = "[ActivityLocaleWindow.GetActivity]"
		datacontext = "[ActivityLocaleWindow.GetLastWeeklyPulseEffectData]"
	}

	widget_activity_locale_fullscreen_event = {
		name = "widget_activity_locale_fullscreen_event"
		size = { 100% 100% }
		parentanchor = top|hcenter
	}

	widget = {
		name = "widget_activity_locale_fullscreen_other_event"
		size = { 100% 100% }
		parentanchor = top|hcenter
		alwaystransparent = yes
	}

	widget = {
		size = { 300 870 }
		position = { -4 16 }
		parentanchor = right|vcenter
		alwaystransparent = yes

		vbox = {
			layoutpolicy_vertical = expanding

			vbox_activity_locale_right_bar = {}

			expand = {}
		}
	}

	vbox = {
		name = "main_contents"

		expand = {}

		hbox_activity_locale_bottom_bar = {
			name = "bottom_bar"
			datacontext = "[ActivityLocaleWindow.GetActivity]"
			layoutpolicy_horizontal = expanding
		}
	}

	## Other custom widget
	widget = {
		name = "activity_locale_other_custom_widgets"
		size = { 100% 100% }
	}

	widget_activity_locale_regular_event = {
		name = "activity_event"
	}

	button_close = {
		parentanchor = top|right
		position = { -10 60 }
		size = { 32 32 }

		onclick = "[VariableSystem.Clear( 'activity_locale_view' )]"
		onclick = "[ActivityLocaleWindow.Close]"

		shortcut = "close_window"

		using = Animation_ShowHide_Quick

		tooltip = "CLOSE_TOOLTIP"

		background = {
			using = Background_Area_Dark
			margin = { 6 6 }
			alpha = 0.8
		}
	}

	widget_top_right_bar = {
		name = "top_bar_hud"
		visible = "[Not(VariableSystem.Exists('royal_court_screenshot_window'))]"
		datacontext = "[AccessTopBar]"
		parentanchor = top|right

		using = Animation_ShowHide_Quick
	}

	## Top layer
	widget = {
		name = "activity_locale_top_layer"
		size = { 100% 100% }

		widget_locale_window_conclusion = {
			size = { 1390 750 }
			parentanchor = center

			visible = "[And( Not( ActivityLocaleWindow.HasActiveEvent ), Activity.IsComplete )]"
		}
	}

	error_horse = {
		parentanchor = bottom|left
		position = { 50 -380 }
		visible = "[And( Not( IsPauseMenuShown ), Not(ReleaseMode) )]"
	}
}

types ActivityLocaleTypes
{
	@widget_activity_locale_phase_item_width = 150
	@icon_activity_locale_phase_progression_size = 48
	@widget_activity_locale_phase_item_spacing = 8

	@progress_bar_segment_size = @[widget_activity_locale_phase_item_width + widget_activity_locale_phase_item_spacing]

	type widget_locale_actions = widget {

		background = {
			texture = "gfx/interface/illustrations/activity_header_backgrounds/activity_tournament.dds"
			alpha = 0.2
			mirror = horizontal

			using = Mask_Rough_Edges

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		## Actions
		widget = {
			name = "intent_box"
			position = { -60 8 }
			size = { 250 76 }
			parentanchor = top|right

			## Intent Data
			vbox = {
				hbox = {
					layoutpolicy_horizontal = expanding
					margin_left = 16

					text_label_left = {
						text = locale_window_your_intent
					}

					expand = {}
				}

				button_standard = {
					datacontext = "[GetPlayer.GetInvolvedActivityIntent]"
					size = { 250 40 }

					onclick = "[ToggleGameViewData( 'activity_intent_selection', GetPlayer )]"

					tooltip = "ACTIVITY_OPEN_INTENT_WINDOW"

					hbox = {
						name = "intent"
						margin = { 8 4 }
						spacing = 5
						layoutpolicy_vertical = expanding

						icon_flat_standard = {
							name = "current_intent_icon"
							size = { 30 30 }
							texture = "[ActivityIntent.GetIcon]"

							blockoverride "master_color_frame" {
								frame = 1
							}
						}

						text_single = {
							name = "current_intent"
							text = "[ActivityIntent.GetName]"
							align = nobaseline
						}

						expand = {}

						button_change = {
							name = "change_intent"
							onclick = "[ToggleGameViewData( 'activity_intent_selection', GetPlayer )]"
						}
					}
				}
			}
		}

		## Player Portrait and status
		widget = {
			size = { 100% 100% }
			parentanchor = bottom
			allow_outside = yes

			portrait_activity_locale_window = {
				position = { 2 -17 }
				size = { 237 237 }
				allow_outside = yes
			}

			## Copy of hud.gui:1742 with adjustments
			flowcontainer = {
				name = "bottom_left_bar"
				visible = "[And( Not( IsPauseMenuShown ), And(And(IsDefaultGUIMode, GetPlayer.IsValid), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))))]"
				parentanchor = bottom|left
				position = { 66 0 }
				ignoreinvisible = yes
				alwaystransparent = no

				state = {
					name = _show
					using = Animation_Curve_Default
					duration = 0.21

					position = { 66 0 }
					alpha = 1
				}

				state = {
					name = _hide
					using = Animation_Curve_Default
					duration = 0.21

					position = { 30 50 }
					alpha = 0
				}

				widget = {
					name = "stress_widget"
					size = { 110 55 }

					widget = {
						parentanchor = center
						size = { 180 108 }

						tooltip = "PLAYER_STRESS_TOOLTIP"
						using = tooltip_ne

						widget = {
							name = "progressbar"
							parentanchor = center
							widgetanchor = left|vcenter
							position = { -13 0 }
							size = { 60 20 }

							background = {
								texture = "gfx/interface/colors/white.dds"
								color = { 0.1 0.1 0.1 0.8 }
							}

							icon = {
								visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
								size = { 100% 100% }
								texture = "gfx/interface/colors/white.dds"
								color = { 1 0.1 0.1 0.2 }

								using = Animation_ShowHide_Standard

								state = {
									name = a
									next = b
									trigger_on_create = yes

									using = Animation_Curve_Default
									duration = 0.8
									alpha = 0
								}

								state = {
									name = b
									next = a

									using = Animation_Curve_Default
									duration = 1.5
									alpha = 1
								}
							}

							hbox = {
								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( GetPlayer.GetStressProgress, '(float)100', '(int32)60' )]"

									progressbar_hud_stress = {
										visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
										visible_at_creation = no
										size = { 100% 100% }

										using = Animation_ShowHide_Standard

										blockoverride "bar_color"
										{
											texture = "gfx/interface/colors/red.dds"
										}

										blockoverride "bar_color_flow"
										{
											texture = "gfx/interface/colors/gold.dds"
											alpha = 0.7
										}
									}

									progressbar_hud_stress = {
										visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
										visible_at_creation = no
										size = { 100% 100% }

										using = Animation_ShowHide_Standard

										blockoverride "bar_color"
										{
											texture = "gfx/interface/colors/orange.dds"
										}

										blockoverride "bar_color_flow"
										{
											texture = "gfx/interface/colors/white.dds"
											alpha = 0.3
										}
									}

									progressbar_hud_stress = {
										visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)1')]"
										visible_at_creation = no
										size = { 100% 100% }

										using = Animation_ShowHide_Standard

										blockoverride "bar_color"
										{
											texture = "gfx/interface/colors/gold_darker.dds"
										}

										blockoverride "bar_color_flow"
										{
											texture = "gfx/interface/colors/white.dds"
											alpha = 0.3
										}
									}

									progressbar_hud_stress = {
										visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)0')]"
										size = { 100% 100% }

										using = Animation_ShowHide_Standard

										blockoverride "bar_color"
										{
											texture = "gfx/interface/colors/blue.dds"
										}

										blockoverride "bar_color_flow"
										{
											texture = "gfx/interface/colors/white.dds"
											alpha = 0.3
										}
									}
								}

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOtherScaled( GetPlayer.GetStressProgress, '(float)100', '(int32)60' )]"
								}
							}
						}
						widget = {
							size = { 100% 100% }

							progressbar_hud_stress_glow = {
								texture = "gfx/interface/hud/hud_stress_glow_red.dds"

								blockoverride "animation_trigger_1"
								{
									name = "stress_level_increase"
								}

								blockoverride "animation_trigger_2"
								{
									name = "stress_increase"
								}
							}

							progressbar_hud_stress_glow = {
								texture = "gfx/interface/hud/hud_stress_glow_blue.dds"

								blockoverride "animation_trigger_1" {
									name = "stress_level_decrease"
								}

								blockoverride "animation_trigger_2"
								{
									name = "stress_decrease"
								}
							}

							progressbar_hud_stress_glow = {
								visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
								texture = "gfx/interface/hud/hud_stress_glow_red.dds"

								blockoverride "animation_trigger_1" {
									name = "lvl3_fire"
									trigger_on_create = yes
								}

								blockoverride "animation_trigger_2" {}
								blockoverride "lvl_3" {}
							}

							icon = {
								parentanchor = center
								position = { -30 0 }
								size = { 30 30 }
								texture = "gfx/interface/colors/white.dds"
								using = Color_Red


								modify_texture = {
									name = "mask_1"
									texture = "gfx/interface/component_masks/mask_glow.dds"
									blend_mode = alphamultiply
									rotate_uv = 1
								}

								modify_texture = {
									name = "mask_2"
									texture = "gfx/interface/component_masks/mask_glow.dds"
									blend_mode = alphamultiply
									rotate_uv = -1
								}

								modify_texture = {
									name = "mask_3"
									texture = "gfx/interface/component_masks/mask_clouds.dds"
									blend_mode = alphamultiply
									alpha = 0.1
								}

								modify_texture = {
									name = "mask_4"
									texture = "gfx/interface/component_masks/mask_circle.dds"
									blend_mode = mask
								}

								modify_texture = {
									name = "mask_3"
									texture = "gfx/interface/colors/gold.dds"
									blend_mode = add
								}

								state = {
									name = "stress_level_increase"
									next = b

									using = Animation_Curve_Default
									scale = 1
									alpha = 0
								}

								state = {
									name = b
									next = c

									duration = 0.6
									bezier = { 0.5 0 1 0.5 }

									scale = 5
									alpha = 0.7
								}

								state = {
									name = c
									duration = 0.3
									alpha = 0
									scale = 6
								}

								state = {
									name = rotate_a
									next = rotate_b
									trigger_on_create = yes

									modify_texture = {
										name = "mask_1"
										rotate_uv = 1
									}
								}

								state = {
									name = rotate_a
									next = rotate_b

									duration = 1

									modify_texture = {
										name = "mask_1"
										rotate_uv = 180
									}
								}

								state = {
									name = rotate_a_2
									next = rotate_b_2
									trigger_on_create = yes

									modify_texture = {
										name = "mask_2"
										rotate_uv = -1
									}
								}

								state = {
									name = rotate_a_2
									next = rotate_b_2

									duration = 1

									modify_texture = {
										name = "mask_2"
										rotate_uv = -180
									}
								}

								state = {
									name = rotate_a_3
									next = rotate_b_3
									trigger_on_create = yes

									modify_texture = {
										name = "mask_3"
										rotate_uv = 0
										alpha = 0.1
									}
								}

								state = {
									name = rotate_a_3
									next = rotate_b_3

									duration = 1

									modify_texture = {
										name = "mask_3"
										rotate_uv = 40
										alpha = 0.8
									}
								}
							}

							icon = {
								size = { 100% 100% }
								texture = "gfx/interface/skinned/hud_stress_bg.dds"

								icon = {
									parentanchor = vcenter
									position = { 41 0 }
									size = { 35 35 }

									texture = "gfx/interface/icons/stress/icon_stress_level.dds"
									framesize = { 70 70 }
									frame = "[IntToFrameIndex( GetPlayer.GetStressLevel )]"

									modify_texture = {
										visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
										name = "lvl3_glow"
										texture = "gfx/interface/colors/gold.dds"
										blend_mode = colordodge
										alpha = 0
									}

									modify_texture = {
										name = "lvl_increase"
										texture = "gfx/interface/colors/gold.dds"
										blend_mode = colordodge
										alpha = 0
									}

									state = {
										name = a
										next = b
										duration = 0.6
										trigger_on_create = yes
										using = Animation_Curve_Default

										modify_texture = {
											name = "lvl3_glow"
											alpha = 0.3
										}
									}

									state = {
										name = b
										next = a
										duration = 1.5
										using = Animation_Curve_Default

										modify_texture = {
											name = "lvl3_glow"
											alpha = 0
										}
									}

									state = {
										name = "stress_level_increase"
										next = "stress_level_increase_2"

										modify_texture = {
											name = "lvl_increase"
											alpha = 0
										}
									}

									state = {
										name = "stress_level_increase_2"
										next = "stress_level_increase_3"
										duration = 0.4
										bezier = { 0.5 0 1 0.5 }

										modify_texture = {
											name = "lvl_increase"
											alpha = 0.7
										}
									}

									state = {
										name = "stress_level_increase_3"
										duration = 0.5
										bezier = { 0 0.5 0.5 1 }

										modify_texture = {
											name = "lvl_increase"
											alpha = 0
										}
									}
								}
							}
						}

					}
				}

				widget_stress_sounds = {}
			}
		}
	}

	type vbox_guest_management_container = vbox {

		## Banner
		hbox = {
			text_label_center = {
				maximumsize = { 200 -1 }

				block "header_text" {
				}
			}
		}
	}

	type hbox_locale_guest_action_buttons = hbox {
		name = "locale_guest_action_buttons"
		spacing = 4

		vbox_guest_management_container = {
			name = "guest_management_container"
			layoutpolicy_horizontal = expanding

			spacing = 8
			margin_bottom = 50

			blockoverride "header_text" {
				text = locale_window_guests_header
			}

			button_standard = {
				name = "guest_list"

				size = { 200 32 }

				text = "locale_window_all_guests_button"
				tooltip = locale_window_all_guests_button_tooltip

				down = "[IsGameViewDataShown( 'activity_guest_list', Activity.Self )]"
				onclick = "[ToggleGameViewData( 'activity_guest_list', Activity.Self )]"
				enabled = "[Not(ActivityLocaleWindow.HasActiveEvent)]"
			}
		}
	}

	type hbox_activity_locale_bottom_bar = hbox
	{
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			margin = { 16 16 }
			texture_density = 2

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}

		## Left Section
		widget_locale_actions = {
			name = "activity_locale_bottom_left"
			size = { 528 220 }
		}

		## Middle Section
		widget = {
			name = "activity_locale_bottom_middle"
			size = { 864 220 }
		}

		## Right Section
		widget = {
			name = "activity_locale_bottom_right"
			size = { 528 220 }

			background = {
				texture = "gfx/interface/illustrations/activity_header_backgrounds/activity_tournament.dds"
				alpha = 0.2
				using = Mask_Rough_Edges

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin = { 16 0 }
				margin_top = 8
				spacing = 8

				hbox = {
					name = "activity_log_button_container"
					layoutpolicy_horizontal = expanding

					expand = {}

					button_standard = {
						name = "activity_log"
						size = { 270 32 }
						text = "ACTIVITY_WINDOW_LOG"
						down = "[IsGameViewDataShown( 'activity_log', Activity.Self )]"
						onclick = "[ToggleGameViewData( 'activity_log', Activity.Self )]"
					}
				}

				hbox = {
					name = "bottom_right_content_container"
					layoutpolicy_horizontal = expanding

					hbox = {
						name = "bottom_right_content_before_guests"
						layoutpolicy_horizontal = expanding
						margin_bottom = 70
						margin_right = 122
					}

					hbox_locale_guest_action_buttons = {
						margin_right = 32
					}

					hbox = {
						name = "bottom_right_content_after_guests"
					}
				}
			}
		}
	}

	type vbox_activity_locale_right_bar = vbox
	{
		vbox = {
			name = "activity_locale_window_right_bar_container"
		}
	}

	type widget_activity_locale_regular_event = activity_event_widget_base
	{
		datacontext = "[ActivityLocaleWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
		datacontext = "[EventWindowViewInsert.GetOpenEvent]"

		size = { 1120 580 }
		alwaystransparent = no

		parentanchor = center
	}

	type widget_activity_locale_fullscreen_event = widget {
		datacontext = "[ActivityLocaleWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
		datacontext = "[EventWindowViewInsert.GetOpenEvent]"
		visible = "[EventWindowViewInsert.HasOpenEvent]"

		state = {
			name = activity_new_event_shown
			on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
		}

		widget = {
			size = { 100% 100% }
			alwaystransparent = no
			parentanchor = hcenter|top

			state = {
				name = activity_new_event_shown
				on_start = "[PdxGuiWidget.FindChild( 'event_video' ).GfxVideoControl.Restart]"
				on_start = "[PdxGuiWidget.FindChild( 'event_transition_video' ).GfxVideoControl.Restart]"
			}

			event_window_background_widget = {
				blockoverride "event_mask" {}
			}

			widget = {
				size = { 100% 100% }
				position = { 0 -220 }
				parentanchor = vcenter

				block "fullscreen_event_attributes"
				{

				}

				## Characters
				vbox = {
					widget = {
						name = "text_spacer"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 45
					}

					## Characters
					widget = {
						name = "characters"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						layoutstretchfactor_horizontal = 55
						alpha = 0

						state = {
							name = appear
							trigger_on_create = yes
							delay = 0.5
							using = Animation_Curve_Default
							alpha = 1
							duration = 0.5
						}

						## Multiple characters
						hbox = {
							### LEFT CHARACTERS ###
							widget = {
								name = "portraits_left"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								### SECONDARY ###
								widget = {
									parentanchor = bottom|right
									position = { -580 0 }
									size = { 400 558 }

									allow_outside = no

									portrait_event_tournament = {
										name = "portrait_secondary_left"
										datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
										visible = "[And(EventWindowData.HasPortraitCharacter('lower_left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
										parentanchor = center

										size = { 500 558 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('lower_left_portrait', 'camera_event_tournament_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"

											tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
											tooltip_offset = { 400 -900 }
											using = tooltip_below
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
											position = { -0 0 }
										}

										blockoverride "grayscale" {}

										highlight_icon = {
											name = "prison_bars"
											visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('lower_left_portrait')))]"
											visible_at_creation = no
											size = { 280 500 }
											parentanchor = bottom|left
											effectname = "NoHighlight"
											spriteType = corneredTiled
											texture_density = 1.5
											texture = "gfx/portraits/portrait_prison_body.dds"

											modify_texture = {
												name = "mask"
												texture =  "gfx/portraits/portrait_mask_event.dds"
												spriteType = Corneredstretched
												blend_mode = alphamultiply
											}
										}
									}
								}

								### PRIMARY ###
								widget = {
									parentanchor = bottom|right
									position = { -300 0 }
									size = { 400 558 }

									allow_outside = no

									portrait_event_tournament = {
										name = "portrait_primary_left"
										datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
										visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
										parentanchor = center

										size = { 500 558 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_tournament_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"

											tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
											tooltip_offset = { 540 -900 }
											using = tooltip_below
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
											position = { -0 0 }
										}

										blockoverride "grayscale" {}

										highlight_icon = {
											name = "prison_bars"
											visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
											visible_at_creation = no
											size = { 280 500 }
											parentanchor = bottom|left
											effectname = "NoHighlight"
											spriteType = corneredTiled
											texture_density = 1.5
											texture = "gfx/portraits/portrait_prison_body.dds"

											modify_texture = {
												name = "mask"
												texture =  "gfx/portraits/portrait_mask_event.dds"
												spriteType = Corneredstretched
												blend_mode = alphamultiply
											}
										}
									}
								}
							}

							### RIGHT CHARACTERS ###
							widget = {
								name = "portraits_right"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								### SECONDARY CHARACTER ###
								widget = {
									parentanchor = bottom|left
									position = { 580 0 }
									size = { 400 558 }

									allow_outside = no

									portrait_event_tournament = {
										name = "portrait_secondary_right"
										datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
										visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
										parentanchor = center

										size = { 500 558 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('lower_right_portrait', 'camera_event_tournament_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_right_portrait'))]"

											tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
											using = tooltip_below
											tooltip_offset = { -400 -900 }
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_right_portrait') ))]"
											position = { 0 0 }
										}

										blockoverride "grayscale" {}

										highlight_icon = {
											name = "prison_bars"
											visible_at_creation = no
											visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('lower_right_portrait')))]"
											size = { 285 500 }
											parentanchor = bottom|right
											effectname = "NoHighlight"
											spriteType = corneredTiled
											texture_density = 1.5
											texture = "gfx/portraits/portrait_prison_body.dds"

											modify_texture = {
												name = "mask"
												texture =  "gfx/portraits/portrait_mask_event.dds"
												spriteType = Corneredstretched
												blend_mode = alphamultiply
											}
										}
									}
								}

								### PRIMARY CHARACTER ###
								widget = {
									parentanchor = bottom|left
									position = { 300 0 }
									size = { 400 558 }

									allow_outside = no

									portrait_event_tournament = {
										name = "portrait_primary_right"
										datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
										visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
										parentanchor = center

										size = { 500 558 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_tournament_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"

											tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
											using = tooltip_below
											tooltip_offset = { -400 -900 }
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
											position = { 0 0 }
										}

										blockoverride "grayscale" {}

										highlight_icon = {
											name = "prison_bars"
											visible_at_creation = no
											visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
											size = { 285 500 }
											parentanchor = bottom|right
											effectname = "NoHighlight"
											spriteType = corneredTiled
											texture_density = 1.5
											texture = "gfx/portraits/portrait_prison_body.dds"

											modify_texture = {
												name = "mask"
												texture =  "gfx/portraits/portrait_mask_event.dds"
												spriteType = Corneredstretched
												blend_mode = alphamultiply
											}
										}
									}
								}
							}
						}

						## Single character
						portrait_event = {
							name = "portrait_center"
							visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), Not(EventWindowData.HasPortraitCharacter('right_portrait')))]"
							datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
							size = { 100% 112% }
							position = { 225 16 }
							parentanchor = bottom|right

							blockoverride "portrait_button"
							{
								portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_center', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
								alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"
								size = { 650 558 }

								tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
								tooltip_offset = { 550 -580 }
								using = tooltip_below
							}

							blockoverride "highlight_visible"
							{
								visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
							}

							blockoverride "grayscale" {}

							highlight_icon = {
								name = "prison_bars"
								visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
								visible_at_creation = no
								size = { 300 500 }
								parentanchor = bottom|hcenter
								effectname = "NoHighlight"
								spriteType = corneredTiled
								texture_density = 1.5
								texture = "gfx/portraits/portrait_prison_body.dds"

								modify_texture = {
									name = "mask"
									texture =  "gfx/portraits/portrait_mask_event.dds"
									spriteType = Corneredstretched
									blend_mode = alphamultiply
								}
							}
						}
					}
				}
			}

			## Event text and options
			hbox = {
				margin_left = 32
				margin_right = 32
				margin_top = 170
				margin_bottom = 250
				parentanchor = hcenter

				widget = {
					name = "characters_spacer_left"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 55
				}

				widget = {
					name = "text"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 45

					vbox = {
						name = "description_and_options"
						layoutpolicy_vertical = expanding
						alpha = 0

						state = {
							name = appear
							trigger_on_create = yes
							delay = 0.2
							using = Animation_Curve_Default
							alpha = 1
							duration = 1.5
						}

						## Event text
						hbox = {
							name = "event_text_area"
							layoutpolicy_horizontal = expanding
							margin_bottom = 8

							minimumsize = { 490 -1 }
							maximumsize = { 490 -1 }

							text_multi = {
								name = "description"
								minimumsize = { 480 -1 }
								maximumsize = { 480 -1 }
								autoresize = yes
								margin = { 16 0 }
								margin_top = 4
								margin_bottom = 32
								text = "[EventWindowData.GetDescription]"
								fontsize = 16

								background = {
									using = Background_Area_ExtraDark
									alpha = 0.9

									margin = { 140 16 }
									margin_bottom = 32

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
										blend_mode = alphamultiply
									}

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
										blend_mode = alphamultiply
									}
								}
							}
						}

						expand = {
							layoutpolicy_vertical = expanding
						}

						flowcontainer = {
							name = "event_debug_info"
							visible = "[InDebugMode]"
							ignoreinvisible = yes

							using = Event_Window_Debug_Info

							blockoverride "event_reset_onclick"
							{
								onclick = "[EventWindowViewInsert.Reload]"
							}

							background = {
								using = Background_Area_Dark

								margin = { 16 16 }
								alpha = 0.9
							}
						}

						## Event options
						vbox = {
							name = "event_options_area"
							allow_outside = yes
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes
							spacing = 5
							margin_bottom = 5

							hbox = {
								spacing = 5

								hbox = {
									name = "dynamic_birth_name"
									margin = { 5 0 }
								}
							}

							vbox = {
								name = "custom_widgets_container"
								layoutpolicy_horizontal = expanding

								state = {
									trigger_on_create = yes
									name = appear_test
									delay = 0.8
									using = Animation_Curve_Default
									alpha = 1
									duration = 0.6
								}
							}

							fixedgridbox = {
								name = "option_grid"
								addcolumn = 500
								addrow = 42
								datamodel = "[EventWindowData.GetOptions]"

								item = {
									button_eventoption = {
										blockoverride "onmousehierarchy_callbacks"
										{
											onmousehierarchyenter = "[EventWindowViewInsert.OnMouseEnterOption( EventOption.Self )]"
											onmousehierarchyleave = "[EventWindowViewInsert.OnMouseLeaveOption]"
										}
									}
								}
							}
						}

						widget = {
							name = "bottom_event_spacing"
							size = { 0 35 }
							layoutpolicy_horizontal = expanding
						}
					}
				}

				widget = {
					name = "characters_spacer_right"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 55
				}
			}

			## Header
			vbox = {
				margin_top = 94

				hbox = {
					spacing = 8

					background = {
						using = Background_Area_Solid

						margin = { 250 -8 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
							blend_mode = alphamultiply
						}
					}

					icon = {
						name = "theme_icon"
						size = { 74 74 }
						texture = "[EventWindowData.GetThemeIcon]"

						modify_texture = {
							name = overlay
							texture = "gfx/interface/component_effects/effect_blue_shine.dds"
							blend_mode = colordodge
							translate_uv = {0.6 0}
						}

						state = {
							name = right
							next = left

							duration = 2
							bezier = { .8 .18 .96 .05}

							modify_texture = {
								name = overlay
								translate_uv = {-0.6 0}
							}
						}

						state = {
							name = left
							next = right

							duration = 0.0
							delay = 5


							modify_texture = {
								name = overlay
								translate_uv = {0.6 0}
							}
						}

						state = {
							trigger_on_create = yes
							name = start
							next = right

							duration = 0.0

							modify_texture = {
								name = overlay
								translate_uv = {0.6 0}
							}
						}
					}

					text_single = {
						name = "title"
						fontsize = 29
						fontsize_min = 16
						text = "[EventWindowData.GetTitle]"
						default_format = "#high;weak_glow"
						using = Font_Type_Flavor
						max_width = 950
						align = nobaseline

						alpha = 0

						state = {
							name = start
							trigger_on_create = yes
							delay = 0.2
							using = Animation_Curve_Default
							alpha = 1
							duration = 0.5
						}
					}

					expand = {}
				}

				expand = {}
			}

			event_window_transition_widget = {

				block "transition_widget_states"
				{
					using = Event_Window_Default_Transition_States
				}

				blockoverride "event_transition_mask_properties"
				{
					loop = no
					restart_on_show = yes
				}

				blockoverride "event_transition_video_properties"
				{
					restart_on_show = yes
				}
			}
		}
	}

	type progressbar_phase_progress = progressbar {
		size = { @progress_bar_segment_size 24 }

		min = 0
		max = 100

		progresstexture = "gfx/interface/progressbars/progress_grandeur.dds"
		noprogresstexture = "gfx/interface/progressbars/progress_black.dds"
		spriteType = Corneredtiled
		spriteborder = { 6 6 }
	}

	type widget_activity_locale_news_feed = widget {

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			minimumsize = { 300 -1 }
			maximumsize = { 300 -1 }

			background = {
				texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
				spriteType = Corneredtiled
				spriteborder = { 18 18 }
				margin = { 16 16 }
				texture_density = 2

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_effect.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
			}

			widget = {
				size = { 300 40 }

				text_single = {
					parentanchor = center

					text = ACTIVITY_LOG_HEADER
					align = nobaseline
					default_format = "#high;weak_glow"
					max_width = 280

					using = Font_Type_Flavor
					using = Font_Size_Big
				}
			}

			scrollbox = {
				name = "locale_log_entries"

				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "scrollbox_empty"
				{
					visible = "[IsDataModelEmpty( Activity.GetLogEntries )]"
					text = ACTIVITY_LOG_NO_ENTRIES
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						name = "log_entries_list"
						datamodel = "[Activity.GetLogEntries]"
						spacing = 4

						item = {
							hbox = {
								name = "log_entry"
								visible = "[CanPlayerSeeActivityLogEntry]"
								layoutpolicy_horizontal = expanding
								margin = { 4 4 }
								spacing = 8

								tooltip = "[ActivityLogEntry.GetFullDescription]"

								# An ActivityLogEntry can have multiple tags,
								# be aware of this when implementing tag
								# related art. Speak with design and code if
								# you need more tags.
								#
								# At time of writing this, the current tags
								# are provided by design:
								#	good, bad, contest_info, highlight,
								#	intent, secret, death

								####################
								### NO TAG EVENT ###
								####################
								background = {
									visible = "[ActivityLogEntry.HasNoTags]"

									texture = "gfx/interface/colors/white.dds"
									alpha = 0.7

									using = Color_Black
									using = Mask_Rough_Edges

									margin = { 0 2 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								#################
								### BAD EVENT ###
								#################
								background = {
									visible = "[ActivityLogEntry.HasTag( 'bad' )]"

									texture = "gfx/interface/colors/white.dds"
									alpha = 0.15

									using = Color_Red

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								background = {
									visible = "[ActivityLogEntry.HasTag( 'bad' )]"

									using = Background_Frame

									margin = { 2 2 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								##################
								### GOOD EVENT ###
								##################
								background = {
									visible = "[ActivityLogEntry.HasTag( 'good' )]"

									texture = "gfx/interface/colors/white.dds"
									alpha = 0.15

									using = Color_Green

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								background = {
									visible = "[ActivityLogEntry.HasTag( 'good' )]"

									using = Background_Frame

									margin = { 2 2 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								#######################
								### IMPORTANT EVENT ###
								#######################
								background = {
									visible = "[ActivityLogEntry.HasTag( 'highlight' )]"

									texture = "gfx/interface/colors/white.dds"
									alpha = 0.15

									using = Color_Blue

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								background = {
									visible = "[ActivityLogEntry.HasTag( 'highlight' )]"

									using = Background_Frame

									margin = { 2 2 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								####################
								### INTENT EVENT ###
								####################
								background = {
									visible = "[ActivityLogEntry.HasTag( 'intent' )]"

									texture = "gfx/interface/colors/white.dds"
									alpha = 0.15

									using = Color_Purple

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								background = {
									visible = "[ActivityLogEntry.HasTag( 'intent' )]"

									using = Background_Frame

									margin = { 2 2 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								####################
								### SECRET EVENT ###
								####################
								# Secret, will only be shown if local player is the Character
								background = {
									visible = "[ActivityLogEntry.HasTag( 'secret' )]"

									texture = "gfx/interface/colors/white.dds"
									alpha = 0.1

									using = Color_Grey

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								background = {
									visible = "[ActivityLogEntry.HasTag( 'secret' )]"

									using = Background_Frame

									margin = { 2 2 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
										blend_mode = alphamultiply
									}
								}

								widget = {
									size = { 24 24 }
									name = "activity_locale_log_icon"

									background = {
										using = Background_Area_Solid

										alpha = 0.4
										margin = { 2 2 }
									}

									placeholder_art = {
										size = { 16 16 }
										parentanchor = center
										visible = "[ActivityLogEntry.HasTag( 'secret' )]"
									}
								}

								text_single = {
									name = "activity_locale_log_title"

									text = "[ActivityLogEntry.GetTitle]"
									align = nobaseline
									min_width = 230
									max_width = 230
								}

								expand = { }
							}
						}
					}
				}
			}
		}
	}

	type button_planned_phase_button = button_standard_clean
	{
		onclick = "[ActivityLocaleWindow.SetSelectedPhase(PlannedActivityPhase.Self)]"
		onclick = "[SetLocaleView( 'phase_information' )]"

		text_label_center = {
			layoutpolicy_horizontal = expanding
			parentanchor = bottom|hcenter
			text = "[PlannedActivityPhase.GetPhase.GetName]"
			max_width = 130
			position = { 0 -2 }
		}
	}

	type widget_locale_window_conclusion = widget {

		using = Window_Background
		using = Window_Decoration

		margin_widget = {
			name = "background"
			size = { 99% 99% }

			background = {
				fittype = centercrop
				using = Mask_Rough_Edges
				texture = "[ActivityLocaleWindow.GetBackground.GetTexture]"
				visible = "[Not( ActivityLocaleWindow.HasActiveEvent )]"
				margin_bottom = -12
				margin_left = -16

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_seamless_torn_edge_vertical.dds"
					spriteType = corneredtiled
					spriteborder_right = 2250
					blend_mode = alphamultiply
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_seamless_torn_edge_vertical.dds"
					spriteType = corneredtiled
					spriteborder_right = 2250
					mirror = horizontal
					blend_mode = alphamultiply
				}
			}
		}

		widget = {
			name = "conclusion_header"
			layoutpolicy_horizontal = expanding
			parentanchor = hcenter
			size = { 1395 144 }

			icon = {
				name = "theme_header"
				parentanchor = hcenter
				position = { 0 -80 }
				size = { 97% 97% }
				texture = "gfx/interface/window_activities/header_activity.dds"

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
					blend_mode = colordodge
					translate_uv = { 0.6 0 }
				}

				state = {
					name = right
					next = left

					duration = 8
					bezier = { 0.8 0.18 0.96 .05 }

					modify_texture = {
						name = overlay
						translate_uv = { -0.6 0 }
					}
				}

				state = {
					name = left
					next = right

					duration = 0.0
					delay = 5

					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}

				state = {
					trigger_on_create = yes
					name = start
					next = right

					duration = 0.0

					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}
			}

			icon = {
				texture = "[Activity.GetType.GetHeaderIcon]"
				size = {  82 82  }
				position = { 0 -40  }
				parentanchor = top|hcenter
			}

			container = {
				parentanchor = left
				position = { 50 4 }

				activity_header = {
					name = "conclusion_title"
					text = "ACTIVITY_CONCLUSION_HEADER"
				}
			}

			buttons_window_control = {
				parentanchor = right
				position = { -30 5 }
				allow_outside = yes

				blockoverride "button_close"
				{
					onclick = "[ActivityLocaleWindow.Close]"
				}
				blockoverride "button_go_to"
				{
					tooltip = "ACTIVITY_WINDOW_CURRENT_LOCATION"
					onclick = "[Activity.GetCurrentPhase.GetLocation.PanCameraTo]"
				}
			}
		}

		vbox = {
			name = "conclusion_content"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			expand = { }

			hbox = {
				name = "conclusion"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin = { 26 0 }

				vbox_activity_conclusion = {
					name = "activity_conclusion"
					layoutpolicy_vertical = expanding
					margin_top = 54
					margin_bottom = 38

					spacing = 16

					background = {
						using = Background_Area_ExtraDark
						margin_bottom = -18
						margin_top = -54
						alpha = 0.9
					}

					visible = "[Activity.IsComplete]"

					blockoverride "close_activity_onclick"
					{
						onclick = "[ActivityLocaleWindow.Close]"
					}
				}

				fixedgridbox = {
					name = "idle_characters_small"
					datamodel = "[ActivityLocaleWindow.GetCharacters]"
					visible = "[LessThanOrEqualTo_int32( GetDataModelSize( ActivityLocaleWindow.GetCharacters ), '(int32)3' )]"

					addcolumn = 290
					addrow = 430
					maxhorizontalslots = 3
					flipdirection = yes

					item = {
						widget = {
							size = { 250 430 }

							allow_outside = no

							portrait_body = {
								parentanchor = center
								allow_outside = yes
								datacontext = "[ActivityWindowCharacter.GetCharacter]"

								blockoverride "portrait_texture"
								{
									size = { 550 400 }
									portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', ActivityWindowCharacter.GetAnimation, PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"

									tooltip_offset = { 600 -900 }
									using = tooltip_below
								}
							}

							text_label_center = {
								name = "label"
								parentanchor = bottom|hcenter
								text = "[ActivityWindowCharacter.GetLabel]"
							}
						}
					}
				}

				fixedgridbox = {
					name = "idle_characters_many"
					datamodel = "[ActivityLocaleWindow.GetCharacters]"
					visible = "[GreaterThan_int32( GetDataModelSize( ActivityLocaleWindow.GetCharacters ), '(int32)3' )]"

					addcolumn = 220
					addrow = 320
					maxhorizontalslots = 4
					flipdirection = yes
					datamodel_wrap = 4

					item = {
						widget = {
							size = { 220 320 }

							allow_outside = no

							portrait_shoulders = {
								parentanchor = center
								position = { 0 34 }
								allow_outside = yes
								datacontext = "[ActivityWindowCharacter.GetCharacter]"

								blockoverride "portrait_texture"
								{
									size = { 400 280 }
									portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', ActivityWindowCharacter.GetAnimation, PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"

									tooltip_offset = { 500 -900 }
									using = tooltip_below
								}
							}

							text_label_center = {
								name = "label"
								parentanchor = bottom|hcenter
								text = "[ActivityWindowCharacter.GetLabel]"
							}
						}
					}
				}


				expand = {}
			}
		}
	}
}
