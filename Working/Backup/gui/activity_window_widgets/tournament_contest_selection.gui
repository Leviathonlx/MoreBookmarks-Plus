widget = {
	name = "tournament_contest_selection"
	visible = "[ActivityPlanner.IsPlanningStage( 'phases' )]"
	size = { 100% 100% }

	using = Activity_Planner_Widget

	background = {
		using = Background_Area_Dark
		margin = { 10 10 }
		alpha = 0.5
	}

	state = {
		name = _show
		using = Animation_FadeIn_Quick

		on_start = "[ActivityPlanner.AccessPhasePageData.SetShownItems( '(int32)4')]"
		on_start = "[ActivityPlanner.AccessPhasePageData.ResetShown( GetDataModelSize( ActivityType.GetPickablePhases ) )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
	}

	widget = {
		size = { 100% 100% }

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				expand = {
					minimumsize = { 0 130 }
				}

				hbox = {
					name = "contest_selection_middle"
					allow_outside = yes
					layoutpolicy_horizontal = expanding

					margin = { 16 0 }
					margin_left = -316
					spacing = 16

					background = {
						using = Background_Area_ExtraDark

						margin = { 16 0 }
						margin_top = 180
						margin_bottom = 220

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
							blend_mode = alphamultiply
						}
					}

					expand = {}

					vbox = {
						layoutpolicy_vertical = expanding

						margin = { 16 0 }
						spacing = 8

						expand = {}

						text_single = {
							layoutpolicy_horizontal = expanding

							text = contest_planner_selection_header
							align = left
							default_format = "#T"
							max_width = 280
							using = Font_Size_Medium
						}

						text_multi = {
							layoutpolicy_horizontal = expanding

							text = contest_planner_selection_description
							autoresize = yes
							max_width = 280
						}

						expand = {}
					}

					vbox = {
						allow_outside = yes

						hbox = {
							allow_outside = yes
							spacing = 8

							hbox = {
								name = "contest_active_slots"
								datamodel = "[ActivityPlanner.AccessPlayerPickedPhases]"
								spacing = 8

								allow_outside = yes

								item = {
									tournament_contest_slot_widget = { }
								}
							}

							hbox = {
								name = "contest_empty_slots"
								spacing = 8

								tournament_empty_contest_slot_widget = {
									visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)1' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)1' ) )]"
								}

								tournament_empty_contest_slot_widget = {
									visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)2' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)2' ) )]"
								}

								tournament_empty_contest_slot_widget = {
									visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)3' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)3' ) )]"
								}

								tournament_empty_contest_slot_widget = {
									visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)4' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)4' ) )]"
								}

								tournament_empty_contest_slot_widget = {
									visible = "[And( LessThan_int32( GetDataModelSize( ActivityPlanner.AccessPlayerPickedPhases ), '(int32)5' ), GreaterThanOrEqualTo_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)5' ) )]"
								}
							}

							hbox = {
								name = "contest_unavailable_slots"
								spacing = 8

								tournament_unavailable_contest_slot = {
									visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)2' )]"
								}

								tournament_unavailable_contest_slot = {
									visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)3' )]"
								}

								tournament_unavailable_contest_slot = {
									visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)4' )]"
								}

								tournament_unavailable_contest_slot = {
									visible = "[LessThan_int32( ActivityPlanner.GetActivityType.CalcNumPickablePhasesAllowed( GetPlayer ), '(int32)5' )]"
								}
							}
						}

						vbox_available_contests = {
							visible = "[ActivityPlanner.IsEditingAnyPhase]"
						}
					}

					expand = {}
				}

				expand = {
					visible = "[Not( ActivityPlanner.IsEditingAnyPhase )]"
					maximumsize = { 0 80 }
				}

				expand = {
					visible = "[ActivityPlanner.IsEditingAnyPhase]"
					maximumsize = { 0 32 }
				}

				vbox = {
					name = "contest_selection_bottom"
					spacing = 4
					#margin = { 0 26 }

					background = {
						texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
						spriteType = Corneredtiled
						spriteborder = { 18 18 }
						texture_density = 2

						margin = { 64 0 }
						margin_top = 22
						margin_bottom = 28

						modify_texture = {
							name = "overlay"
							texture = "gfx/interface/component_overlay/overlay_effect.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
						}
					}

					cost_breakdown_vbox = {
						datacontext = "[ActivityPlanner.AccessTotalPhaseCostBreakdown]"
						name = "activity_cost"

						blockoverride "heading_text"
						{
							text = "contest_planner_contest_costs"
						}
					}

					button_standard_back = {
						name = "contest_selection_bottom_cancel_planning"
						text = CANCEL_BUTTON

						visible = "[Or( Not( ActivityPlanner.HasPickedPhase ), ActivityPlanner.IsFirstPickedPhase( ActivityPlanner.GetEditingPhase ) )]"

						onclick = "[ActivityPlanner.Close]"
						shortcut = "close_window"
					}

					button_standard = {
						name = "contest_selection_bottom_cancel_selection"
						text = CANCEL_BUTTON
						visible = "[And( ActivityPlanner.IsEditingAnyPhase, Not( ActivityPlanner.IsFirstPickedPhase( ActivityPlanner.GetEditingPhase ) ) )]"
						onclick = "[ActivityPlanner.RemovePhase( ActivityPlanner.AccessEditingPhase )]"
						onclick = "[ActivityPlanner.CancelEditingPhase]"
					}

					button_primary_big = {
						visible = "[And( ActivityPlanner.HasPickedPhase, Not(ActivityPlanner.IsEditingAnyPhase))]"
						text = "[SelectLocalization( ActivityPlanner.IsPlanningStage( 'options' ), 'START', 'CONTINUE' )]"
						onclick = "[ActivityPlanner.ProgressPlanningStage]"
						enabled = "[ActivityPlanner.CanProgressPlanningStage]"
						tooltip = "[ActivityPlanner.GetCanProgressPlanningStageTooltip]"
					}
				}

				expand = {}
			}
		}
	}

	widget = {
		name = "contest_selection_top"
		datacontext = "[ActivityPlanner.AccessSingleLocationPhase]"

		size = { 600 140 }

		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2

			margin = { 16 16 }

			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
				blend_mode = alphamultiply
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin = { 16 8 }

			ignoreinvisible = yes

			spacing = 8

			hbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_Dark

					margin = { 20 16 }

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding

					text = "[ActivityType.GetName]"
					align = left
				}
			}

			expand = {}

			vbox = {
				name = "contest_selection_header_change_destination"
				datacontext = "[ActivityPlanner.AccessSingleLocationPhase]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin = { 0 4 }

				# Background if you have no Type, just using regular Activity image
				background = {
					visible = "[Or( ActivityPlanner.IsPlanningStage( 'special_option_category' ), Not(ActivityPlanner.HasSelectedSpecialOption))]"

					texture = "[ActivityType.GetHeaderBackground]"
					alpha = 0.3
					fittype = centercrop

					margin = { 16 0 }
					margin_top = 4
					margin_bottom = 8

					using = Mask_Rough_Edges

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					spacing = 8

					text_single = {
						text = "TRAVEL_PLAN_DESTINATION"
						using = Font_Size_Big
						align = left|nobaseline
						default_format = "#high"
					}

					button_round = {
						onclick = "[ActivityPlanner.StartEditingPhase( PlannedActivityPhase.AccessSelf, 'destination' )]"
						tooltip = ACTIVITY_PLANNER_CHANGE_LOCATION_TT

						button_replace = {
							alwaystransparent = yes
							parentanchor = center

						}
					}

					expand = {}
				}

				expand = {}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_tertiary = {
						name = "contest_selection_header_cancel"
						text = CANCEL_BUTTON
						min_width = 300

						onclick = "[ActivityPlanner.Close]"
						shortcut = "close_window"

					}

					expand = {}
				}
			}
		}
	}
}

types ActivityPlannerTypes
{
	type tournamnet_contest_slot = widget {
		size = { 230 550 }
	}

	type tournament_contest_slot_widget = tournamnet_contest_slot
	{
		allow_outside = yes

		icon = {
			parentanchor = center
			size = { 226 546 }

			texture = "gfx/interface/window_activities/tournament/contest_selection_active_bg.dds"
		}

		widget = {
			visible = "[PlannedActivityPhase.HasPhase]"
			parentanchor = hcenter
			size = { 226 350 }
			scissor = yes

			icon = {
				size = { 226 546 }
				texture = "[PlannedActivityPhase.GetPhase.GetIllustration]"
				parentanchor = top|hcenter
				position = { 0 2 }
			}
		}

		icon = {
			visible = "[PlannedActivityPhase.HasPhase]"
			parentanchor = center
			size = { 226 178 }
			texture = "gfx/interface/window_activities/tournament/contest_selection_active_blue_bg.dds"
			position = { 0 136}
		}

		icon = {
			parentanchor = center
			size = { 226 546}

			texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
			spriteType = Corneredtiled
			spriteborder = { 5 5 }
		}

		button_standard_clean = {
			size = { 100% 100% }

			allow_outside = yes

			alwaystransparent = "[PlannedActivityPhase.HasPhase]"

			# Contest Icon
			widget = {
				parentanchor = top|hcenter
				position = { 0 -28}
				size = { 60 60 }

				# Background
				highlight_icon = {
					parentanchor = top|hcenter
					size = { 60 60 }

					texture = "gfx/interface/window_activities/tournament/contest_selection_inactive_icon_bg.dds"

					modify_texture = {
						color = { 0.3 0.3 0.4 1 }
						blend_mode = multiply
						alpha = 0.5
					}
				}

				icon_flat_standard = {
					visible = "[PlannedActivityPhase.HasPhase]"
					parentanchor = center
					size = { 60 60 }

					texture = "[PlannedActivityPhase.GetPhase.GetIcon]"

					blockoverride "master_color_frame" {
						frame = 1
					}
				}
			}

			widget = {
				visible = "[Not( PlannedActivityPhase.HasPhase )]"
				parentanchor = center
				position = { 0 30 }
				size = { 230 250 }

				vbox = {
					layoutpolicy_vertical = expanding
					spacing = 4

					button_round = {
						size = { 50 50 }

						button_plus = {
							name = "select_contest"
							parentanchor = center
							onclick = "[ActivityPlanner.StartEditingPhase( PlannedActivityPhase.AccessSelf, 'phase' )]"
							size = { 40 40 }

							tooltip = contest_planner_add_contest_tooltip
						}
					}

					text_single = {
						text = contest_planner_empty_slot
						using = Font_Size_Big
						max_width = 190
					}

					text_multi = {
						text = contest_planner_empty_slot_picking_desc
						autoresize = yes
						max_width = 190
						align = center
					}

					expand = {}
				}
			}

			widget = {
				name = "active_contest"
				visible = "[PlannedActivityPhase.HasPhase]"
				datacontext = "[PlannedActivityPhase.GetPhase]"
				size = { 100% 100% }
				allow_outside = yes

				tooltip = contest_planner_contest_selected_tooltip

				widget = {
					name = "contest_info"
					layoutpolicy_horizontal = expanding
					parentanchor = bottom|hcenter
					size = { 230 260 }

					text_single = {
						name = "contest_type"
						text = "[PlannedActivityPhase.GetPhase.GetName]"
						parentanchor = top|hcenter
						position = { 0 48 }
						using = Font_Size_Big
						default_format = "#high"
					}

					text_single = {
						visible = "[IsContestFormatRace]"
						parentanchor = hcenter
						position = { 0 92 }
						text = tournament_contest_format_race
						max_width = 220
					}

					text_single = {
						visible = "[IsContestFormatVersus]"
						parentanchor = hcenter
						position = { 0 92 }
						text = tournament_contest_format_versus
						max_width = 220
					}

					text_single = {
						visible = "[IsContestFormatTurn]"
						parentanchor = hcenter
						position = { 0 92 }
						text = tournament_contest_formaty_turn
						max_width = 220
					}

					text_single = {
						visible = "[IsContestFormatTeam]"
						parentanchor = hcenter
						position = { 0 92 }
						text = tournament_contest_format_team
						max_width = 220
					}

					widget = {
						position = { 0 122 }
						size = { 230 90 }
						allow_outside = yes

						alpha = "[Select_float( Not(ActivityPlanner.IsCharacterInPlanningSubset( PlannedActivityPhase.Self, GetPlayer, 'spectator')), '(float)1.0', '(float)0.4' )]"

						text_label_center = {
							parentanchor = top|hcenter
							text = contest_planner_selected_slot_xp_gain
							allow_outside = yes
						}

						hbox_contest_type_affinities_container = {
							datacontext = "[PlannedActivityPhase.GetPhase]"
							layoutpolicy_horizontal = expanding
							parentanchor = bottom|hcenter
							allow_outside = yes

							blockoverride "icon_sizes"
							{
								size = { 30 30 }
							}
						}
					}

					widget = {
						name = "participation"
						parentanchor = bottom|hcenter
						position = { 0 -12}
						size = { 200 30 }
						allow_outside = yes
						datacontext = "[PlannedActivityPhase.GetPhase]"

						widget = {
							name = "auto_participate_if_eligible"
							visible = "[Or( And( Not( IsMartialContest ), IsPlayerAvailableToCompeteNonMartial ), And( IsMartialContest, And( CanPlayerCompeteInMartialContest( GetPlayer ), IsPlayerAvailableToCompeteMartial ) ) )]"

							visible_at_creation = no # required to make sure we trigger the '_show' state

							state = {
								name = _show
								on_start = "[ActivityPlanner.RemoveGuestFromPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'spectator')]"
								on_start = "[ActivityPlanner.AddGuestToPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'contestant')]"
							}
						}

						widget = {
							name = "auto_spectate_if_not_eligible"
							visible = "[Not( Or( And( Not( IsMartialContest ), IsPlayerAvailableToCompeteNonMartial ), And( IsMartialContest, And( CanPlayerCompeteInMartialContest( GetPlayer ), IsPlayerAvailableToCompeteMartial ) ) ) )]"

							visible_at_creation = no # required to make sure we trigger the '_show' state

							state = {
								name = _show
								on_start = "[ActivityPlanner.RemoveGuestFromPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'contestant')]"
								on_start = "[ActivityPlanner.AddGuestToPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'spectator')]"
							}
						}

						hbox = {
							allow_outside = yes

							enabled = "[Or( And( Not( IsMartialContest ), IsPlayerAvailableToCompeteNonMartial ), And( IsMartialContest, And( CanPlayerCompeteInMartialContest( GetPlayer ), IsPlayerAvailableToCompeteMartial ) ) )]"

							tooltip = contest_planner_contest_cannot_participate

							button_contest_spectate = {
								size = { 100 30 }

								alwaystransparent = "[ActivityPlanner.IsCharacterInPlanningSubset( PlannedActivityPhase.Self, GetPlayer, 'spectator')]"
								down = "[ActivityPlanner.IsCharacterInPlanningSubset( PlannedActivityPhase.Self, GetPlayer, 'spectator')]"
								onclick = "[ActivityPlanner.AddGuestToPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'spectator')]"
								onclick = "[ActivityPlanner.RemoveGuestFromPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'contestant')]"

								tooltip_visible = "[Or( And( Not( IsMartialContest ), IsPlayerAvailableToCompeteNonMartial ), And( IsMartialContest, And( CanPlayerCompeteInMartialContest( GetPlayer ), IsPlayerAvailableToCompeteMartial ) ) )]"
							}

							button_contest_participate = {
								size = { 100 30 }

								alwaystransparent = "[Not(ActivityPlanner.IsCharacterInPlanningSubset( PlannedActivityPhase.Self, GetPlayer, 'spectator'))]"
								down = "[Not(ActivityPlanner.IsCharacterInPlanningSubset( PlannedActivityPhase.Self, GetPlayer, 'spectator'))]"
								onclick = "[ActivityPlanner.RemoveGuestFromPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'spectator')]"
								onclick = "[ActivityPlanner.AddGuestToPlanningGuestSubset(PlannedActivityPhase.AccessSelf, GetPlayer, 'contestant')]"

								tooltip_visible = "[Or( And( Not( IsMartialContest ), IsPlayerAvailableToCompeteNonMartial ), And( IsMartialContest, And( CanPlayerCompeteInMartialContest( GetPlayer ), IsPlayerAvailableToCompeteMartial ) ) )]"
							}
						}
					}
				}
			}
		}

		button_round = {
			visible = "[Not( ActivityPlanner.IsEditingAnyPhase )]"
			parentanchor = bottom|hcenter
			position = { 0 60 }
			size = { 50 50 }

			datacontext = "[PlannedActivityPhase.GetPhase]"

			onclick = "[ActivityPlanner.RemovePhase( PlannedActivityPhase.AccessSelf )]"

			tooltip = contest_planner_remove_contest_tooltip

			button_cancel = {
				name = "remove_contest"
				parentanchor = center
				size = { 40 40 }
				alwaystransparent = yes
			}
		}

		widget = {
			name = "planning_contest"
			visible = "[Not( PlannedActivityPhase.HasPhase )]"
			size = { 100% 100% }

			widget = {
				size = { 218 536 }
				parentanchor = center
				alpha = 0

				background = {
					using = Background_Frame_Gold

					modify_texture = {
						texture = "gfx/interface/window_activities/tournament/mask_corners_contest_selection.dds"
						blend_mode = alphamultiply
					}
				}

				state = {
					name = a
					next = b
					trigger_on_create = yes
					alpha = 1
					duration = 1

					using = Animation_Curve_Default
				}

				state = {
					name = b
					next = a
					alpha = 0
					duration = 1

					using = Animation_Curve_Default
				}
			}
		}
	}

	type tournament_empty_contest_slot_widget = tournamnet_contest_slot
	{
		icon = {
			parentanchor = center
			size = { 226 546 }

			texture = "gfx/interface/window_activities/tournament/contest_selection_active_bg.dds"
		}

		icon = {
			parentanchor = center
			size = { 226 546}

			texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
			spriteType = Corneredtiled
			spriteborder = { 5 5 }
		}

		button_standard_clean = {
			size = { 100% 100% }
			onclick = "[ActivityPlanner.AddPhase( 'phase' )]"

			tooltip = contest_planner_add_contest_tooltip

			# Contest Icon
			widget = {
				parentanchor = top|hcenter
				position = { 0 -28}
				size = { 60 60 }

				# Background
				highlight_icon = {
					parentanchor = top|hcenter
					size = { 60 60 }

					texture = "gfx/interface/window_activities/tournament/contest_selection_inactive_icon_bg.dds"

					modify_texture = {
						blend_mode = multiply
						alpha = 0.7
					}
				}
			}

			widget = {
				name = "empty_contest"
				parentanchor = center
				position = { 0 30 }
				size = { 230 250 }

				alwaystransparent = yes

				vbox = {
					layoutpolicy_vertical = expanding
					spacing = 4

					button_round = {
						size = { 50 50 }
						alwaystransparent = yes

						button_plus = {
							name = "select_contest"
							size = { 40 40 }
							parentanchor = center
							alwaystransparent = yes
						}
					}

					text_single = {
						text = contest_planner_empty_slot
						using = Font_Size_Big
						max_width = 190
						alwaystransparent = yes
					}

					text_multi = {
						text = contest_planner_empty_slot_desc
						autoresize = yes
						max_width = 190
						align = center
						alwaystransparent = yes
					}

					expand = {}
				}
			}
		}
	}

	type tournament_unavailable_contest_slot = tournamnet_contest_slot
	{
		enabled = no

		icon = {
			parentanchor = center
			size = { 226 546 }

			texture = "gfx/interface/window_activities/tournament/contest_selection_active_bg.dds"
			alpha = 0.5
		}

		icon = {
			parentanchor = center
			size = { 226 546}

			texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
			spriteType = Corneredtiled
			spriteborder = { 5 5 }
		}

		button_standard_clean = {
			size = { 100% 100% }

			blockoverride "disabled"  {}

			# Contest Icon
			widget = {
				parentanchor = top|hcenter
				position = { 0 -28}
				size = { 60 60 }

				# Background
				highlight_icon = {
					parentanchor = top|hcenter
					size = { 60 60 }

					texture = "gfx/interface/window_activities/tournament/contest_selection_inactive_icon_bg.dds"

					modify_texture = {
						color = { 0.3 0.3 0.4 1 }
						blend_mode = multiply
						alpha = 0.7
					}
				}
			}

			widget = {
				name = "unavailable_contest"
				parentanchor = center
				position = { 0 30 }
				size = { 230 250 }

				vbox = {
					layoutpolicy_vertical = expanding
					spacing = 4

					button_round = {
						size = { 50 50 }

						icon_flat_standard = {
							texture = "gfx/interface/window_activities/tournament/contest_selection_locked_icon.dds"
							parentanchor = center
							size = { 40 40 }
						}
					}

					text_single = {
						text = contest_planner_unavailable_slot
						using = Font_Size_Big
						max_width = 190
					}

					text_multi = {
						text = contest_planner_unavailable_slot_desc
						autoresize = yes
						max_width = 190
						align = center
						default_format = "#weak"
					}

					expand = {}
				}
			}
		}
	}

	type button_select_contest = button_standard_clean {
		size = { 230 140 }

		visible = "[ActivityPhase.IsShown( GetPlayer, ActivityPlanner.GetSelectedSpecialOption )]"
		enabled = "[PlannerCanPickActivityPhase( ActivityPhase, ActivityPlanner.GetSingleLocationPhase.GetLocation )]"

		onclick = "[ActivityPlanner.SelectPhaseType( ActivityPhase.Self )]"

		tooltip = contest_planner_contest_tooltip

		icon = {
			parentanchor = center
			size = { 226 136 }
			texture = "[ActivityPhase.GetIllustrationSmall]"
		}

		icon = {
			parentanchor = center
			size = { 226 136}

			texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
			spriteType = Corneredtiled
			spriteborder = { 5 5 }
		}

		widget = {
			parentanchor = right|top
			position = { -4 4 }
			size = { 40 -1 }
			allow_outside = yes

			vbox_contest_type_affinities_container = {}
		}

		widget = {
			parentanchor = bottom|hcenter
			position = { 0 -4 }
			size = { 230 50 }

			background = {
				using = Background_Area_ExtraDark

				margin = { 0 4 }
			}

			text_single = {
				parentanchor = hcenter
				text = "[ActivityPhase.GetName]"
				max_width = 220
			}

			widget = {
				parentanchor = bottom|hcenter
				size = { 230 30 }

				hbox = {
					margin_right = 8

					hbox_character_archery_contest_aptitude = {
						visible = "[IsBowContest]"
						margin = { 2 2 }
					}

					hbox_character_foot_contest_aptitude = {
						visible = "[IsFootContest]"
						margin = { 2 2 }
					}

					hbox_character_horse_contest_aptitude = {
						visible = "[IsHorseContest]"
						margin = { 2 2 }
					}

					hbox_character_wit_contest_aptitude = {
						visible = "[IsWitContest]"
						margin = { 2 2 }
					}
				}
			}
		}
	}

	type vbox_available_contests = vbox {
		datacontext = "[ActivityPlanner.AccessPhasePageData]"
		margin_top = 16

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_bottom = 8

			divider_light = {
				layoutpolicy_horizontal = expanding

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
					blend_mode = alphamultiply
				}
			}
		}

		hbox = {
			spacing = 16

			button_round = {
				size = { 50 50 }

				enabled = "[PagedContainerData.CanShowPreviousPage]"
				onclick = "[PagedContainerData.ShowPreviousPage]"

				button_back = {
					parentanchor = center
					position = { -2 0 }

					alwaystransparent = yes
				}
			}

			fixedgridbox = {
				name = "activity_type_phases"
				datamodel = "[PagedContainerData.DataModelPage( ActivityType.GetPickablePhases )]"

				visible = "[ActivityPlanner.IsEditingAnyPhase]"

				addcolumn = 240
				addrow = 150
				flipdirection = yes

				item = {
					widget_available_contests_item = { }
				}
			}

			button_round = {
				size = { 50 50 }

				enabled = "[PagedContainerData.CanShowNextPage( GetDataModelSize( ActivityType.GetPickablePhases ) )]"
				onclick = "[PagedContainerData.ShowNextPage( GetDataModelSize(ActivityType.GetPickablePhases) )]"

				button_forward = {
					parentanchor = center
					position = { 2 0 }

					alwaystransparent = yes
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 16

			divider_light = {
				layoutpolicy_horizontal = expanding

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}

			text_single = {
				align = nobaseline
				raw_text = "[PagedContainerData.GetCurrentPage] / [PagedContainerData.GetMaxPage( GetDataModelSize( ActivityType.GetPickablePhases ) )]"
			}

			divider_light = {
				layoutpolicy_horizontal = expanding

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}
		}
	}

	type widget_available_contests_item = widget {
		size = { 230 150 }

		vbox = {
			layoutpolicy_vertical = expanding
			spacing = 4

			blockoverride "contest_aptitude_level_size"
			{
				size = { 12 12 }
			}

			button_select_contest = {
				name = "activity_phase"
			}
		}
	}
}
