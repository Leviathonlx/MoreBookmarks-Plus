types Miscelaneous
{
	########################################################
	##### Types used in several placer, non-categorized ####
	########################################################

	## Use this to show default actions on a county (fabricate claim action / fabricate claim progress / declare war )
	type container_county_claim_action = container {
		name = "county_action"
		visible = "[Not(County.GetCount.IsLocalPlayer)]"

		button_standard = {
			name = "fabricate_claim"
			datacontext = "[GetPlayer.GetCouncillorPosition( 'councillor_court_chaplain' )]"
			parentanchor = left
			position = { 0 3 }
			size = { 170 25 }

			text = "COUNCIL_TASK_FABRICATE_CLAIM"
			using = tooltip_ne
			onclick = "[GetPlayer.StartCouncilTaskIn('task_fabricate_claim', County.GetCapital)]"
			enabled = "[GetPlayer.IsCouncilTaskValid('task_fabricate_claim', County.GetCapital)]"
			visible = "[And(Not(GetPlayer.HasCouncillorWithTaskIn('task_fabricate_claim', County.GetCapital)),Not(GetPlayer.HasClaimOnTitle(County.GetTitle)))]"
			tooltip = "[GetPlayer.GetStartCouncilTaskInTooltip('task_fabricate_claim', County.GetCapital)]"
		}

		container = {
			datacontext = "[GetPlayer.GetCouncillorPosition( 'councillor_court_chaplain' )]"
			visible = "[GetPlayer.HasCouncillorWithTaskIn('task_fabricate_claim', County.GetCapital)]"
			parentanchor = left

			progressbar_standard = {
				name = "progress"
				size = { 170 25 }
				value = "[ActiveCouncilTask.GetProgressFloat]"
				tooltipwidget = {
					council_task_progress_breakdown_widget = {}
				}
				using = tooltip_ne
			}

			text_single = {
				parentanchor = center
				text = "COUNCIL_TASK_FABRICATING_CLAIM"
				default_format = "#high"
			}
		}

		text_single = {
			visible = "[GetPlayer.HasClaimOnTitle(County.GetTitle)]"
			text = "COA_HIGHLIGHT_CLAIM"
			default_format = "#D"
		}
	}

	type skill_icon_label = flowcontainer {
		margin_left = 10
		margin_right = 15
		spacing = 4

		background = {
			name = "skill_icon_bg"
			texture = "gfx/interface/window_character/character_view_skills_bg.dds"
			framesize = { 70 26 }

			block "bg"
			{
				frame = "[SkillItem.GetFrame]"
			}
		}

		block "tooltip"
		{
			tooltip = "SKILL_ITEM_TOOLTIP"
		}

		icon = {
			name = "skill_icon"
			texture = "gfx/interface/icons/icon_skills.dds"
			framesize = { 60 60 }

			block "icon"
			{
				frame = "[SkillItem.GetFrame]"
			}

			block "icon_size"
			{
				size = { 30 30 }
			}

		}

		text_single = {
			name = "skill_value"
			parentanchor = vcenter
			align = nobaseline
			default_format = "#high"

			block "font_size"
			{
				using = Font_Size_Medium

			}

			block "value"
			{
				text = "[SkillItem.GetValue]"
			}
		}
	}

	type skill_icon_grid = dynamicgridbox
	{
		flipdirection = yes
		datamodel_wrap = 6

		item = {
			skill_icon_label = {}
		}
	}

	type skill_sort_icon = button {
		name = "skill_icon"
		texture = "gfx/interface/icons/icon_skills.dds"
		size = { 32 32 }
		framesize = { 60 60 }
		using = tooltip_above
		block "position"
		{
			position = { 0 0 }
		}
		block "icon"
		{
			frame = 1
		}
	}


	type strength_balance = hbox {

		block "StrengthBalanceVisible"
		{
			visible = "[GuiMilitaryStrength.ShouldShow]"
		}

		icon = {
			name = "icon_strength_balance"
			texture = "gfx/interface/icons/icon_strength_balance.dds"
			size = { 60 60 }
			framesize = { 60 60 }
			block "StrengthBalanceFrame"
			{
				frame = "[GuiMilitaryStrength.GetFrame]"
			}
		}

		widget = {
			size = { 140 45 }

			background = {
				using = Background_Area
				name = "text_bg"
				margin = { 15 5 }
			}

			vbox = {

				vbox = {
					hbox = {
						spacing = 10
						text_single = {
							name = "total_strength"
							align = nobaseline
							block "StrengthBalanceTotalStrength"
							{
								text = "STRENGTH_COMPARISON_TOTAL_STRENGTH"
							}
						}

						text_single = {
							name = "number_of_allies"
							align = nobaseline
							default_format = "#high"

							block "StrengthBalanceAllies"
							{
								text = "STRENGTH_COMPARISON_ALLIES"
							}
						}
						expand = {}
					}

					hbox = {
						text_single = {
							name = "comparison_text"
							align = nobaseline
							text = "[GuiMilitaryStrength.GetRatioName]"
							default_format = "#high"
						}
						expand = {}
					}
				}
			}
		}

		block "StrengthBalanceTooltip"
		{
			tooltip = "[GuiMilitaryStrength.GetRatioDescription]"
		}
		using = tooltip_se
	}

	type button_expand_fold_out = button_expand
	{
		block "button_expand"
		{
			frame = "[BoolTo1And2( PdxGuiFoldOut.IsUnfolded )]"
		}
		block "onclick"
		{
			onclick = "[PdxGuiFoldOut.Toggle]"
		}
	}

	### Brief: hbox_expandable_toggle_field
	# Creates a field that governs the state of a collapsible widget.
	#
	# Use in a widget that a PdxGuiFoldOut set, by BindFoldOutContext or the Create_Resetting_Fold_Out template
	#
	# Has the following blocks:
	#
	#	"onclick"
	#		All onclick events associated with the toggle field. Usage: 
	#		Defaults to toggling the PdxGuiFoldOut context
	#			
	#	"button_expand"	
	#		Additional attributes to give the expand button for frame selection.
	#		Defaults to setting the frame based on the PdxGuiFoldOut context
	#	
	#	"text"
	#		The text header for the field. Usage: 
	#			text = SOME_LOC_KEY
	#
	type hbox_expandable_toggle_field = hbox {
		layoutpolicy_horizontal = expanding
		margin = { 10 5 }

		background = {
			using = Background_Area_Dark
			alpha = 0.5
		}

		button_normal = {
			layoutpolicy_horizontal = expanding
			size = { 0 25 }

			block "onclick" 
			{
				onclick = "[PdxGuiFoldOut.Toggle]"
			}

			hbox = {
				ignoreinvisible = yes
				spacing = 5

				button_expand_fold_out = {}

				text_single = {
					layoutpolicy_horizontal = expanding
					align = nobaseline
					alwaystransparent = yes

					block "text" {}
				}
			}
		}
	}

	type hbox_tab_buttons = hbox
	{
		layoutpolicy_horizontal = expanding

		datamodel = "[PdxGuiTabs.GetTabItems]"

		item = {
			button_tab = {
				layoutpolicy_horizontal = expanding
				
				block "tab_name"
				{
					raw_text = "#D [PdxGuiTabItem.GetKey]#!"
				}

				onclick = "[PdxGuiTabs.SetTab( PdxGuiTabItem.Self )]"
				down = "[PdxGuiTabs.IsTabItemSet( PdxGuiTabItem.Self )]"
			}
		}
	}

	### DEBUG
	type error_horse = container {
		name = "debug_info_horse"
		using = Animation_ShowHide_Quick

		button = {
			name = "error_button"
			visible = "[HasErrors]"
			position = { 0 2 }

			using = Animation_ShowHide_Standard

			tooltip = "[ErrorTooltip]"
			onclick = "[OpenErrorLog]"
			onrightclick = "[ClearErrorLog]"
			button_ignore = none
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

			texture = "gfx/interface/_debug/errorhoof.dds"
			framesize = { 112 112 }
			size = { 80 80 }
			frame = "[GetErrorHoofFrame]"

			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/Error/Errorhof"
				}
			}
		}

		flowcontainer = {
			position = { 100 5 }
			direction = vertical
			ignoreinvisible = yes
			spacing = 5

			## Error count
			text_single = {
				name = "error_text"
				visible = "[HasErrors]"

				raw_text = "Errors: [NumberOrErrors]"
				max_width = 300

				using = Animation_ShowHide_Standard

				background = {
					using = Text_Label_Background
					shaderfile = "gfx/FX/pdxgui_default.shader"
					margin = { 17 3 }
				}
			}

			## Current FPS
			text_single = {
				name = "debug_current_fps"
				visible = "[And( InDebugMode, GreaterThanOrEqualTo_float( GetCurrentFps, '(float)30' ) )]"

				raw_text = "FPS: [GetCurrentFps|0]"
				max_width = 300

				background = {
					using = Text_Label_Background
					margin = { 17 3 }
				}
			}

			## Low FPS Warning
			text_single = {
				name = "low_fps_warning"
				visible = "[LessThan_float( GetCurrentFps, '(float)30' )]"

				raw_text = "@warning_icon! Low FPS: [GetCurrentFps|0]"
				raw_tooltip = "Current FPS is under 30!"
				default_format = "#X"

				max_width = 300

				background = {
					using = Text_Label_Background
					margin = { 17 3 }
				}
			}
		}
	}

	type placeholder_art = debug_square {
		margin_widget = {
			size = { 100% 100% }
			margin = { 4 4 }

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/_debug/placeholder.dds"
				spriteType = Corneredtiled
				color = { 0.7 0.7 0.7 1 }
			}
		}
	}

	type placeholder_art_button = button_normal {
		size = { 150 150 }
		texture = "gfx/interface/_debug/placeholder.dds"
		spriteType = Corneredtiled
		color = { 0.7 0.7 0.7 1 }

		margin_widget = {
			size = { 100% 100% }
			margin = { 5 5 }

			debug_square = {
				size = { 100% 100% }
			}
		}
	}

	type debug_square = icon {
		size = { 150 150 }
		texture = "gfx/interface/_debug/pink_square_chill.png"
		spriteType = Corneredtiled
		spriteborder = { 2 2 }
	}

	type debug_placeholder = icon {
		size = { 50 50 }
		texture = "gfx/interface/_debug/placeholder_02.png"
		spriteType = Corneredstretched
		spriteborder = { 2 2 }
	}

	type debug_button = button_icon {
		size = { 150 150 }
		texture = "gfx/interface/_debug/pink_square_chill.png"
		spriteType = Corneredtiled
		spriteborder = { 2 2 }
	}
}

template debug_square
{
	background = {
		texture = "gfx/interface/_debug/pink_square_chill.png"
		spriteType = Corneredtiled
		spriteborder = { 1 1 }
		alpha = 0.5
	}
}

template Create_Resetting_Fold_Out
{
	oncreate = "[BindFoldOutContext]"
	oncreate = "[PdxGuiFoldOut.SetShownBehavior( 'unfolded' )]"
}
