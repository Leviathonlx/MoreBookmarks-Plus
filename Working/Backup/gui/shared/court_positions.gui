types CourtPositionItems
{
	### Brief: widget_hired_court_position_card
	# Standalone hired court position card that is not part of a list. It will
	# not cache any of the values used for various checks, so it should never
	# be used in a list of items. At most it should be used in a list of single
	# court positions where the type itself can hire multiple employees.
	#
	# Expects the following datacontexts:
	#	CourtPosition - The Court Position the card represents.
	#
	type widget_hired_court_position_card = vbox_generic_object_card
	{
		blockoverride "card_background"
		{
			background = {
				using = Background_Area_Light
				margin_top = 2
				alpha = 0.6
			}

			background = {
				using = Background_Frame
				margin_top = 2
				margin_bottom = 2
				margin_right = -3
			}
		}

		blockoverride "header_properties"
		{
			datacontext = "[CourtPosition.GetEmployee]"

			using = GenericObjectCardDefaultHeaderProperites
		}

		blockoverride "header_background_color"
		{
			using = CourtPositionHeaderBackgroundColors
		}

		blockoverride "header_top_tooltip"
		{
			tooltipwidget = {
				court_position_type_tooltip = { }
			}
			using = tooltip_ws
		}

		blockoverride "header_top_contents"
		{
			widget = {
				parentanchor = left
				position = { 0 -16 }

				hbox = {
					spacing = 5
					layoutpolicy_horizontal = expanding

					icon = {
						texture = "[CourtPositionType.GetIcon]"
						size = { 34 34 }
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[CourtPositionType.GetNameNoTooltip]"
							default_format = "#high"
							using = Font_Size_Medium
							align = nobaseline

						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Character.GetUINameNoTooltip]"
							align = nobaseline
							max_width = 220
						}
					}
					text_single = {
						name = "ai_score"
						visible = "[AIWatchWindowsEnabled]"
						text = "[CourtPosition.GetAICandidateScore]"
						default_format = "#D"
						align = nobaseline
					}

					expand = {}
				}
			}
		}

		blockoverride "header_post_contents"
		{
			button_change = {
				onclick = "[CourtPosition.OpenReplaceWindow]"
				tooltip = "COURT_POSITION_REPLACE"
				using = tooltip_ne
			}

			button_cancel = {
				onclick = "[CourtPosition.OpenRevokeConfirmation]"
				tooltip = "COURT_POSITION_REVOKE"
				using = tooltip_ne
			}

			icon = {
				name = "powerful_agent_warning"
				visible = "[CourtPositionType.IsPowerfulAgent]"
				size = { 30 30 }
				texture = "gfx/interface/icons/symbols/icon_alert.dds"
				tooltip = "COURT_POSITION_POWERFUL_AGENT"
				using = tooltip_ne
			}

			spacer = {
				size = { 5 0 }
			}

			text_single = {
				default_format = "#high"
				text = "[CourtPosition.GetSalaryText]"
				tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
				using = tooltip_ne
			}
			spacer = {
				size = { 5 0 }
			}
		}

		blockoverride "card_contents"
		{
			datacontext = "[CourtPosition.GetEmployee]"

			vbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					name = "portrait_and_effect"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					margin = { 8 4 }
					margin_bottom = 4

					portrait_head_small = { }

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							margin = { 8 4 }

							background = {
								using = Background_Area
							}

							court_position_aptitude_text = {
								name = "aptitude"
								layoutpolicy_horizontal = expanding
							}
							expand = {}

							vbox = {
								text_single = {
									name = "opinion_bonus"
									text = "COURT_POSITION_OPINION_BONUS"
									align = nobaseline
								}
								text_single = {
									default_format = "#weak"
									text = "[CourtPosition.GetTimeOfService]"
									align = nobaseline
									max_width = 160
								}
							}
						}
						
						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								name = "employer_bonuses"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 8 4 }
								minimumsize = { 340 50 }
								maximumsize = { 440 150 }
								autoresize = yes

								align = top|left|nobaseline
								text = "[CourtPosition.GetEmployerBonuses]"
							}

							text_multi = {
								visible = "[CourtPositionType.HasLiegeCourtModifiers]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 8 4 }
								minimumsize = { 340 50 }
								maximumsize = { 440 150 }
								autoresize = yes

								align = top|left|nobaseline
								text = "COURT_POSITION_EMPLOYER_COURT_EFFECTS"
							}
							expand = {}
						}
					}
				}

				vbox = {
					name = "tasks"
					layoutpolicy_horizontal = expanding
					visible = "[And( Not( IsDataModelEmpty( CourtPositionType.GetAllPositionTasks ) ), CourtPositionType.HasVisibleTasks( CourtPosition.GetEmployer.Self ) )]"

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 4 }

						background = {
							using = Background_Area
							margin = { -4 -2 }
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							vbox = {
								name = "task_cost"
								layoutpolicy_vertical = expanding
								margin = { 0 3 }
								minimumsize = { 72 0 }

								text_single = {
									text = "COURT_POSITION_TASK"
									align = nobaseline
									default_format = "#high"
									layoutpolicy_horizontal = expanding
								}

								text_single = {
									visible = "[CourtPosition.HasActiveTask]"
									layoutpolicy_horizontal = expanding

									text = "[CourtPosition.GetActiveTask.GetCostText( CourtPosition.GetEmployer.Self )]"
									tooltip = "[CourtPosition.GetActiveTask.GetCostBreakdown( CourtPosition.GetEmployer.Self )]"
									align = nobaseline
									max_width = 140
								}

								text_single = {
									visible = "[Not( CourtPosition.HasActiveTask )]"
									layoutpolicy_horizontal = expanding

									text = "COURT_POSITION_NO_ACTIVE_TASK_COST"
									align = nobaseline
									max_width = 140
								}
							}

							text_single = {
								visible = "[CourtPosition.GetActiveTask.IsValid]"
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								margin = { 8 4 }
								text = "[CourtPosition.GetActiveTask.GetName]"
								align = left|nobaseline
							}

							text_single = {
								visible = "[Not( CourtPosition.HasActiveTask )]"
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								margin = { 8 4 }
								text = "COURT_POSITION_NO_ACTIVE_TASK"
								align = nobaseline
								max_width = 140
							}

							expand = {}

							court_position_task_buttons_hbox = {
								datamodel = "[CourtPositionType.GetAllPositionTasks]"
							}

						}
						expand = {}
					}

					hbox = {
						visible = "[CourtPosition.GetActiveTask.IsValid]"

						layoutpolicy_horizontal = expanding
						margin_right = 9
						margin_bottom = 4

						expand = {}

						vbox = {
							layoutpolicy_horizontal = expanding
							datacontext = "[CourtPosition.GetActiveTask]"

							maximumsize = { 440 -1 }

							text_multi = {
								visible = "[CourtPositionTaskType.IsValid]"
								layoutpolicy_horizontal = expanding
								margin = { 8 4 }
								maximumsize = { 440 100 }
								autoresize = yes

								align = top|left|nobaseline
								text = "[CourtPositionTaskType.GetEmployerModifierDescription( CourtPosition.Self )]"
							}

							text_multi = {
								visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 8 4 }
								minimumsize = { 440 50 }
								maximumsize = { 440 150 }
								autoresize = yes

								align = top|left|nobaseline

								text = "COURT_POSITION_TASK_EMPLOYER_COURT_EFFECTS"
							}
						}
					}
				}
			}
		}
	}

	type court_position_aptitude_text = text_single
	{
		align = left|nobaseline

		block "background"
		{}

		text = "COURT_POSITION_aptitude_description_position"

		tooltipwidget = {
			court_position_aptitude_breakdown_tooltip = {
				datacontext = "[CourtPosition.GetAptitudeTooltip]"

				blockoverride "header_text" {
					text = COURT_POSITION_aptitude_description_position
				}

				blockoverride "modifier_list" {
					text = "[CourtPosition.GetEmployerBonuses]"
				}
			}
		}
	}

	### Brief: widget_hired_court_position_item
	# Hired court position item that is part of a list of several court
	# positions. It will cache the court position tasks that are valid for the
	# employer.
	#
	# Expects the following datacontexts:
	#	EmployedPositionItem - The EmployedPositionItem that caches information
	#		regarding this Court Position.
	#	SelectedEmptyCourtPosition - The datacontext of the empty selection,
	#		so we can clear selection if we have a empty court position
	#		selected and click to replace a hired position.
	#
	type widget_hired_court_position_item = widget_court_position_entry_base
	{
		blockoverride "cp_root"
		{
			datacontext = "[EmployedPositionItem.GetPosition]"
			datacontext = "[CourtPosition.GetEmployee]"
			datacontext = "[CourtPosition.GetPositionType]"

			size = "[Select_CVector2f( DataModelHasItems( CourtPositionType.GetTasks ), '(CVector2f)537,270', '(CVector2f)537,210!' )]"

			background = {
				using = Background_Area_Light
				margin_top = 2
				alpha = 0.6
			}

			background = {
				using = Background_Frame
				margin_top = 2
				margin_bottom = 2
				margin_right = -3
			}
		}

		blockoverride "cp_heading_top_right_insert"
		{
			button_round = {
				onclick = "[CourtPosition.OpenReplaceWindow]"
				onclick = "[SelectedEmptyCourtPosition.Clear]"
				tooltip = "COURT_POSITION_REPLACE"
				using = tooltip_ne

				size = { 30 30 }

				button_change = {
					parentanchor = center
					alwaystransparent = yes
					size = { 20 20 }
				}
			}

			button_round = {
				onclick = "[CourtPosition.OpenRevokeConfirmation]"
				tooltip = "COURT_POSITION_REVOKE"
				using = tooltip_ne

				size = { 30 30 }

				button_cancel = {
					parentanchor = center
					alwaystransparent = yes
					size = { 20 20 }
				}
			}
		}

		blockoverride "cp_salary"
		{
			text = "[CourtPosition.GetSalaryText]"
			tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
		}

		blockoverride "cp_portrait"
		{
			margin_bottom = 4

			portrait_head_small = {
			}
		}

		blockoverride "cp_ai_score"
		{
			text = "[CourtPosition.GetAICandidateScore]"
		}

		blockoverride "cp_effects"
		{
			text = "[CourtPosition.GetEmployerBonuses]"
			minimumsize = { 440 50 }
			maximumsize = { 440 150 }
			autoresize = yes
		}

		blockoverride "cp_court_effects"
		{
			text_multi = {
				visible = "[CourtPosition.GetPositionType.HasLiegeCourtModifiers]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 8 4 }
				minimumsize = { 440 50 }
				maximumsize = { 440 150 }
				autoresize = yes

				align = top|left|nobaseline

				text = "COURT_POSITION_EMPLOYER_COURT_EFFECTS"
			}
		}

		blockoverride "cp_extra_effects"
		{
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 14 6 }

				background = {
					using = Background_Area

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2

					text_single = {
						using = Font_Size_Medium
						text = "[CourtPosition.GetEmployee.GetUINameNoTooltip]"
						max_width = 220
					}

					expand = {}

					text_single = {
						name = "opinion_bonus"
						text = "COURT_POSITION_OPINION_BONUS"
						max_width = 160
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					court_position_aptitude_text = {
						name = "aptitude"
					}

					expand = {}

					text_single = {
						default_format = "#weak"
						text = "[CourtPosition.GetTimeOfService]"
						max_width = 160
					}
				}
			}
		}

		blockoverride "cp_tasks"
		{
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[And( Not( IsDataModelEmpty( CourtPositionType.GetAllPositionTasks ) ), CourtPositionType.HasVisibleTasks( GetPlayer.Self ) )]"
				minimumsize = { 0 100 }

				background = {
					using = Background_Area
					margin = { -4 -2 }
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 20 6 }


					hbox = {
						datacontext = "[EmployedPositionItem.GetPosition]"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							vbox = {

								margin = { 0 3 }

								minimumsize = { 72 0  }

								text_single = {
									text = "COURT_POSITION_TASK"
									align = nobaseline
									default_format = "#high"
									layoutpolicy_horizontal = expanding
								}
								text_single = {
									visible = "[CourtPosition.HasActiveTask]"
									layoutpolicy_horizontal = expanding

									text = "[CourtPosition.GetActiveTask.GetCostText( CourtPosition.GetEmployer.Self )]"
									tooltip = "[CourtPosition.GetActiveTask.GetCostBreakdown( CourtPosition.GetEmployer.Self )]"
									align = nobaseline
									max_width = 140
								}

								text_single = {
									visible = "[Not( CourtPosition.HasActiveTask )]"
									layoutpolicy_horizontal = expanding

									text = "COURT_POSITION_NO_ACTIVE_TASK_COST"
									align = nobaseline
									max_width = 140
								}
							}
							expand = {}
							vbox = {

								max_width = 20

								text_single = {
									visible = "[CourtPosition.GetActiveTask.IsValid]"
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									margin = { 8 4 }

									default_format = "#high"
									text = "[CourtPosition.GetActiveTask.GetName]"
									align = left|nobaseline
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									datacontext = "[CourtPosition.GetActiveTask]"

									maximumsize = { 440 -1 }

									text_multi = {
										visible = "[CourtPosition.GetActiveTask.HasEmployerModifiers]"
										layoutpolicy_horizontal = expanding
										margin = { 8 0 }
										maximumsize = { 200 100 }
										autoresize = yes

										align = top|left|nobaseline
										text = "[CourtPosition.GetActiveTask.GetEmployerModifierDescription( CourtPosition.Self )]"
									}

									text_multi = {
										visible = "[CourtPosition.GetActiveTask.HasEmployerCourtModifiers]"
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										margin = { 8 0 }
										maximumsize = { 200 150 }
										autoresize = yes

										align = top|left|nobaseline
										text = "COURT_POSITION_TASK_EMPLOYER_COURT_EFFECTS"
									}

								}

								text_single = {
									visible = "[Not( CourtPosition.HasActiveTask )]"
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									margin = { 8 4 }
									text = "COURT_POSITION_NO_ACTIVE_TASK"
									align = nobaseline
									max_width = 140
								}

							}
							expand = {}
						}
						expand = {}
						vbox = {
							expand = {}

							court_position_task_buttons_hbox = {
								datamodel = "[EmployedPositionItem.GetTasks]"
								datacontext = "[EmployedPositionItem.GetPosition]"
								datacontext = "[EmployedPositionItem.GetPosition.GetPositionType]"
							}

							expand = {layoutpolicy_vertical = expanding}

						}
					}
					expand = {}
				}

				hbox = {
					visible = "[CourtPosition.GetActiveTask.IsValid]"

					layoutpolicy_horizontal = expanding
					margin_right = 9
					margin_bottom = 4

					expand = {}
				}
			}
		}
	}

	### Brief: widget_empty_court_position_card
	# Standalone empty court position card that is not part of a list.
	type widget_empty_court_position_card = vbox_generic_object_card
	{
		blockoverride "card_background"
		{
			background = {
				visible = "[CourtPositionType.CanHirePosition( Character.Self )]"
				using = Background_Area_Dark
				using = Mask_Rough_Edges
				alpha = 0.5
				margin_top = 2
			}

			background = {
				visible = "[Not( CourtPositionType.CanHirePosition( Character.Self ) )]"
				using = Background_Frame
				alpha = 0.5
				margin_right = -3
			}
		}

		blockoverride "header_background_color"
		{
			using = CourtPositionHeaderBackgroundColors
		}

		blockoverride "header_tooltip"
		{
			tooltipwidget = {
				court_position_type_tooltip = { }
			}
			using = tooltip_ws
		}

		blockoverride "header_top_contents"
		{
			icon = {
				texture = "[CourtPositionType.GetIcon]"
				size = { 34 34 }
				parentanchor = vcenter|left
			}

			text_single = {
				margin_left = 8
				parentanchor = vcenter|left
				position = { 38 0 }

				align = nobaseline
				text = "[CourtPositionType.GetNameNoTooltip]"
				default_format = "#high"

				using = Font_Size_Medium
			}

			#### DEBUG AI SCORE ####
			text_single = {
				name = "ai_score"
				visible = "[InDebugMode]"
				parentanchor = vcenter|left
				position = { 230 0 }

				align = nobaseline
				text = "[CourtPositionType.GetHighestAiHireScore( Character.Self )]"
				default_format = "#D"
			}

			flowcontainer = {
				parentanchor = vcenter|right
				ignoreinvisible = yes
				margin_right = 16

				icon = {
					name = "powerful_agent_warning"
					visible = "[CourtPositionType.IsPowerfulAgent]"
					size = { 30 30 }
					texture = "gfx/interface/icons/symbols/icon_alert.dds"
					tooltip = "COURT_POSITION_POWERFUL_AGENT"
					using = tooltip_ne
				}

				spacer = {
					size = { 5 0 }
				}

				text_single = {
					default_format = "#high"
					text = "[CourtPositionType.GetSalaryTextFor( Character.Self )]"
					tooltip = "[CourtPositionType.GetSalaryBreakdownFor( Character.Self )]"
					using = tooltip_ne
				}
			}
		}

		blockoverride "header_bottom_properties"
		{
			visible = no
		}

		blockoverride "card_contents"
		{
			vbox = {
				name = "portrait"
				layoutpolicy_vertical = expanding
				margin_bottom = 4

				widget_empty_court_position_portrait = {
					tooltip = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_NO_ADD_TT"
					using = tooltip_ws
				}
				expand = {}
			}

			text_multi = {
				name = "employer_modifier_description"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 8 4 }

				minimumsize = { 340 50 }
				maximumsize = { 440 150 }
				autoresize = yes

				align = top|left|nobaseline
				text = "[CourtPositionType.GetEmployerModifierDescription]"
			}

			text_multi = {
				name = "liege_court_modifiers"
				visible = "[CourtPositionType.HasLiegeCourtModifiers]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 8 4 }

				minimumsize = { 340 50 }
				maximumsize = { 440 150 }
				autoresize = yes

				align = top|left|nobaseline
				text = "COURT_POSITION_TYPE_EMPLOYER_COURT_EFFECTS"
			}
		}
	}

	### Brief: widget_empty_court_position_item
	# Empty court position card that is part of a list.
	type widget_empty_court_position_item = widget_court_position_entry_base
	{
		blockoverride "cp_root"
		{
			datacontext = "[EmptyCourtPosition.GetType]"
			datacontext = "[EmptyCourtPosition.GetCourtOwner]"

			size = "[Select_CVector2f( DataModelHasItems( CourtPositionType.GetTasks ), '(CVector2f)537,200', '(CVector2f)537,200' )]"

			background = {
				visible = "[And(Not( SelectedEmptyCourtPosition.SameAs( PdxGuiWidget.GetIndexInDataModel ) ), EmptyCourtPosition.CanHirePosition)]"
				using = Background_Area_Dark
				using = Mask_Rough_Edges
				alpha = 0.5
				margin_top = 2
			}

			background = {
				visible = "[Not(EmptyCourtPosition.CanHirePosition)]"
				using = Background_Frame
				alpha = 0.5
				margin_right = -3
			}

			background = {
				visible = "[SelectedEmptyCourtPosition.SameAs( PdxGuiWidget.GetIndexInDataModel )]"
				texture = "gfx/interface/colors/white.dds"
				spriteType = Corneredtiled
				using = Color_Blue
				alpha = 0.3

				using = Mask_Rough_Edges

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
					mirror = horizontal
				}
			}
		}

		blockoverride "cp_salary"
		{
			text = "[CourtPositionType.GetSalaryTextFor( Character.Self )]"
			tooltip = "[CourtPositionType.GetSalaryBreakdownFor( Character.Self )]"
		}

		blockoverride "cp_portrait"
		{
			margin_bottom = 10

			widget_empty_list_court_position_portrait = {
				datacontext = "[EmptyCourtPosition]"
				tooltip = "COURT_POSITIONS_WINDOW_EMPTY_POSITION_NO_ADD_TT"
				using = tooltip_ws
			}
		}

		blockoverride "cp_ai_score"
		{
			text = "[EmptyCourtPosition.GetAiCandidateScore]"
		}

		blockoverride "cp_effects"
		{
			text = "[CourtPositionType.GetEmployerModifierDescription]"
			minimumsize = { 440 50 }
			maximumsize = { 440 150 }
			autoresize = yes
		}

		blockoverride "cp_court_effects"
		{
			margin_bottom = 0

			text_multi = {
				visible = "[CourtPositionType.HasLiegeCourtModifiers]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 8 4 }
				minimumsize = { 440 50 }
				maximumsize = { 440 150 }
				autoresize = yes

				align = top|left|nobaseline

				text = "COURT_POSITION_TYPE_EMPLOYER_COURT_EFFECTS"
			}
		}

		blockoverride "cp_tasks"
		{
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[And( Not( IsDataModelEmpty( CourtPositionType.GetAllPositionTasks ) ), CourtPositionType.HasVisibleTasks( Character.Self ) )]"

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 20 4 }
					margin_top = 0

					background = {
						using = Background_Area
						margin = { -4 -2 }
					}

					hbox = {

						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_vertical = expanding
							margin = { 0 3 }

							minimumsize = { 72 0  }
						}

						text_multi = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							margin = { 8 4 }
							text = "COURT_POSITION_TASK_HINT"
							align = nobaseline
						}

						expand = {}

						hbox = {
							datamodel = "[CourtPositionType.GetTasks]"
							layoutpolicy_vertical = expanding
							spacing = 8

							item = {
								court_position_task_button = {
									blockoverride "button" {
										using = tooltip_nw
										enabled = no

										tooltipwidget = {
											court_position_task_icon_tooltip_widget = {
												using = DefaultTooltipBackground
												using = GeneralTooltipSetup
												alwaystransparent = no

												blockoverride "header" {
													text = "COURT_POSITION_TASK_GENERIC_TT"
												}

												blockoverride "employer_modifier_description" {
													visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployerModifierGenericDescription ) )]"
													text = COURT_POSITION_TASK_EMPLOYER_GENERIC_EFFECTS
												}

												blockoverride "employer_court_modifier_description" {
													visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"
													text = COURT_POSITION_TASK_EMPLOYER_COURT_GENERIC_EFFECTS
												}

												blockoverride "on_start_description" {
													visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnStartEffectGenericDesc() ) )]"
													text = COURT_POSITION_TASK_START_GENERIC_EFFECTS
												}

												blockoverride "on_end_description" {
													visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnEndEffectGenericDesc() ) )]"
													text = COURT_POSITION_TASK_END_GENERIC_EFFECTS
												}

												blockoverride "cost_description" {
													text = COURT_POSITION_TASK_GENERIC_COST
												}
											}
										}
									}

									blockoverride "button_icon" {
										texture = "[CourtPositionTaskType.GetIcon]"
									}
								}
							}
						}
					}
					expand = {}
				}
			}
		}
	}

	type widget_your_court_position_item = widget_court_position_entry_base
	{
		blockoverride "cp_root"
		{
			datacontext = "[CourtPosition.GetPositionType]"
			size = { 537 200 }

			background = {
				using = Background_Area_Light
				margin_top = 2
			}

			background = {
				using = Background_Frame
				margin_top = 2
				margin_bottom = 2
				margin_right = -3
			}
		}

		blockoverride "cp_salary"
		{
			text = "[CourtPosition.GetSalaryText]"
			tooltip = "[CourtPosition.GetSalaryBreakdownTooltip]"
		}

		blockoverride "cp_portrait"
		{
			margin_bottom = 4

			portrait_head_small = {
				datacontext = "[CourtPosition.GetEmployer]"
			}
		}

		blockoverride "cp_effects"
		{
			text = "[CourtPosition.GetEmployeeBonuses]"
			minimumsize = { 440 50 }
			maximumsize = { 440 180 }
			autoresize = yes
		}

		blockoverride "cp_court_effects"
		{
			text_multi = {
				visible = "[CourtPosition.GetPositionType.HasLiegeCourtModifiers]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 8 4 }
				minimumsize = { 440 50 }
				maximumsize = { 440 150 }
				autoresize = yes

				align = top|left|nobaseline

				text = "COURT_POSITION_EMPLOYER_COURT_EFFECTS"
			}
		}

		blockoverride "cp_task_effects"
		{
			text_single = {
				visible = "[CourtPosition.HasActiveTask]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				margin = { 8 4 }
				text = "[CourtPosition.GetActiveTask.GetName]"
				align = left|nobaseline
			}

			text_multi = {
				visible = "[CourtPosition.HasActiveTask]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 8 4 }
				minimumsize = { 440 50 }
				maximumsize = { 440 150 }
				autoresize = yes

				align = top|left|nobaseline

				text = "[CourtPosition.GetActiveTask.GetEmployeeModifierDescription]"
			}
		}

		blockoverride "cp_heading_line_2"
		{
			hbox = {
				layoutpolicy_horizontal = expanding
				margin = {16 0}
				margin_bottom = 8
				spacing = 16

				text_single = {
					text = "COURT_POSITION_FOR_EMPLOYER"
					align = nobaseline
				}

				expand = {}
			}
		}
	}

	type widget_court_position_entry_base = widget
	{
		layoutpolicy_horizontal = expanding

		block "cp_root"
		{
			#need to set a size! (width is 537)
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				name = "heading"
				layoutpolicy_horizontal = expanding

				margin = { 0 4 }

				background = {
					using = GenericObjectCardHeaderBackground
					using = CourtPositionHeaderBackgroundColors
				}

				margin_widget = {
					name = "upper_line"
					layoutpolicy_horizontal = expanding
					size = { 0 30 }
					margin = { 16 16 }
					margin_left = 6

					tooltipwidget = {
						court_position_type_tooltip = { }
					}
					using = tooltip_ws

					icon = {
						texture = "[CourtPositionType.GetIcon]"
						size = { 34 34 }
						parentanchor = vcenter|left
					}

					#### POSITION ####
					text_single = {
						text = "[CourtPositionType.GetNameNoTooltip]"
						default_format = "#high"
						using = Font_Size_Medium
						align = nobaseline

						parentanchor = vcenter|left
						position = { 38 0 }
					}


					#### DEBUG AI SCORE ####
					text_single = {
						name = "ai_score"
						visible = "[AIWatchWindowsEnabled]"
						block "cp_ai_score"
						{
							text = ""
						}
						default_format = "#D"
						parentanchor = vcenter|left
						align = nobaseline

						position = {180 0}
					}

					flowcontainer = {
						parentanchor = vcenter|right
						ignoreinvisible = yes
						position = {-6 0 }

						block "cp_heading_top_right_insert"
						{

						}

						icon = {
							name = "powerful_agent_warning"
							visible = "[CourtPositionType.IsPowerfulAgent]"
							size = { 30 30 }
							texture = "gfx/interface/icons/symbols/icon_alert.dds"
							tooltip = "COURT_POSITION_POWERFUL_AGENT"
							using = tooltip_ne
						}

						spacer = {
							size = { 8 0 }
						}

						text_single = {
							default_format = "#high"
							block "cp_salary"
							{

							}
							using = tooltip_ne
						}
					}
				}

				block "cp_heading_line_2" {}
			}
			
			vbox = {

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				background = {
					visible = "[CourtPositionType.HasNoPrimarySkill]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_noprimary.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[CourtPositionType.HasPrimarySkill( 'diplomacy' )]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_diplomacy.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[CourtPositionType.HasPrimarySkill( 'martial' )]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_martial.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[CourtPositionType.HasPrimarySkill( 'stewardship' )]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_stewardship.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[CourtPositionType.HasPrimarySkill( 'intrigue' )]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_intrigue.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[CourtPositionType.HasPrimarySkill( 'learning' )]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_learning.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[CourtPositionType.HasPrimarySkill( 'prowess' )]"
					texture = "gfx/interface/illustrations/court_position_skill_backgrounds/court_position_skill_prowess.dds"
					alpha = 0.2
					spriteType = Corneredtiled
					texture_density = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					margin = { 8 4 }
					margin_bottom = 2

					vbox = {
						layoutpolicy_vertical = expanding
						block "cp_portrait" {}

						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding


							block "cp_extra_effects" {}

							text_multi = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 8 4 }

								align = top|left|nobaseline
								block "cp_effects" {}

							}

							block "cp_court_effects" {}

							block "cp_task_effects" {}

							expand = {}
						}
						expand = {}
					}
				}

				block "cp_tasks" {}
			}
		}
	}

	### Brief: widget_empty_court_position_portrait
	# Used in widget_empty_court_position_item.
	#
	# Expects the following datacontexts:
	#	Character - The character that is viewing the item.
	#	CourtPositionType - The court position type being viewed.
	#
	type widget_empty_court_position_portrait = widget {
		size = { 85 90 }

		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button = {
			size = { 100% 100% }
			enabled = "[And( CourtPositionType.CanHirePosition( Character.Self ), CourtPositionType.HasValidCourtiersForCharacter( Character.Self ) )]"

			onclick = "[CourtPositionType.OpenAppointWindow( Character.Self )]"

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('show')]"

			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('hide')]"

			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 80 100 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				visible = "[And(CourtPositionType.CanHirePosition( Character.Self ), CourtPositionType.HasValidCourtiersForCharacter( Character.Self ) )]"
				parentanchor = center
				position = { 0 0 }

				onclick = "[CourtPositionType.OpenAppointWindow( Character.Self )]"
			}

			widget = {
				name = "highlight_frame"
				size = { 100% 100% }
				alwaystransparent = yes
				alpha = 0

				state = {
					name = "show"
					alpha = 1
				}

				state = {
					name = "hide"
					alpha = 0
				}

				background = {
					size = { 100% 100% }
					texture = "gfx/portraits/portrait_frame.dds"
					using = Color_Grey
					alpha = 0.7
					margin = { -4 -4 }
				}
			}
		}
	}

	### Brief: widget_empty_list_court_position_portrait
	# Used in widget_empty_court_position_item.
	#
	# Expects the following datacontexts:
	#	EmptyCourtPosition - List item that caches the various properties of
	#		this court position.
	#	SelectedEmptyCourtPosition - Datacontext to track which item is
	#		selected.
	#
	type widget_empty_list_court_position_portrait = widget {
		size = { 85 90 }

		background = {
			using = Background_Area_Solid

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				blend_mode = alphamultiply
				alpha = 0.2
				mirror = vertical
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/portraits/portrait_frame.dds"
				using = Color_Grey
				margin = { -4 -4 }
				alpha = 0.5
			}
		}

		button = {
			name = "position_portrait_tutorial_uses_this"
			size = { 100% 100% }
			enabled = "[And(EmptyCourtPosition.CanHirePosition, EmptyCourtPosition.HasValidCourtiers )]"

			block "portrait_button_onclick"
			{
				onclick = "[EmptyCourtPosition.OpenAppointWindow]"
				onclick = "[SelectedEmptyCourtPosition.SetIndex( PdxGuiWidget.GetIndexInDataModel )]"
			}

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('show')]"
			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('highlight_frame').TriggerAnimation('hide')]"

			}

			highlight_icon = {
				name = "portrait_unknown_head_small_glow"
				parentanchor = center
				position = { 3 -9 }
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
				size = { 80 100 }
				framesize = { 384 480 }
				upframe = 1
				overframe = 2
			}

			button_plus = {
				visible = "[And(EmptyCourtPosition.CanHirePosition, EmptyCourtPosition.HasValidCourtiers )]"
				parentanchor = center
				position = { 0 0 }

				block "portrait_button_onclick"
				{
					onclick = "[EmptyCourtPosition.OpenAppointWindow]"
					onclick = "[SelectedEmptyCourtPosition.SetIndex( PdxGuiWidget.GetIndexInDataModel )]"
				}
			}

			widget = {
				name = "highlight_frame"
				size = { 100% 100% }
				alwaystransparent = yes
				alpha = 0

				state = {
					name = "show"
					alpha = 1
				}

				state = {
					name = "hide"
					alpha = 0
				}

				background = {
					size = { 100% 100% }
					texture = "gfx/portraits/portrait_frame.dds"
					using = Color_Grey
					alpha = 0.7
					margin = { -4 -4 }
				}
			}
		}
	}

	### Brief: hbox_single_court_position_card
	# Creates a card for one single court position type, so the player can see
	# their currently hired position with all bonuses, or hire one if they do
	# not have one employed. Will only show the first employed character if
	# there are multiple ones, and will only show the empty one if they do not
	# have any employed.
	#
	# Expects the following datacontexts:
	#	Character - The Character viewing the Court Positions
	#	CourtPositionType - The Court Position Type to view.
	#
	type hbox_single_court_position_card = hbox {

		vbox = {
			visible = "[Character.EmploysCourtPositionType( CourtPositionType.Self )]"

			layoutpolicy_horizontal = expanding
			minimumsize = { 0 70 }

			widget_hired_court_position_card = {
				datacontext = "[Character.GetFirstEmployedOfType( CourtPositionType.Self )]"

				layoutpolicy_horizontal = expanding
			}
		}

		vbox = {
			visible = "[Not( Character.EmploysCourtPositionType( CourtPositionType.Self ) )]"

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = fixed

			widget_empty_court_position_card = {
				layoutpolicy_horizontal = expanding
			}
		}
	}

	# Requires an CourtPosition and CourtPositionTaskType data context to be provided
	type court_position_task_icon_tooltip_widget = widget
	{
		size = { 50 50 }

		vbox = {
			restrictparent_min = yes
			minimumsize = { 280 0 }
			maximumsize = { 400 0 }

			margin = { 15 15 }
			margin_top = 10
			spacing = 7

			text_multi = {
				name = "task_info"
				block "header" {
					text = "COURT_POSITION_TASK_TT"
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "task_info_additional" {
					visible = no
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "employer_modifier_description" {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployerModifierDescription( CourtPosition.Self ) ) )]"
					text = COURT_POSITION_TASK_EMPLOYER_EFFECTS
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "employer_court_modifier_description" {
					visible = "[CourtPositionTaskType.HasEmployerCourtModifiers]"
					text = COURT_POSITION_TASK_EMPLOYER_COURT_EFFECTS
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "employee_modifier_description" {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetEmployeeModifierDescription ) )]"
					text = COURT_POSITION_TASK_EMPLOYEE_EFFECTS
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "on_start_description" {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnStartEffectDesc( CourtPosition.Self ) ) )]"
					text = COURT_POSITION_TASK_START_EFFECTS
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "on_end_description" {
					visible = "[Not( StringIsEmpty( CourtPositionTaskType.GetOnEndEffectDesc( CourtPosition.Self )  ) )]"
					text = COURT_POSITION_TASK_END_EFFECTS
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				block "cost_description" {
					text = COURT_POSITION_TASK_COST
				}
				layoutpolicy_horizontal = expanding
				autoresize = yes
				max_width = 380
				align = left
			}

			text_multi = {
				name = "Description"
				layoutpolicy_horizontal = expanding
				max_width = 380
				autoresize = yes
				default_format = "#F"
				text = "[CourtPositionTaskType.GetDescription]"
			}
		}
	}

	type court_position_task_button = widget {
		size = { 42 52 }

		icon = {
			block "glow_active" {
				visible = no
			}
			texture = "gfx/particles/halo.dds"
			parentanchor = center
			size = { 58 58 }
			color = { 1 0.85 0.6 1 }
		}

		button_round = {
			parentanchor = center
			size = { 46 46 }
			gfxtype = togglepushbuttongfx
			effectname = "NoHighlight"

			block "button" {}

			upframe = 1
			downframe = 1
			uphoverframe = 2
			disableframe = 6

			button_normal = {
				name = "potential_task"
				parentanchor = center
				widgetanchor = center
				effectname = "NoHighlight"
				gfxtype = togglepushbuttongfx
				shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
				block "button_icon" {
					texture = "gfx/interface/icons/court_position_task_types/_no_task.dds"
				}
				alwaystransparent = yes
				size = { 38 38 }
			}
		}
	}

	type court_position_task_buttons_hbox = hbox
	{
		layoutpolicy_vertical = expanding
		spacing = 8

		court_position_task_button = {
			
			blockoverride "glow_active" {
				visible = "[Not( CourtPosition.GetActiveTask.IsValid )]"
			}

			blockoverride "button" {
				onclick = "[PostCommand( CourtPosition.StopTaskCmd( CourtPosition.GetActiveTask.Self ) )]"
				enabled = "[IsValidCommand( CourtPosition.StopTaskCmd( CourtPosition.GetActiveTask.Self ) )]"
				down = "[Not( CourtPosition.GetActiveTask.IsValid )]"

				using = tooltip_nw
				tooltip = "COURT_POSITION_NO_ACTIVE_TASK_DESCRIPTION"
			}

			blockoverride "button_icon" {
				texture = "gfx/interface/icons/court_position_task_types/_no_task.dds"
			}
		}

		item = {
			court_position_task_button = {
				
				blockoverride "glow_active" {
					visible = "[CourtPosition.IsActiveTask( CourtPositionTaskType.Self )]"
				}

				blockoverride "button" {
					onclick = "[PostCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
					enabled = "[IsValidCommand( CourtPosition.ToggleTaskCmd( CourtPositionTaskType.Self ) )]"
					down = "[CourtPosition.IsActiveTask( CourtPositionTaskType.Self )]"

					using = tooltip_nw

					tooltipwidget = {
						court_position_task_icon_tooltip_widget = {
							using = DefaultTooltipBackground
							using = GeneralTooltipSetup
							alwaystransparent = no

							blockoverride "task_info_additional" {
								text = "[GetCommandDesc( CourtPosition.ToggleTaskCmd(  CourtPositionTaskType.Self ) )]"
							}
						}
					}
				}

				blockoverride "button_icon" {
					texture = "[CourtPositionTaskType.GetIcon]"
				}
			}
		}
	}
}

template CourtPositionHeaderBackgroundColors
{
	modify_texture = {
		visible = "[CourtPositionType.HasNoPrimarySkill]"
		using = Color_Courtier_Blue
		blend_mode = normal
	}
	modify_texture = {
		visible = "[CourtPositionType.HasPrimarySkill( 'diplomacy' )]"
		using = Color_Courtier_Blue
		blend_mode = normal
	}
	modify_texture = {
		visible = "[CourtPositionType.HasPrimarySkill( 'martial' )]"
		using = Color_Red
		blend_mode = normal
	}
	modify_texture = {
		visible = "[CourtPositionType.HasPrimarySkill( 'stewardship' )]"
		using = Color_Green
		blend_mode = normal
	}
	modify_texture = {
		visible = "[CourtPositionType.HasPrimarySkill( 'intrigue' )]"
		using = Color_Courtier_Purple
		blend_mode = normal
	}
	modify_texture = {
		visible = "[CourtPositionType.HasPrimarySkill( 'learning' )]"
		using = Color_White
		blend_mode = normal
	}
	modify_texture = {
		visible = "[CourtPositionType.HasPrimarySkill( 'prowess' )]"
		using = Color_Red
		blend_mode = normal
	}
}