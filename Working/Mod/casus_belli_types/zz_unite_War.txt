#unite_war = {
#	group = conquest
#	
#	combine_into_one = yes
#	should_show_war_goal_subview = yes
#	mutually_exclusive_titles = {
#		NOT = {
#			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
#			trigger_if = {
#				limit = {
#					scope:attacker = scope:claimant
#				}
#				scope:attacker = {
#					culture = {
#						OR = {
#							has_innovation = innovation_divine_right
#							has_innovation = innovation_centralization_of_authority
#							has_cultural_parameter = multiple_claim_wars
#							has_cultural_tradition = tradition_malleable_invaders
#						}						
#					}
#				}
#			}
#			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
#			trigger_else = {
#				scope:attacker = {
#					culture = {
#						OR = {
#							has_innovation = innovation_rightful_ownership
#							has_innovation = innovation_centralization_of_authority
#						}
#					}
#				}
#			}
#		}
#	}
#	
#	allowed_for_character = {
#		scope:attacker = {
#			exists = capital_province
#			OR = {
#				capital_province = { geographical_region = world_asia_china }
#				culture = { has_cultural_pillar = heritage_chinese }
#			}
#			NOT = { is_bureau_government_trigger = yes }
#		}
#	}
#	allowed_against_character = {
#		any_realm_county = {
#			title_province = { geographical_region = world_asia_china }
#		}
#		NOT = { liege = scope:attacker.liege }
#		NOT = {
#			scope:attacker = {			
#				is_independent_ruler = no
#				highest_held_title_tier <= scope:defender.highest_held_title_tier 
#			}
#		}
#	}
#	target_titles = neighbor_land
#	target_title_tier = kingdom
#	target_de_jure_regions_above = yes
#	
#	on_declaration = {
#		on_declared_war = yes
#		#逐鹿中原前自动投降
#		if = {
#			limit = {
#				scope:attacker = {
#					is_oe_imperial_official_trigger = yes
#					is_ai = yes
#				}
#				scope:defender = {
#					is_ai = yes
#					is_oe_imperial_official_trigger = no
#				}
#			}
#			scope:defender = {
#				trigger_event = {
#					id = east_title.0001
#					days = 3
#				}
#			}
#		}		
#	}
#	
#	cost = {
#		piety = {
#			value = 0
#			if = {
#				limit = { scope:attacker = { is_ai = no } }
#				add = common_cb_impious_piety_cost
#			}
#		}
#		prestige = {
#			value = 60
#			if = {
#				limit = { scope:attacker = { is_ai = no } }
#				add = {	
#					value = 0
#					add = claim_cb_prestige_cost
#					multiply = common_cb_prestige_cost_multiplier
#		
#					if = {
#						limit = {
#							scope:attacker = {
#								has_character_flag = temp_no_claim_war_cost
#							}
#						}
#						multiply = {
#							value = 0
#							desc = "not_imprisoned_filter" # Says 'free'
#						}
#					}
#				}
#			}
#		}
#	}
#
#	on_victory_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = county_conquest_cb_victory_desc_attacker
#			}
#			desc = county_conquest_cb_victory_desc
#		}
#	}
#	
#	on_victory = {
#		scope:attacker = {
#			show_pow_release_message_effect = yes
#			#imprison = { target = scope:defender type = dungeon }
#		}
#
#		create_title_and_vassal_change = {
#			type = conquest
#			save_scope_as = change
#			add_claim_on_loss = yes
#		}
#		setup_invasion_cb = {
#			titles = target_titles
#			attacker = scope:attacker
#			defender = scope:defender
#			change = scope:change
#			take_occupied = yes
#		}
#
#		if = {
#			limit = {
#				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
#			}
#			scope:defender = {
#				change_liege = {
#					liege = scope:attacker
#					change = scope:change
#				}
#			}
#		}
#		else_if = {
#			limit = {
#				scope:attacker = { is_ai = yes }
#				scope:defender = { is_ai = yes }
#				scope:defender = {
#					exists = capital_province
#					capital_province = { geographical_region = world_asia_china }
#				}
#				scope:defender.primary_title.tier <= tier_kingdom
#			}
#			scope:defender = {
#				every_held_title = {
#					if = {
#						limit = {					
#							tier = scope:defender.primary_title.tier
#						}
#						change_title_holder = {
#							holder = scope:attacker
#							change = scope:change
#						}
#					}
#					else_if = {
#						limit = {
#							OR = {
#								NOT = { exists = scope:secondary_title }
#								tier > scope:secondary_title.tier
#							}
#						}
#						save_temporary_scope_as = secondary_title
#					}
#				}
#			}
#			scope:defender = {
#				every_vassal = {
#					limit = {
#						dynasty = scope:defender.dynasty #同家族剥夺
#						primary_title.tier > tier_barony
#						exists = capital_province
#						capital_province = { geographical_region = world_asia_china }
#					}
#					every_held_title = {
#						limit = {
#							tier = tier_county
#							target_is_de_jure_liege_or_above = title:e_cathay
#						}
#						change_title_holder = {
#							holder = scope:attacker
#							change = scope:change
#						}
#					}
#				}
#			}
#			scope:defender = {
#				if = {
#					limit = {
#						exists = scope:secondary_title
#					}
#					every_vassal = {
#						limit = {
#							primary_title.tier >= scope:secondary_title.tier
#							NOT = {
#								primary_title.tier = tier_barony
#							}
#						}
#						change_liege = {
#							liege = scope:attacker
#							change = scope:change
#						}
#					}
#				}
#			}
#
#			scope:defender = {
#				change_liege = {
#					liege = scope:attacker
#					change = scope:change
#				}
#			}
#		}
#
#		resolve_title_and_vassal_change = scope:change
#		#望风而降
#		if = {
#			limit = {
#				scope:attacker = {
#					highest_held_title_tier = tier_empire
#					is_ai = yes
#				}
#			}
#			scope:attacker = { save_scope_as = new_ruler }
#			title:e_celestia = {
#				every_dejure_vassal_title_holder = {
#					limit = {
#						is_independent_ruler = yes
#						is_ai = yes
#						character_is_realm_neighbor = scope:attacker
#						NOT = { has_title = title:e_celestia }
#						NOT = { this = scope:defender }
#						NOT = { this = scope:attacker }
#						NOT = { has_truce = title:e_celestia.holder }
#					}
#					trigger_event = {
#						id = east_title.0001
#						days = 30
#					}
#				}
#			}
#		}
#		if = {
#			limit = {
#				scope:attacker = {
#					has_primary_title = title:e_celestia
#				}
#				scope:defender = {
#					OR = {
#						is_oe_imperial_government_trigger = yes
#						has_primary_title = title:k_han
#					}
#					NOT = { has_title = title:e_celestia }
#					NOT = { has_title = title:e_cathay }
#				}
#			}
#			scope:defender = {
#				every_held_title = {
#					limit = {
#						OR = {
#							tier = tier_empire
#							AND = {
#								tier = tier_kingdom
#								is_titular = yes
#							}
#						}
#					}
#					add_to_list = titles_to_destroy
#				}
#			}
#			every_in_list = {
#				list = titles_to_destroy
#				scope:attacker = {
#					destroy_title = prev
#				}
#			}
#		}
#		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
#		modify_all_participants_fame_values = {
#			WINNER = scope:attacker
#			LOSER = scope:defender
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_FAME_SCALE = 10
#			LOSER_FAME_SCALE = -10
#			WINNER_ALLY_FAME_SCALE = 10
#			LOSER_ALLY_FAME_SCALE = 10
#		}
#	}
#
#	on_white_peace_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = invasion_war_white_peace_desc_defender
#			}
#			desc = invasion_war_white_peace_desc
#		}
#	}
#	
#	on_white_peace = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#
#		# Prestige for the attacker's war allies
#		add_from_contribution_attackers = {
#			prestige = major_prestige_value
#			opinion = {
#				modifier = contributed_in_war
#			}
#		}
#
#		# Prestige for the defender's war allies
#		add_from_contribution_defenders = {
#			prestige = major_prestige_value
#			opinion = {
#				modifier = contributed_in_war
#			}
#		}
#
#		# Truce
#		add_truce_white_peace_effect = yes
#
#		scope:attacker = {
#			add_prestige = mongol_invasion_cb_prestige_white_peace
#			stress_impact = {
#				ambitious = medium_stress_impact_gain
#				arrogant = medium_stress_impact_gain
#			}
#		}
#
#		scope:defender = {
#			stress_impact = {
#				arrogant = medium_stress_impact_gain
#			}
#		}
#	}
#
#	on_defeat_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = invasion_war_white_peace_desc_defender
#			}
#			desc = invasion_war_white_peace_desc
#		}
#	}
#	
#	on_defeat = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#
#		# Prestige loss for the attacker
#		scope:attacker = {
#			pay_short_term_gold = {
#				gold = 5
#				target = scope:defender
#				yearly_income = yes
#			}
#			add_prestige = {
#				value = massive_prestige_value
#				multiply = -1.0
#			}
#		}
#
#		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
#		#modify_all_participants_fame_values = { #报错点
#			#WINNER = scope:defender
#			#LOSER = scope:attacker
#			#FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
#			#IS_RELIGIOUS_WAR = no
#			#WINNER_FAME_SCALE = 10
#			#LOSER_FAME_SCALE = -10
#			#WINNER_ALLY_FAME_SCALE = 10
#			#LOSER_ALLY_FAME_SCALE = 10
#		#}
#	
#		add_truce_attacker_defeat_effect = yes
#		
#		scope:attacker = {
#			save_temporary_scope_as = loser
#		}
#		on_lost_aggression_war_discontent_loss = yes
#	}
#	
#	on_invalidated = {
#	}
#	
#	on_invalidated_desc = {
#		desc = debug_war_invalidated_desc
#	}
#	on_primary_attacker_death = inherit
#	on_primary_defender_death = inherit
#	
#	transfer_behavior = transfer
#	attacker_ticking_warscore = 0.05
#	defender_ticking_warscore = 0.05	
#
#	ignore_effect = change_title_holder
#	war_name = "CHINA_WAR_OF_REUNIFICATION_NAME"
#	cb_name_no_target = "WAR_OF_REUNIFICATION"
#	ai_only_against_neighbors = yes
#	interface_priority = 100
#	truce_days = 300
#	
#	max_attacker_score_from_battles = 200
#	attacker_score_from_battles_scale = 100
#	defender_score_from_battles_scale = 100
#	#attacker_ticking_warscore = NWar::ATTACKER_TICKING_WAR_SCORE
#	#attacker_ticking_warscore_delay = NWar::ATTACKER_TICKING_WAR_SCORE_DELAY_DAYS # e.g. { months = 12 }
#	#defender_ticking_warscore = NWar::DEFENDER_TICKING_WAR_SCORE
#	#defender_ticking_warscore_delay = NWar::DEFENDER_TICKING_WAR_SCORE_DELAY_DAYS # e.g. { months = 12 }
#	#ticking_war_score_targets_entire_realm = yes
#	attacker_wargoal_percentage = 0.5					# How much the Attacker need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
#	defender_wargoal_percentage = 1
#
#	battle_participation_mult = 1.2
#	should_show_war_goal_subview = yes
#}
steppe_war = {
	group = subjugation
	should_show_war_goal_subview = yes
	combine_into_one = yes
	
	attacker_score_from_occupation_scale = 150
	attacker_score_from_battles_scale = 150
	defender_score_from_battles_scale = 150
	
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					culture = {
						OR = {
							has_innovation = innovation_divine_right
							#has_cultural_parameter = multiple_claim_wars
							has_cultural_tradition = tradition_malleable_invaders
						}						
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						OR = {
							has_innovation = innovation_rightful_ownership
						}
					}
				}
			}
		}
	}
	
	allowed_for_character = {
		exists = capital_province
		OR = {
			culture = { has_cultural_parameter = can_recruit_open_specialist }
			capital_province = { geographical_region = world_steppe_east }
		}
	}
	allowed_against_character = {
		exists = capital_province
		OR = {
			capital_province = { geographical_region = world_asia }
		}
	}
	target_titles = neighbor_land
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	
	on_declaration = {
		on_declared_war = yes
	}
	
	cost = {
		prestige = {
			value = 100
			if = {
				limit = { scope:attacker = { is_ai = no } }
				add = tribal_subjugation_cb_prestige_cost
			}
		}
		piety = {
			value = 0
			if = {
				limit = { scope:attacker = { is_ai = no } }
				add = {
					value = 0
					# Explicit cost when attacking HoF in addition to the impious additions
					if = {
						limit = {
							scope:attacker.faith.religious_head = scope:attacker
							scope:defender.faith = scope:attacker.faith
						}
						add = {
							value = 1000
							desc = CB_BASE_COST
						}
					}
					add = common_cb_impious_piety_cost
					multiply = common_cb_piety_cost_multiplier
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender.primary_title.tier < scope:attacker.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {			
				first_valid = {
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
	}
	
	on_victory = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			imprison = { target = scope:defender }
		}
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = no
		}
		if = {
			limit = {
				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		
		
		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = massive_prestige_value
			}
			add_prestige_level = 1
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = massive_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}
		#jurchen_incident_effect = yes

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
		
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = tribal_subjugation_cb_defeat_desc_attacker
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		on_lost_aggression_war_discontent_loss = yes

	}
	
	on_invalidated = {
	}
	
	on_invalidated_desc = {
		desc = debug_war_invalidated_desc
	}
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	attacker_ticking_warscore = 0.05
	defender_ticking_warscore = 0.05	
	truce_days = 100
	ignore_effect = change_title_holder
	war_name = "STEPPE_WAR_OF_REUNIFICATION_NAME"
	cb_name_no_target = "STEPPE_WAR_OF_REUNIFICATION"
	ai_only_against_neighbors = yes
	interface_priority = 100
	
	#attacker_ticking_warscore = NWar::ATTACKER_TICKING_WAR_SCORE
	#attacker_ticking_warscore_delay = NWar::ATTACKER_TICKING_WAR_SCORE_DELAY_DAYS # e.g. { months = 12 }
	#defender_ticking_warscore = NWar::DEFENDER_TICKING_WAR_SCORE
	#defender_ticking_warscore_delay = NWar::DEFENDER_TICKING_WAR_SCORE_DELAY_DAYS # e.g. { months = 12 }
	#ticking_war_score_targets_entire_realm = yes
	attacker_wargoal_percentage = 0.5					# How much the Attacker need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
	defender_wargoal_percentage = 1

	battle_participation_mult = 1.2
	should_show_war_goal_subview = yes
	white_peace_possible = no
}


shatuo_unite_war = {
	group = conquest
	
	attacker_score_from_occupation_scale = 150
	attacker_score_from_battles_scale = 150
	defender_score_from_battles_scale = 150
	
	combine_into_one = yes
	mutually_exclusive_titles = { always = yes }
	
	allowed_for_character = {
		#has_primary_title = title:k_jin_china
		OR = {
			culture = { has_cultural_pillar = heritage_turkic }
			culture = { has_cultural_pillar = heritage_iranian }
		}
		is_independent_ruler = yes
		is_adult = yes
	}
	allowed_against_character = {
		OR = {
			culture = { has_cultural_pillar = heritage_turkic }
			culture = { has_cultural_pillar = heritage_iranian }
		}
		has_primary_title = title:e_celestia_china
		is_adult = yes
	}
	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	
	on_declaration = {
		on_declared_war = yes
	}
	
	cost = {
		gold = scope:attacker.diplomacy
		piety = scope:attacker.diplomacy
		prestige = scope:attacker.diplomacy
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender.primary_title.tier < scope:attacker.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {			
				first_valid = {
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
	}
	
	on_victory = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			imprison = { target = scope:defender }
			trigger_event = mandate.0004
			if = {
				limit = {
					scope:attacker = character:1412375
				}
				trigger_event = mandate.0005
			}
		}
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		if = {
			limit = {
				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		else = {
			scope:defender = {
				every_held_title = {
					if = {
						limit = {
							OR = {
								tier >= tier_county
							}
						}
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}
			
			scope:defender = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:attacker
							change = scope:change
						}
					}
				}
			}
			
			scope:defender = {			
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		
		resolve_title_and_vassal_change = scope:change
		
		
		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = massive_prestige_value
			}
			add_prestige_level = 1
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = massive_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
		
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = tribal_subjugation_cb_defeat_desc_attacker
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		on_lost_aggression_war_discontent_loss = yes

	}
	
	on_invalidated = {
	}
	
	on_invalidated_desc = {
		desc = debug_war_invalidated_desc
	}
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	attacker_ticking_warscore = 0.05
	defender_ticking_warscore = 0.05	
	truce_days = 100
	ignore_effect = change_title_holder
	war_name = "SHATUO_UNITE_NAME"
	cb_name_no_target = "SHATUO_UNITE_NAME"
	ai_only_against_neighbors = no
	interface_priority = 100
	
	max_attacker_score_from_battles = 200
	attacker_score_from_battles_scale = 100
	defender_score_from_battles_scale = 100
	#attacker_ticking_warscore = NWar::ATTACKER_TICKING_WAR_SCORE
	#attacker_ticking_warscore_delay = NWar::ATTACKER_TICKING_WAR_SCORE_DELAY_DAYS # e.g. { months = 12 }
	#defender_ticking_warscore = NWar::DEFENDER_TICKING_WAR_SCORE
	#defender_ticking_warscore_delay = NWar::DEFENDER_TICKING_WAR_SCORE_DELAY_DAYS # e.g. { months = 12 }
	#ticking_war_score_targets_entire_realm = yes
	attacker_wargoal_percentage = 0.5					# How much the Attacker need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
	defender_wargoal_percentage = 1

	battle_participation_mult = 1.2
	should_show_war_goal_subview = yes
	white_peace_possible = no
}

#oe_de_jure_cb = {
#	group = de_jure
#	should_check_for_interface_availability = no # Covered by the county dejure cb
#
#	allowed_for_character = {
#		scope:attacker = {
#			culture = {
#				OR = {
#					has_innovation = innovation_centralization_of_authority
#					has_innovation = innovation_rightful_ownership
#				}
#			}
#		}
#	}
#	
#	allowed_against_character = {
#		scope:attacker = {
#			has_de_jure_claim_on = scope:defender
#		}
#		NOT = {
#			OR = {
#				scope:defender = { target_is_liege_or_above = scope:attacker }
#				scope:attacker = { target_is_liege_or_above = scope:defender }
#			}
#		}
#	}
#	target_titles = de_jure
#	ai_only_against_neighbors = yes
#	target_title_tier = all
#	ignore_effect = change_title_holder
#	#target_de_jure_regions_above = yes
#	combine_into_one = yes
#
#	valid_to_start = {
#		scope:target = {
#			any_this_title_or_de_jure_above = {
#				exists = holder
#				holder = {
#					OR = {
#						this = scope:attacker
#						target_is_liege_or_above = scope:attacker
#					}
#				}
#			}
#		}
#	}
#
#	cost = {
#		piety = {
#			value = 0
#			add = common_cb_impious_piety_cost
#		}
#		prestige = {
#			value = 0
#			# scale base value based on number of counties x 100
#			add = {	
#				every_in_list = { 
#					list = target_titles 
#					limit = {
#						tier = tier_county
#						holder.top_liege = scope:defender
#					}
#					add = 100
#				}
#				desc = CB_CLAIM_COST_TARGET_TITLES
#			}
#
#			multiply = common_cb_prestige_cost_multiplier
#		}
#	}
#
#	on_declaration = {
#		on_declared_war = yes
#	}
#
#	should_invalidate = {
#		NOT = {
#			scope:attacker = {
#				has_de_jure_claim_on = scope:defender
#			}
#		}
#	}
#
#	on_invalidated_desc = msg_de_jure_all_war_invalidated_message
#	
#	on_invalidated = {
#	}
#
#	on_victory_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = de_jure_cb_victory_desc_attacker
#			}
#			desc = de_jure_cb_victory_desc
#		}
#		
#	}
#	
#	on_victory = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		every_in_list = {
#			list = target_titles
#			de_jure_liege.holder = { save_scope_as = temp_de_jure_liege }
#			add_hook_from_temp_de_jure_liege_to_attacker = yes
#		}
#		
#		create_title_and_vassal_change = {
#			type = conquest
#			save_scope_as = change
#			add_claim_on_loss = yes
#		}
#		
#		# Setup and execute the changes to titles and vassals.
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			change = scope:change
#		}
#		resolve_title_and_vassal_change = scope:change
#
#		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
#		modify_all_participants_fame_values = {
#			WINNER = scope:attacker
#			LOSER = scope:defender
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_FAME_SCALE = 10
#			LOSER_FAME_SCALE = -10
#			WINNER_ALLY_FAME_SCALE = 100
#			LOSER_ALLY_FAME_SCALE = 100
#		}
#		
#		# truce
#		add_truce_attacker_victory_effect = yes
#
#		# FP1: note the victory for future memorialisation via stele (if applicable).
#		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
#	}
#
#	on_white_peace_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = de_jure_cb_white_peace_desc_defender
#			}
#			desc = de_jure_cb_white_peace_desc
#		}
#		
#	}
#	
#	on_white_peace = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#
#		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			victory = no
#		}
#		# Prestige loss for the attacker
#		scope:attacker = {
#			add_prestige = {
#				value = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
#				multiply = -5.0
#			}
#			stress_impact = {
# 				ambitious = medium_stress_impact_gain
# 				arrogant = medium_stress_impact_gain
# 			}
#		}
#
#		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
#		modify_allies_of_participants_fame_values = {
#			WINNER = scope:attacker
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_ALLY_FAME_SCALE = 100
#			LOSER_ALLY_FAME_SCALE = 100
#		}
#		# Defender neither gains nor loses any prestige.
#		scope:defender = {
#			stress_impact = {
# 				arrogant = medium_stress_impact_gain
# 			}
#		}
#		
#		# Truce
#		add_truce_white_peace_effect = yes
#	}
#
#	on_defeat_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = de_jure_cb_defeat_desc_defender
#			}
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = de_jure_cb_defeat_desc_attacker
#			}
#			desc = de_jure_cb_defeat_desc
#		}
#
#		
#	}
#	
#	on_defeat = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		# Attacker must pay the defender war reparations.
#		scope:attacker = {
#			pay_short_term_gold_reparations_effect = {
#				GOLD_VALUE = 3
#			}
#		}
#
#		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
#		setup_de_jure_cb = {
#			attacker = scope:attacker
#			defender = scope:defender
#			victory = no
#		}
#		# Attacker loses Prestige, all other participants gain Prestige based on their war contribution (Defender gets full Prestige).
#		modify_all_participants_fame_values = {
#			WINNER = scope:defender
#			LOSER = scope:attacker
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_FAME_SCALE = scale_10_war_defender_win
#			LOSER_FAME_SCALE = -10
#			WINNER_ALLY_FAME_SCALE = 100
#			LOSER_ALLY_FAME_SCALE = 100
#		}
#
#
#	
#		# Truce
#		add_truce_attacker_defeat_effect = yes
#		
#		scope:attacker = {
#			save_temporary_scope_as = loser
#		}
#		on_lost_aggression_war_discontent_loss = yes
#	}
#	
#	on_primary_attacker_death = inherit
#	on_primary_defender_death = inherit
#	
#	transfer_behavior = transfer
#	
#	attacker_allies_inherit = yes
#	defender_allies_inherit = yes
#	
#	war_name = "DEJURE_CB_WAR_NAME"
#	war_name_base = "DEJURE_CB_WAR_NAME_BASE"
#	cb_name = DEJURE_CB_NAME
#	interface_priority = 100
#	
#	attacker_wargoal_percentage = 0.8
#	
#	max_ai_diplo_distance_to_title = 500
#}
#
#claim_cb = {
#	group = claim
#	mutually_exclusive_titles = {
#		NOT = {
#			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
#			trigger_if = {
#				limit = {
#					scope:attacker = scope:claimant
#				}
#				scope:attacker = {
#					culture = {
#						OR = {
#							has_innovation = innovation_divine_right
#							has_innovation = innovation_centralization_of_authority
#							has_cultural_parameter = multiple_claim_wars
#						}						
#					}
#				}
#			}
#			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
#			trigger_else = {
#				scope:attacker = {
#					culture = {
#						has_innovation = innovation_rightful_ownership
#					}
#				}
#			}
#		}
#	}
#
#	# This whole section was already commented out, I just commented it out more to prevent console errors
#	#allowed_for_character = {}
#
#	# allowed_against_character = {
#	# 	faith.religion = scope:attacker.faith.religion
#	# }
#
#	# Root is the title
#	# scope:claimant is the claimant
#	# scope:attacker is the attacker
#	# scope:defender is the defender
#	is_allowed_claim_title = {
#		custom_description = {
#			text = "claimant_titles_held_by_you_or_vassal"
#			NOR = {
#				holder = scope:attacker
#				holder = {
#					target_is_liege_or_above = scope:attacker
#				}
#			}
#		}
#		scope:claimant = {
#			NOT = { has_trait = incapable }
#			trigger_if = {
#				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
#				is_imprisoned = no
#			}
#			#religion = scope:attacker.religion
#			# claimant must not be at war against defender for this claim already
#			custom_description = {
#				text = "claimant_already_pressing_their_claim"
#				object = root
#				NAND = {
#					liege = scope:attacker
#					any_character_war = {
#						casus_belli = {
#							any_target_title = {
#								this = root
#							}
#						}
#					}
#				}
#			}
#		}
#		scope:attacker = {
#			#Cannot press claims against your own vassals, as these must be revoked.
#			custom_description = {
#				text = "claimant_titles_held_by_attacker_vassals"
#				NOT = {
#					any_vassal_or_below = {
#						has_title = root
#					}
#				}
#			}
#		}
#		trigger_if = {
#			limit = {
#				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
#			}
#			trigger_if = {
#				limit = {
#					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
#				}
#				trigger_if = {
#					limit = {
#						scope:claimant = { is_adult = yes }
#					}
#					save_temporary_scope_as = treat_claim_as_weak
#				}
#				trigger_else = {
#					always = no
#				}
#			}
#			trigger_else_if = {
#				limit = {
#					scope:claimant = { is_adult = no }
#				}
#				save_temporary_scope_as = treat_claim_as_weak
#			}
#			# making the default behavior explicit if no other trigger_(else_)ifs are valid
#			trigger_else = {
#				always = yes
#			}
#		}
#		trigger_if = {
#			limit = { exists = scope:treat_claim_as_weak }
#			holder = {
#				custom_description = {
#					text = "claim_target_position_is_weak"
#					object = scope:attacker
#					OR = {
#						has_trait = incapable
#						is_adult = no
#						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
#					}
#				}
#			}
#		}
#		#Under Byzantine law, a ruler must be unblemished
#		trigger_if = {
#			limit = {
#				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
#			}
#			scope:claimant = {
#				custom_description = {
#					text = "byzantine_claimant_is_disfigured"
#					object = scope:claimant
#					NOR = {
#						has_trait = incapable
#						has_trait = blind
#						has_trait = disfigured
#						has_trait = eunuch
#						has_trait = maimed
#						has_trait = one_eyed
#						has_trait = one_legged
#						has_trait = clubfooted
#						has_trait = hunchbacked
#						has_trait = dwarf
#					}
#				}
#			}
#		}
#		#Under Byzantine law, a ruler must be able to produce children.
#		trigger_if = {
#			limit = {
#				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
#			}
#			scope:claimant = {
#				custom_description = {
#					text = "byzantine_claimant_is_celibate"
#					object = scope:claimant
#					NOR = {
#						has_trait = eunuch
#						has_trait = devoted
#						has_trait = celibate
#					}
#				}
#			}
#		}
#	}
#
#	cost = {
#		piety = {
#			value = 0
#			add = common_cb_impious_piety_cost
#		}
#		prestige = {
#			value = 0
#			add = claim_cb_prestige_cost
#			multiply = common_cb_prestige_cost_multiplier
#
#			if = {
#				limit = {
#					scope:attacker = {
#						has_character_flag = temp_no_claim_war_cost
#					}
#				}
#				multiply = {
#					value = 0
#					desc = "not_imprisoned_filter" # Says 'free'
#				}
#			}
#
#		}
#	}
#
#	target_titles = claim
#	target_title_tier = all
#
#	on_declaration = {
#		on_declared_war = yes
#		if = {
#			limit = {
#				scope:defender = { is_sibling_of = scope:attacker }
#			}
#			scope:attacker = {
#				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
#			}
#		}
#	}
#
#	should_invalidate = {
#		OR = {
#			NOT = {
#				any_in_list = {
#					list = target_titles
#					any_in_de_jure_hierarchy = {
#						tier >= tier_county
#						exists = holder
#						holder = {
#							OR = {
#								this = scope:defender
#								target_is_liege_or_above = scope:defender
#							}
#						}
#					}
#				}
#			}
#			AND = { 
#				NOT = { scope:claimant = scope:attacker } 
#				scope:claimant = {
#					OR = {
#						is_alive = no 
#						NOR = { 
#							is_vassal_or_below_of = scope:attacker 
#							is_courtier_of = scope:attacker 
#						}
#					}
#				}
#			} 
#		}
#	}
#
#	on_invalidated_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					NOT = { scope:claimant = scope:attacker } 
#					scope:claimant = { is_alive = no }
#				}
#				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
#			}
#			triggered_desc = {
#				trigger = {
#					scope:claimant = {
#						NOR = { 
#							this = scope:attacker 
#							NOR = { 
#								is_vassal_or_below_of = scope:attacker 
#								is_courtier_of = scope:attacker 
#							}
#						}
#					}
#				}
#				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
#			}
#			desc = msg_claim_war_invalidated_message
#		}
#	}
#	
#	on_invalidated = {
#	}
#
#	on_victory_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					scope:claimant = { is_local_player = yes }
#				}
#				desc = claim_cb_victory_desc_attacker_claimant
#			}
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = claim_cb_victory_desc_attacker
#			}
#			desc = claim_cb_victory_desc
#		}
#	}
#
#	on_victory = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#		create_title_and_vassal_change = {
#			type = conquest_claim
#			save_scope_as = change
#			add_claim_on_loss = yes
#		}
#		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
#		setup_claim_cb = {
#			titles = target_titles
#			attacker = scope:attacker
#			defender = scope:defender
#			claimant = scope:claimant
#			change = scope:change
#		}
#
#		resolve_title_and_vassal_change = scope:change
#
#		if = {
#			limit = {
#				NOT = { scope:claimant = scope:attacker }
#				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
#				scope:claimant = {
#					NOT = { target_is_liege_or_above = scope:attacker }
#				}
#			}
#
#			create_title_and_vassal_change = {
#				type = conquest_claim
#				save_scope_as = change_two
#				add_claim_on_loss = yes
#			}
#			scope:claimant = {
#				change_liege = {
#					liege = scope:attacker
#					change = scope:change_two
#				}
#			}
#			resolve_title_and_vassal_change = scope:change_two
#		}
#
#		if = {
#			limit = {
#				NOT = { scope:claimant = scope:attacker }
#				scope:attacker = {
#					can_add_hook = {
#					  	type = favor_hook
#					  	target = scope:claimant
#					}
#				}
#			}
#			scope:attacker = {
#				add_hook = {
#		  			target = scope:claimant
#		  			type = favor_hook
#		 		}
#			}
#		}
#
#		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
#		modify_all_participants_fame_values = {
#			WINNER = scope:attacker
#			LOSER = scope:defender
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_FAME_SCALE = 10
#			LOSER_FAME_SCALE = -10
#			WINNER_ALLY_FAME_SCALE = 10
#			LOSER_ALLY_FAME_SCALE = 10
#		}
#
#		# truce
#		add_truce_attacker_victory_effect = yes
#
#		# FP1: note the victory for future memorialisation via stele (if applicable).
#		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
#	}
#
#	on_white_peace_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = claim_cb_white_peace_desc_defender
#			}
#			desc = claim_cb_white_peace_desc
#		}
#		
#	}
#
#	on_white_peace = {
#		scope:attacker = {
#			show_pow_release_message_effect = yes
#			stress_impact = {
# 				ambitious = medium_stress_impact_gain
# 				arrogant = medium_stress_impact_gain
# 			}
#		}
#
#		# press claims
#		every_in_list = {
#			list = target_titles
#			if = {
#				limit = { scope:claimant = { has_weak_claim_on = prev } }
#				scope:claimant = {
#					make_claim_strong = prev
#				}
#			}
#		}
#
#		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
#		setup_claim_cb = {
#			titles = target_titles
#			attacker = scope:attacker
#			defender = scope:defender
#			claimant = scope:claimant
#			victory = no
#		}
#		# Prestige loss for the attacker
#		scope:attacker = {
#			add_prestige = {
#				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
#				multiply = -5.0
#			}
#		}
#		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
#		modify_allies_of_participants_fame_values = {
#			WINNER = scope:attacker
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_ALLY_FAME_SCALE = 10
#			LOSER_ALLY_FAME_SCALE = 10
#		}
#		# Defender neither gains nor loses any prestige.
#		scope:defender = {
#			stress_impact = {
# 				arrogant = medium_stress_impact_gain
# 			}
#		}
#
#		if = {
#			limit = {
#				NOT = { scope:claimant = scope:attacker }
#				scope:attacker = {
#					can_add_hook = {
#					  	type = favor_hook
#					  	target = scope:claimant
#					}
#				}
#			}
#			scope:attacker = {
#				add_hook = {
#		  			target = scope:claimant
#		  			type = favor_hook
#		 		}
#			}
#		}
#
#		# Truce
#		add_truce_white_peace_effect = yes
#	}
#
#	on_defeat_desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = { scope:defender = { is_local_player = yes } }
#				desc = claim_cb_defeat_desc_defender
#			}
#			triggered_desc = {
#				trigger = { scope:claimant = { is_local_player = yes } }
#				desc = claim_cb_defeat_desc_attacker_claimant
#			}
#			triggered_desc = {
#				trigger = { scope:attacker = { is_local_player = yes } }
#				desc = claim_cb_defeat_desc_attacker
#			}
#			desc = claim_cb_defeat_desc
#		}
#		
#	}
#
#	on_defeat = {
#		scope:attacker = { show_pow_release_message_effect = yes }
#
#		# lose claims
#		every_in_list = {
#			list = target_titles
#			scope:claimant = {
#				remove_claim = prev
#			}
#		}
#
#		if = {
#			limit = {
#				NOT = { scope:claimant = scope:attacker }
#				scope:attacker = {
#					can_add_hook = {
#					  	type = favor_hook
#					  	target = scope:claimant
#					}
#				}
#			}
#			scope:attacker = {
#				add_hook = {
#		  			target = scope:claimant
#		  			type = favor_hook
#		 		}
#			}
#		}
#
#		# Attacker pays gold to the defender as reparations.
#		scope:attacker = {
#			pay_short_term_gold_reparations_effect = {
#				GOLD_VALUE = 3
#			}
#		}
#		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
#		setup_claim_cb = {
#			titles = target_titles
#			attacker = scope:attacker
#			defender = scope:defender
#			claimant = scope:claimant
#			victory = no
#		}
#		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
#		modify_all_participants_fame_values = {
#			WINNER = scope:defender
#			LOSER = scope:attacker
#			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
#			IS_RELIGIOUS_WAR = no
#			WINNER_FAME_SCALE = scale_10_war_defender_win
#			LOSER_FAME_SCALE = -10
#			WINNER_ALLY_FAME_SCALE = 10
#			LOSER_ALLY_FAME_SCALE = 10
#		}
#
#		# Truce
#		add_truce_attacker_defeat_effect = yes
#
#		scope:attacker = {
#			save_temporary_scope_as = loser
#		}
#		on_lost_aggression_war_discontent_loss = yes
#	}
#
#	on_primary_attacker_death = inherit
#	on_primary_defender_death = inherit
#
#	transfer_behavior = transfer
#
#	attacker_allies_inherit = yes
#	defender_allies_inherit = yes
#
#	war_name = "CLAIM_WAR_NAME"
#	my_war_name = "CLAIM_WAR_NAME_MY"
#	war_name_base = "CLAIM_WAR_NAME_BASE"
#	cb_name = "CLAIM_CB_NAME"
#	interface_priority = 60
#
#	should_show_war_goal_subview = yes
#
#	attacker_wargoal_percentage = 0.8
#
#	max_ai_diplo_distance_to_title = 1000
#}