# Diarch (actor) offers to boost the CA/TA of liege (recipient), taking on the costs and negatives themselves so that they can use their diarch powers.
diarch_subsidise_crown_authority_interaction = {
	category = interaction_category_diarch
	diarch_interaction = yes
	notification_text = DIARCH_SUBSIDISE_AUTHORITY_PROPOSAL
	icon = icon_contract_modification_single

	desc = diarch_subsidise_crown_authority_interaction_desc

	popup_on_receive = yes
	pause_on_receive = yes

	is_shown = {
		# The obvious.
		NOT = { scope:actor = scope:recipient }
		# Diarchy checks for scope:actor.
		scope:actor = {
			# If you're not in a diarchy, we don't care.
			exists = liege
			is_diarch_of_target = liege
		}
		# Same sub-realm only.
		OR = {
			scope:actor.liege = scope:recipient
			scope:recipient = {
				any_liege_or_above = { this = scope:actor.liege }
			}
		}
	}

	is_valid_showing_failures_only = {
		# Make sure scope:recipient is the liege.
		custom_tooltip = {
			text = custom_description.tt.must_target_liege
			scope:recipient = scope:actor.liege
		}
		# Diarchs must have unlocked the appropriate power.
		scope:actor.liege = { has_diarchy_parameter = diarch_can_subsidise_liege_authority }
		# Can't subisidise past the point needed.
		custom_tooltip = {
			text = diarch_subsidise_crown_authority_interaction.tt.cannot_subsidise_past_necessary
			scope:recipient = {
				NOT = { has_realm_law_flag = diarchs_want_to_subsidise_without_this_flag }
			}
		}
		# And the liege can't have the max level of authority.
		custom_tooltip = {
			text = diarch_subsidise_crown_authority_interaction.tt.liege_cannot_have_max_authority
			scope:recipient = {
				NOT = { has_realm_law_flag = max_authority_level }
			}
		}
		# Aaaand, if you're not tribal, we need to check some innovations.
		scope:recipient = {
			# CA0 -> CA1.
			trigger_if = {
				limit = { has_realm_law = crown_authority_0 }
				can_pass_law_ca1_trigger = yes
			}
			# CA1 -> CA2.
			trigger_if = {
				limit = { has_realm_law = crown_authority_1 }
				can_pass_law_ca2_trigger = yes
			}
			# CA2 -> CA3.
			trigger_if = {
				limit = { has_realm_law = crown_authority_2 }
				can_pass_law_ca3_trigger = yes
			}
		}
	}

	# Why the hell not? If your liege dies several times in quick succession, sure, centralise all the power you like. That'll go well.
	cooldown_against_recipient = { years = 10 }

	cost = {
		prestige = {
			value = scope:recipient.increase_crown_authority_prestige_cost
			multiply = subsidised_liege_authority_discount_value
		}
	}
	
	on_accept = {
		scope:actor = {
			send_interface_toast = {
				title = diarch_subsidise_crown_authority_interaction.tt.accepted
				left_icon = scope:recipient
				scope:recipient = {
					# Try to change authority.
					increase_crown_authority_effect = yes
					increase_tribal_authority_effect = yes
					increase_mandala_authority_effect = yes
					# No one blames the liege for this.
					add_character_modifier = {
						modifier = liege_authority_boost_has_scapegoat_modifier
						years = 10
					}
				}
				# Aaaaand everyone knows what you did.
				change_strife_opinion = massive_strife_gain
			}
		}
	}

	on_decline = {
		scope:actor = {
			send_interface_toast = {
				title = diarch_subsidise_crown_authority_interaction.tt.declined
				left_icon = scope:recipient
				add_opinion = {
					target = scope:recipient
					modifier = refusal_opinion
					opinion = -20
				}
			}
		}
	}
	
	ai_accept = {
		base = 0

		# You want to do _what_? For free?
		modifier = {
			add = 100
			desc = diarch_subsidise_crown_authority_interaction.tt.absolutely_yes_please
			always = yes
		}
	}

	auto_accept = {
		custom_description = {
			text = auto_accept_interaction_ai	
			object = scope:recipient
			scope:recipient = {
				is_ai = yes
			}
		}
	}

	# AI
	ai_targets = { ai_recipients = liege }
	ai_frequency = 24
	ai_potential = {
		is_diarch = yes
		# Loyal diarchs don't engage in skullduggery.
		diarch_loyalty < diarch_loyalty_visibly_loyal_threshold
		# You also need prestige left over afterwards to use other interactions, so make sure the AI doesn't bankrupt itself on this.
		prestige >= {
			value = liege.increase_crown_authority_prestige_cost
			multiply = subsidised_liege_authority_discount_value
			add = major_prestige_value
		}
	}

	ai_will_do = {
		base = 0

		# Government situation.
		## Does your liege's gubermint allow you to bully people and take their stuff? No? Then you want to take this interaction; anyone who wouldn't has been pre-filtered.
		modifier = {
			add = 1000
			liege = {
				NOR = {
					#Vanilla error fix
					has_realm_law_flag = title_revocation_allowed
					has_realm_law_flag = vassal_retraction_allowed
				}
			}
		}
	}
}
