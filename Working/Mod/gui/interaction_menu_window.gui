
#### THE WINDOW

window = {
	gfxtype = windowgfx
	name = "character_interaction_menu_window"
	widgetid = "character_interaction_menu_window"										   
	movable = yes
	position = { 420 70 } #420 70
	alwaystransparent = yes
	layer = top
	allow_outside = yes
	size = { 350 90% }

	using = Window_Movable
	using = Animation_ShowHide_Quick

	# Not shown to the player, but is used by the hotkey system
	button_normal = {
		name = "button_close"
		size = { 0 0 }
		onclick = "[CharacterInteractionMenuWindow.Close]"
		shortcut = "close_window"
	}

	scrollarea = {
		#layoutpolicy_vertical = expanding
		size = { 100% 100% }
		alwaystransparent = yes

		scrollbarpolicy_horizontal = always_off

		scrollbar_vertical = {
			using = Scrollbar_Vertical
		}

		scrollwidget = {

			flowcontainer = {
				alwaystransparent = no
				direction = vertical
				ignoreinvisible = yes

				background = {
					visible = "[Not(GetGlobalVariable('DUIT_is_loaded').IsSet)]"
					texture = "gfx/interface/component_tiles/interaction_menu_bg.dds"
					spriteType = Corneredtiled
					spriteborder = { 11 11 }
					spriteborder_top = 49
					margin = { 8 14 }

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_window.dds"
						blend_mode = overlay
					}
				}
				background = {
					###DUIT
					visible = "[GetGlobalVariable('DUIT_is_loaded').IsSet]"
					texture = "[GetIllustration( 'duit_background_interaction_menu_bg' ).GetTexture(GetPlayer)]"
					###DUIT/
					spriteType = Corneredtiled
					spriteborder = { 11 11 }
					spriteborder_top = 49
					margin = { 8 14 }

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_window.dds"
						blend_mode = overlay
					}
				}

				widget = {
					datacontext = "[CharacterInteractionMenuWindow.GetCharacter]"
					size = { 100% 28 }
					name = "character_info"

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }

						text_single = {
							name = "character_name"
							visible = "[Not(Character.IsLocalPlayer)]"
							layoutpolicy_horizontal = expanding
							text = "GeneralUniUICharGetUINameNoTooltipU"
							default_format = "#Bold"
							align = nobaseline
							autoresize = no
						}

						text_single = {
							name = "character_name_me"
							visible = "[Character.IsLocalPlayer]"
							layoutpolicy_horizontal = expanding
							text = "FRAME_RELATION_ME"
							align = nobaseline
							autoresize = no
						}

						expand = {}

						hbox = {
							# [UniUI] [IMHO]
							UniUI_IMHO_button = {}
							# [/IMHO] [/UniUI]

							# Chronicle Begin

							button_history = {
								name = "show_chronicle"
								visible = "[GetGlobalVariable('chronicle_mod_version').IsSet]"
								datacontext = "[GetScriptedGui( 'chronicle_scripted_gui_show_chronicle' )]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Character.MakeScope ).AddScope( 'actor', GetPlayer.MakeScope ).End )]"
								onclick = "[CharacterInteractionMenuWindow.Close]"
								size = { 25 25 }

								raw_tooltip = "chronicle_shortcut_text"
								using = tooltip_ne
							}

							# Chronicle End

							button_pin = {
								name = "button_pin"
								visible = "[Not(Character.IsPinned)]"
								onclick = "[Character.ToggleCharacterPinned]"
								size = { 25 25 }

								tooltip = "PIN_TT"
								using = tooltip_se
							}

							button_barbershop = {
								name = "customize_portrait"
								visible = "[Or(Not(GameIsMultiplayer), And( GameIsMultiplayer, Character.CanCustomizePortrait))]"
								onclick = "[Character.OnCustomizePortrait]"
								onclick = "[CharacterInteractionMenuWindow.Close]"
								size = { 25 25 }

								tooltip = "CV_CUSTOMIZE_PORTRAIT"
								using = tooltip_ne
							}
							
							button_edit_text = {
								name = "button_rename"
								datacontext = "[GetScriptedGui( 'rename_character_after_birth' )]"
								visible = "[Character.CanCharacterBeRenamed]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'child', Character.MakeScope ).End  )]"
								size = { 25 25 }

								tooltip = "RENAME_CHARACTER" 
								using = tooltip_ne
							}
							
							button_go_to_my_location = {
								name = "button_go_to_my_location"
								onclick = "[Character.PanCameraTo]"
								size = { 25 25 }

								tooltip = "GOTO_CHARACTER"
								using = tooltip_ne
							}
						}
					}
				}

				widget = {
					size = { 317 40 }
					visible = [CharacterInteractionMenuWindow.OutsideDiplomaticRange]
					tooltip = OUT_OF_DIPLOMACY_RANGE_TOOLTIP

					text_label_center = {
						name = "label"
						parentanchor = center
						position = { 0 3 }
						text = OUT_OF_DIPLOMACY_RANGE
					}
				}

				# [UniUI] [IMHO]
				UniUI_IMHO_PoV = {}
				# [/IMHO] [/UniUI]

				dynamicgridbox = {
					name = "category_interaction_list"
					datamodel = "[CharacterInteractionMenuWindow.GetCategoryItems]"

					item = {
						flowcontainer_category_group = {}
					}
				}
			}
		}
	}

		### MORE INTERACTIONS
	container = {
		alwaystransparent = no
		visible = "[CharacterInteractionMenuWindow.AreMoreInteractionsVisisble]"
		name = "more_interactions_container"

		container = {
			position = { 10 0 }

			background = {
				visible = "[Not(GetGlobalVariable('DUIT_is_loaded').IsSet)]"
				texture = "gfx/interface/component_tiles/interaction_menu_more_bg.dds"
				spriteType = Corneredtiled
				spriteborder = { 11 11 }
				margin = { 8 8 }
				shaderfile = "gfx/FX/pdxgui_default.shader"

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_window.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
			}

			background = {
				###DUIT
				visible = "[GetGlobalVariable('DUIT_is_loaded').IsSet]"
				texture = "[GetIllustration( 'duit_background_interaction_menu_more_bg' ).GetTexture(GetPlayer)]"
				####DUIT/
				spriteType = Corneredtiled
				spriteborder = { 11 11 }
				margin = { 8 8 }
				shaderfile = "gfx/FX/pdxgui_default.shader"

				modify_texture = {
					name = "overlay"
					texture = "gfx/interface/component_overlay/overlay_window.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
			}

			dynamicgridbox_interaction_list = {
				datamodel = "[CharacterInteractionMenuWindow.GetMoreInteractions]"
			}
		}
	}
}