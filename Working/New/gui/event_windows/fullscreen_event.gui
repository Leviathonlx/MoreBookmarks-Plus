window = {
	name = "fullscreen_event"
	size = { 100% 100% }
	#scale = "[ScaleToFitElementInside('(int32)1920', '(int32)1080')]"
	movable = no

	layer = top

	datacontext = "[EventWindow.AccessEventWindowData]"

	widget = {
		size = { 110% 120% }
		alpha = 0

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1
			duration = 0.7
		}

		background = {
			name = "event_backdrop_darken"
			using = Background_Area_Dark
			margin = { 10 10 }
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		using = Sound_Panel_Popup_Snapshot
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	widget = {
		name = "window_background"
		parentanchor = center
		widgetanchor = center
		size = { 115% 760 }

		alpha = 0

		background = {
			name = "event_background_dark"
			texture = "gfx/interface/window_struggle/end_struggle_background.dds"
			alpha = 0.95
		}

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1
			delay = 0.2
			duration = 0.7

			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}
	}

	widget = {
		name = "event_image"
		parentanchor = center
		widgetanchor = center
		size = { 1920 626 }
		position = { 175 -5 }

		alpha = 0

		event_window_background_widget = {
			blockoverride "event_picture_properties"
			{
				modify_texture = {
					name = "event_picture_fade_left"
					texture = "gfx/interface/component_masks/mask_fade_struggle_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.9
				}

				modify_texture = {
					name = "event_picture_fade_short_left"
					texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
					mirror = horizontal
					blend_mode = alphamultiply
				}

				modify_texture = {
					name = "event_picture_fade_textured_up"
					texture = "gfx/interface/component_masks/mask_fade_textured_vertical_up.dds"
					translate_uv = { 0 -0.05 }
					blend_mode = alphamultiply
				}

				modify_texture = {
					name = "event_picture_fade_textured_down"
					texture = "gfx/interface/component_masks/mask_fade_textured_vertical_down.dds"
					translate_uv = { 0 0.05 }
					blend_mode = alphamultiply
				}
			}
		}

		state = {
			name = start
			trigger_on_create = yes
			using = Animation_Curve_Default
			alpha = 1
			delay = 0.2
			duration = 0.7

			start_sound = {
				soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

				soundparam = {
					name = StateChange
					value = 1
				}
			}
		}
	}

	widget = {
		name = "window_content"
		parentanchor = left|vcenter
		size = { 500 600 }
		position = { 35 0 }

		vbox = {
			name = "text"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }
				alpha = 0

				background = {
					using = Background_Area_Dark
					using = Mask_Rough_Edges

					margin_top = -6
					margin_left = 15

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
						blend_mode = alphamultiply
						mirror = horizontal
						rotate_uv = 0.9
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						name = "event_picture_fade_left"
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}
				}

				text_single = {
					name = "title"
					layoutpolicy_horizontal = expanding
					fontsize = 29
					fontsize_min = 16
					text = "[EventWindowData.GetTitle]"
					using = Font_Type_Flavor
					max_width = 480
					align = left
				}

				state = {
					name = start
					trigger_on_create = yes
					delay = 0.3
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.7
				}
			}

			hbox = {
				name = "description"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_left = 20

				alpha = 0

				scrollarea = {
					name = "description_scrollarea"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					minimumsize = { 500 -1 }
					maximumsize = { 500 -1 }

					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = Scrollbar_Vertical

						blockoverride "alpha"{
							alpha = 0.6
						}
					}

					scrollwidget = {
						text_multi = {
							name = "description"
							minimumsize = { 480 -1 }
							maximumsize = { 480 -1 }
							autoresize = yes
							margin_top = 5
							text = "[EventWindowData.GetDescription]"
							fontsize = 16
							align = left
						}
					}
				}

				state = {
					name = start
					trigger_on_create = yes
					delay = 0.4
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.7
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				name = "dynamic_content_widget"

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes
					delay = 0.5
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.7
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				allow_outside = yes
				ignoreinvisible = yes
				margin_top = 15

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes
					delay = 0.7
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.7
				}

				expand = {}

				vbox = {
					name = "custom_widgets_container"

					state = {
						trigger_on_create = yes
						name = appear_test
						delay = 0.8
						using = Animation_Curve_Default
						alpha = 1
						duration = 0.6
					}
				}

				fixedgridbox = {
					name = "option_grid"
					addcolumn = 500
					addrow = 42
					datamodel = "[EventWindowData.GetOptions]"

					item = {
						button_eventoption = {}
					}
				}
			}
		}
	}

	flowcontainer = {
		name = "debug_stuff"
		visible = "[InDebugMode]"
		parentanchor = top|right
		position = { -100 220 }
		ignoreinvisible = yes

		using = Event_Window_Debug_Info
	}
	
	widget = {
		name = "event_transition"
		parentanchor = center
		widgetanchor = center
		size = { 2246 730 }
		position = { 45 -5 }

		event_window_transition_widget = {
			using = Event_Window_Default_Transition_States
		}
	}
}
