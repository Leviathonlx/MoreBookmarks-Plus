window = {
	name = "scheme_preparations_event"
	parentanchor = center
	widgetanchor = center
	position = { -100 0 }
	size = { 1120 585 }
	layer = events
	alpha = 1

	datacontext = "[EventWindow.AccessEventWindowData]"
	datacontext = "[EventWindowData.GetScope.sScheme('scheme')]"
	datacontext = "[Scheme.GetSchemeType]"

	using = Event_Window_Debug_OptionTooltips

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

			soundparam = {
				name = StateChange
				value = 1
			}
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	event_window_dimmer_widget = {}

	widget = {
		parentanchor = bottom|hcenter
		size = { 100% 91% }
		using = Window_Background
		using = Window_Decoration_Frontend_Flat_Bottom
	}

	event_window_background_widget = {
		margin_left = 40
		margin_right = 40
		margin_top = 60
		margin_bottom = 20

		alpha = 0

		state = {
			name = appear
			trigger_on_create = yes
			delay = 0.1
			using = Animation_Curve_Default
			alpha = 1
			duration = 0.6
		}
	}

	###CHARACTERS
	widget = {
		name = "characters"
		layoutstretchfactor_horizontal = 55
		parentanchor = bottom|hcenter
		size = { 100% 100% }
		position = { -30 -17 }
		scissor = yes

		### RIGHT CHARACTER ###
		scheme_preparations_right_portrait_widget = {
			parentanchor = bottom|right
			position = { 30 0 }
			size = { 330 558 }

			alpha = 0

			state = {
				name = appear
				trigger_on_create = yes
				delay = 0.5
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.6
			}
		}

		### CENTER CHARACTER ###
		scheme_preparations_center_portrait_widget = {
			parentanchor = bottom|hcenter
			position = { 0 0 }
			size = { 330 558 }

			alpha = 0

			state = {
				name = appear
				trigger_on_create = yes
				delay = 0.5
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.4
			}
		}

		### LEFT CHARACTER ###
		scheme_preparations_left_portrait_widget = {
			parentanchor = bottom|left
			position = { 70 0 }
			size = { 330 558 }

			alpha = 0

			state = {
				name = appear
				trigger_on_create = yes
				delay = 0.5
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.2
			}
		}
	}

	# Event Effect Video
	event_window_effect_2d_widget = {
		margin = { 30 20 }
	}

	vbox = {
		name = "event_window"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		using = Window_Margins

		alpha = 0

		state = {
			name = appear
			trigger_on_create = yes
			delay = 0.6
			using = Animation_Curve_Default
			alpha = 1
			duration = 0.6
		}

		expand = {}

		vbox = {
			name = "scheme_event_options"
			layoutpolicy_horizontal = expanding
			spacing = 12
			margin_bottom = 10

			background = {
				using = Background_Area_Dark

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
					blend_mode = alphamultiply
				}
			}

			# Scheme Preparations status bar
			vbox = {
				name = "custom_widgets_container"
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area_ExtraDark

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
						blend_mode = alphamultiply
					}
				}
			}

			hbox = {
				fixedgridbox = {
					name = "option_grid"
					layoutpolicy_horizontal = expanding
					addcolumn = 256
					addrow = 42
					datamodel_wrap = 4

					flipdirection = yes

					datamodel = "[DataModelSkipLast(EventWindowData.GetOptions, '(int32)1')]"

					item = {
						button_scheme_event_option = {}
					}
				}
			}
		}
	}

	### Character CoAs ###
	margin_widget = {
		name = "bottom_info"
		size = { 93% 70 }
		position = { 0 -125}
		parentanchor = bottom|hcenter
		allow_outside = yes

		### LEFT CHARACTER INFO ###
		widget = {
			parentanchor = bottom|left
			position = { 270 0 }
			size = { 70 76 }
			allow_outside = yes

			flowcontainer = {
				name = "left_character_info_container"
				parentanchor = bottom|right
				direction = vertical
				ignoreinvisible = yes
				allow_outside = yes

				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes
					delay = 0.4
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.2
				}

				event_portrait_status_icons_left = {
					datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
					visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
				}
			}
		}

		### CENTER CHARACTER INFO ###
		widget = {
			parentanchor = bottom|hcenter
			size = { 70 76 }
			allow_outside = yes

			flowcontainer = {
				name = "center_character_info_container"
				parentanchor = bottom
				direction = vertical
				ignoreinvisible = yes
				allow_outside = yes

				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes
					delay = 0.5
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.2
				}

				event_portrait_status_icons_left = {
					datacontext = "[EventWindowData.GetPortraitCharacter('center_portrait')]"
					visible = "[EventWindowData.ShouldShowPortraitInfo('center_portrait')]"
				}
			}
		}

		### RIGHT CHARACTER INFO ###
		widget = {
			parentanchor = bottom|right
			position = { -10 0 }
			size = { 70 76 }
			allow_outside = yes

			flowcontainer = {
				name = "right_character_info_container"
				parentanchor = bottom|left
				direction = vertical
				ignoreinvisible = yes
				allow_outside = yes

				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes
					delay = 0.6
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.2
				}

				event_portrait_status_icons_left = {
					datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
					visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
				}
			}
		}
	}

	### HEADER ###
	widget = {		
		size = { 1120 76 }

		# Stained glass
		icon = {
			name = "stained_glass_background"
			parentanchor = hcenter
			size = { 1076 76 }
			texture = "gfx/interface/window_scheme/scheme_opportunity_header_stained_glass.dds"

			modify_texture = {
				name = overlay
				texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
				blend_mode = colordodge
				translate_uv = { 0.6 0 }
			}

			# Shimmer animation
			state = {
				name = right
				next = left

				duration = 2.5
				bezier = { 0.8 0.18 0.96 .05 }

				modify_texture = {
					name = overlay
					translate_uv = { -0.6 0 }
				}
			}

			state = {
				name = left
				next = right

				duration = 0.0
				delay = 5

				modify_texture = {
					name = overlay
					translate_uv = { 0.6 0 }
				}
			}

			state = {
				trigger_on_create = yes
				name = start
				next = right

				duration = 0.0

				modify_texture = {
					name = overlay
					translate_uv = { 0.6 0 }
				}
			}
		}

		# Frame
		icon = {
			name = "frame"
			parentanchor = hcenter
			size = { 1076 76 }
			texture = "gfx/interface/window_scheme/scheme_opportunity_header_frame.dds"
		}

		icon = {
			name = "theme_icons"
			parentanchor = hcenter
			size = { 1076 76 }

			# Hostile glass decoration
			icon = {
				visible = "[SchemeType.IsHostile]"
				parentanchor = left|vcenter
				position = { 38 7 }
				size = { 115 38 }
				texture = "gfx/interface/window_scheme/scheme_header_theme_hostile.dds"

				modify_texture = {
					texture = "gfx/interface/window_scheme/scheme_opportunity_header_mask.dds"
					blend_mode = alphaMultiply
				}
			}

			icon = {
				visible = "[SchemeType.IsHostile]"
				parentanchor = right|vcenter
				position = { -39 6 }
				size = { 115 38 }
				texture = "gfx/interface/window_scheme/scheme_header_theme_hostile.dds"
				mirror = horizontal

				modify_texture = {
					texture = "gfx/interface/window_scheme/scheme_opportunity_header_mask.dds"
					blend_mode = alphaMultiply
				}
			}

			# Personal glass decoration
			icon = {
				visible = "[SchemeType.IsPersonal]"
				parentanchor = left|vcenter
				position = { 38 7 }
				size = { 115 38 }
				texture = "gfx/interface/window_scheme/scheme_header_theme_personal.dds"

				modify_texture = {
					texture = "gfx/interface/window_scheme/scheme_opportunity_header_mask.dds"
					blend_mode = alphaMultiply
				}
			}

			icon = {
				visible = "[SchemeType.IsPersonal]"
				parentanchor = right|vcenter
				position = { -39 6 }
				size = { 115 38 }
				texture = "gfx/interface/window_scheme/scheme_header_theme_personal.dds"
				mirror = horizontal

				modify_texture = {
					texture = "gfx/interface/window_scheme/scheme_opportunity_header_mask.dds"
					blend_mode = alphaMultiply
				}
			}

			# Politcal scheme decoration
			icon = {
				visible = "[SchemeType.IsPolitical]"
				parentanchor = left|vcenter
				position = { 38 7 }
				size = { 115 38 }
				texture = "gfx/interface/window_scheme/scheme_header_theme_political.dds"

				modify_texture = {
					texture = "gfx/interface/window_scheme/scheme_opportunity_header_mask.dds"
					blend_mode = alphaMultiply
				}
			}

			icon = {
				visible = "[SchemeType.IsPolitical]"
				parentanchor = right|vcenter
				position = { -39 6 }
				size = { 115 38 }
				texture = "gfx/interface/window_scheme/scheme_header_theme_political.dds"
				mirror = horizontal

				modify_texture = {
					texture = "gfx/interface/window_scheme/scheme_opportunity_header_mask.dds"
					blend_mode = alphaMultiply
				}
			}
		}

		text_single = {
			name = "title"
			parentanchor = hcenter|vcenter
			position = { 0 2 }
			fontsize = 29
			fontsize_min = 16
			text = "[EventWindowData.GetTitle]"
			default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
			using = Font_Type_Flavor
			max_width = 950

			alpha = 0

			background = {
				using = Background_Area_Dark
				margin = { 180 0 }
				margin_top = 10
				margin_bottom = 20
				alpha = 0.7

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_circle.dds"
					blend_mode = alphaMultiply
				}
			}

			state = {
				name = start
				trigger_on_create = yes
				delay = 0.2
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.3
			}
		}

		button_close = {
			name = "button_close"
			datacontext_from_model = {
				datamodel = "[EventWindowData.GetOptions]"
				index = "[Subtract_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)1' ) ]"
			}
			parentanchor = right|vcenter
			position = { -95 6 }
			shortcut = "close_window"
			tooltip = "CLOSE_TOOLTIP"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			onclick = "[EventOption.Select]"

			background = {
				using = Background_Area_Solid
				alpha = 0.8

				margin = { 2 2 }
			}
		}
	}

	icon = {
		name = "source_icon"
		visible = "[And( EventWindowData.ShouldShowContentSource, EventWindowData.GetContentSourceDlc.HasEventDecoration )]"
		position = { -22 20 }
		size = { 263 64 }
		parentanchor = top|right
		texture = "[EventWindowData.GetContentSourceDlc.GetEventDecoration]"
		tooltip = "EVENT_CONTENT_SOURCE_TT"
		alpha = 1
	}

	flowcontainer = {
		name = "debug_stuff"
		visible = "[InDebugMode]"
		parentanchor = top|right
		position = { -700 25 }
		ignoreinvisible = yes

		using = Event_Window_Debug_Info
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types Events
{
	type button_scheme_event_option = button_event_standard
	{
		name = "event_option_button"
		size = { 256 36 }
		enabled = "[EventOption.IsValid]"

		default_clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
		onclick = "[EventOption.Select]"
		clicksound = "[EventOption.GetClickSound]"

		block "onmousehierarchy_callbacks" {
			onmousehierarchyenter = "[EventOption.OnEnter]"
			onmousehierarchyleave = "[EventOption.OnLeave]"
		}

		icon = {
			texture = "gfx/interface/buttons/button_event.dds"
			alpha = 1
			spriteType = Corneredtiled
			spriteborder = { 3 3 }
			framesize = { 249 78 }
			size = { 100% 100% }

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				spriteType = Corneredtiled
				spriteborder_left = 40
				spriteborder_right = 40
				blend_mode = alphamultiply
			}
		}

		# Trick to not have the option text steal tooltips from the trait/skill grid
		hbox = {
			tooltip = "[EventOption.GetTooltip]"
			tooltip_visible = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"

			block "option_tooltip_position"
			{
				using = tooltip_ws
				tooltip_offset = { -80 0 }
			}

			# Wider tooltips for the effects
			tooltipwidget = {
				using = DefaultTooltipWidget
			}
		}

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
			spriteType = Corneredtiled
			spriteborder_left = 40
			spriteborder_right = 40
			blend_mode = alphamultiply
		}

		animation_glow_event = {
			name = "special_option"
			visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
		}

		animation_glow_event = {
			name = "dangerous_option"
			visible = "[EventOption.HasFlag('dangerous')]"
			using = Color_Red
		}

		### BUTTON CONTENT ####
		hbox = {
			margin = { 5 0 }

			hbox = {
				fixedgridbox = {
					name = "reason_icons"
					datamodel = "[EventOption.Reasons]"
					addcolumn = 34
					addrow = 34
					flipdirection = yes

					item = {
						container = {
							icon = {
								name = "trait_icon"
								datacontext = "[ReasonItem.GetTrait]"

								visible = "[ReasonItem.IsTrait]"
								alwaystransparent = yes

								texture = "[Trait.GetIcon(GetPlayer)]"
								size = { 34 34 }

								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
								using = tooltip_nw
							}

							icon = {
								name = "skill_icon"
								datacontext = "[ReasonItem.GetSkillItem]"

								visible = "[ReasonItem.IsSkill]"
								alwaystransparent = yes

								texture = "gfx/interface/icons/icon_skills.dds"
								size = { 34 34 }
								framesize = { 60 60 }
								frame = "[SkillItem.GetFrame]"

								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
								using = tooltip_ws
							}

							icon = {
								name = "dread_icon"
								visible = "[ReasonItem.IsFlag( 'dread' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/icon_dread.dds"
								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_DREAD"
							}

							icon = {
								name = "activity_intent_icon"
								visible = "[ReasonItem.IsFlag( 'activity_intent' )]"
								size = { 34 34 }
								texture = "[GetPlayer.GetInvolvedActivity.GetType.GetIcon]"
								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_ACTIVITY_INTENT"
							}

							icon = {
								name = "prestige_icon"
								visible = "[ReasonItem.IsFlag( 'prestige_level' )]"
								size = { 34 34 }
								texture = "[GetPlayer.GetPrestigeLevelTexture]"
								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_PRESTIGE_LEVEL"
							}

							icon = {
								name = "piety_icon"
								visible = "[ReasonItem.IsFlag( 'piety_level' )]"
								size = { 34 34 }
								texture = "[GetPlayer.GetPietyLevelTexture]"
								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_PIETY_LEVEL"
							}

							icon = {
								name = "faith_icon"
								visible = "[ReasonItem.IsFlag( 'faith' )]"
								size = { 34 34 }
								texture = "[GetPlayer.GetFaith.GetIcon]"
								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_FAITH"
							}

							icon = {
								name = "scheme_success_icon"
								visible = "[ReasonItem.IsFlag( 'gives_scheme_success' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
								tooltip = "EVENT_WINDOW_OPTION_GIVES_SCHEME_SUCCESS"
							}

							icon = {
								name = "scheme_phase_duration_icon"
								visible = "[ReasonItem.IsFlag( 'gives_scheme_phase_duration' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/schemes/icon_scheme_speed.dds"
								tooltip = "EVENT_WINDOW_OPTION_GIVES_SCHEME_PHASE_DURATION"
							}

							icon = {
								name = "purpose_mercenaries_icon"
								visible = "[ReasonItem.IsFlag( 'purpose_mercenaries' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								tooltip = "EVENT_WINDOW_OPTION_PURPOSE_MERCENARIES"
							}

							icon = {
								name = "purpose_wanderers_icon"
								visible = "[ReasonItem.IsFlag( 'purpose_wanderers' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								tooltip = "EVENT_WINDOW_OPTION_PURPOSE_WANDERERS"
							}

							icon = {
								name = "purpose_scholars_icon"
								visible = "[ReasonItem.IsFlag( 'purpose_scholars' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								tooltip = "EVENT_WINDOW_OPTION_PURPOSE_SCHOLARS"
							}

							icon = {
								name = "purpose_explorers_icon"
								visible = "[ReasonItem.IsFlag( 'purpose_explorers' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								tooltip = "EVENT_WINDOW_OPTION_PURPOSE_EXPLORERS"
							}

							icon = {
								name = "purpose_brigands_icon"
								visible = "[ReasonItem.IsFlag( 'purpose_brigands' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								tooltip = "EVENT_WINDOW_OPTION_PURPOSE_BRIGANDS"
							}

							icon = {
								name = "purpose_legitimists_icon"
								visible = "[ReasonItem.IsFlag( 'purpose_legitimists' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/title_status/icon_title_law.dds"
								tooltip = "EVENT_WINDOW_OPTION_PURPOSE_LEGITIMISTS"
							}
							
							icon = {
								name = "estate_building_wine_cellar_icon"
								visible = "[ReasonItem.IsFlag( 'estate_building_wine_cellar' )]"
								size = { 34 34 }
								texture = "gfx/interface/icons/map_icons/map_icon_estate.dds"
								tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_ESTATE_BUILDING_WINE_CELLAR"
							}
						}
					}
				}

				warning_icon = {
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindowData.GetDaysRemaining, '(int32)30' ) ) )]"
					name = "timeout_icon"
					size = { 30 30 }
					tooltip = EVENT_WINDOW_DAYS_REMAINING
				}
			}

			###### SPACER ######
			hbox = {
				name = "spacer_effects"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {
						container = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes

							spacer = {
								datacontext = "[OptionEffectItem.GetTrait]"
								size = { 34 34 }
							}
						}

						spacer = {
							visible = "[OptionEffectItem.IsStress]"
							size = { 34 34 }
						}

						spacer = {
							visible = "[OptionEffectItem.IsScheme]"
							size = { 34 34 }
						}

						spacer = {
							visible = "[OptionEffectItem.IsDeath]"
							size = { 34 34 }
						}
					}
				}
			}

			# Valid option
			text_single = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }
				alwaystransparent = yes
				visible = "[EventOption.IsValid]"

				text = "[EventOption.GetText]"
				autoresize = no
				default_format = "#high"
				align = center|nobaseline
				fontsize_min = 12
			}

			# Invalid option
			text_single = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }
				alwaystransparent = yes
				visible = "[Not( EventOption.IsValid )]"

				text = "[EventOption.GetText]"
				autoresize = no
				default_format = "#low"
				align = center|nobaseline
				fontsize_min = 12
			}

			##### SPACER #####
			hbox = {
				hbox = {
					name = "reason_spacers"
					datamodel = "[EventOption.Reasons]"
					item = {
						spacer = {
							size = { 34 34 }
						}
					}
				}

				hbox = {
					name = "timeout_spacer"
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindowData.GetDaysRemaining, '(int32)30' ) ) )]"

					spacer = {
						size = { 34 34 }
					}
				}
			}

			hbox = {
				name = "effects_grid"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {
						container = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes

							icon = {
								datacontext = "[OptionEffectItem.GetTrait]"
								name = "trait_icon"
								size = { 34 34 }
								texture = "[Trait.GetIcon(GetPlayer)]"
							}

							icon = {
								visible = "[OptionEffectItem.IsGain]"
								texture = "gfx/interface/icons/symbols/icon_plus_small.dds"
								name = "gain"
								size = { 20 20 }
							}

							icon = {
								visible = "[OptionEffectItem.IsLoss]"
								texture = "gfx/interface/icons/symbols/icon_minus_small.dds"
								name = "loss"
								size = { 20 20 }
							}
						}

						container = {
							visible = "[OptionEffectItem.IsStress]"
							alwaystransparent = yes

							icon = {
								visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
								texture = "gfx/interface/icons/stress/icon_stress_gain.dds"
								name = "stress_gain"
								size = { 34 34 }
							}

							icon = {
								visible = "[OptionEffectItem.IsLoss]"
								texture = "gfx/interface/icons/stress/icon_stress_loss.dds"
								name = "stress_loss"
								size = { 34 34 }
							}

							icon = {
								visible = "[OptionEffectItem.IsCritical]"
								texture = "gfx/interface/icons/stress/icon_stress_gain_critical.dds"
								name = "stress_critical"
								size = { 34 34 }
							}
						}

						icon = {
							name = "death"
							visible = "[OptionEffectItem.IsDeath]"
							size = { 34 34 }
							texture = "gfx/interface/icons/icon_dead.dds"
						}

						icon = {
							name = "scheme"
							visible = "[OptionEffectItem.IsScheme]"
							size = { 34 34 }
							texture = "[OptionEffectItem.GetScheme.GetIcon]"
						}
					}
				}
			}
		}
	}

	type scheme_preparations_left_portrait_widget = widget {
		allow_outside = no

		portrait_event = {
			name = "portrait_left"
			datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
			visible = "[EventWindowData.HasPortraitCharacter('left_portrait')]"
			parentanchor = bottom|hcenter
			position = { 60 0 }
			size = { 500 558 }

			blockoverride "portrait_button"
			{
				size = { 700 558 }
				portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"

				tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
				using = tooltip_below
				tooltip_widgetanchor = center
			}

			blockoverride "highlight_visible"
			{
				visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
				position = { -40 0 }
			}

			blockoverride "grayscale" {}

			highlight_icon = {
				name = "prison_bars"
				visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
				visible_at_creation = no
				size = { 280 500 }
				position = { 70 0 }
				parentanchor = bottom|left
				effectname = "NoHighlight"
				spriteType = corneredTiled
				texture_density = 1.5
				texture = "gfx/portraits/portrait_prison_body.dds"

				modify_texture = {
					name = "mask"
					texture =  "gfx/portraits/portrait_mask_event.dds"
					spriteType = Corneredstretched
					blend_mode = alphamultiply
				}
			}
		}
	}

	type scheme_preparations_center_portrait_widget = widget {
		allow_outside = no

		portrait_event = {
			name = "portrait_center"
			datacontext = "[EventWindowData.GetPortraitCharacter('center_portrait')]"
			visible = "[EventWindowData.HasPortraitCharacter('center_portrait')]"
			parentanchor = bottom|hcenter
			position = { 0 0 }
			size = { 500 558 }

			blockoverride "portrait_button"
			{
				size = { 700 558 }
				portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('center_portrait', 'camera_event_center', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('center_portrait'))]"

				tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('center_portrait')]"
				using = tooltip_below
				tooltip_widgetanchor = center
			}

			blockoverride "highlight_visible"
			{
				visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('center_portrait') ))]"
				position = { -40 0 }
			}

			blockoverride "grayscale" {}

			highlight_icon = {
				name = "prison_bars"
				visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('center_portrait')))]"
				visible_at_creation = no
				size = { 280 500 }
				position = { 10 0 }
				parentanchor = bottom|hcenter
				effectname = "NoHighlight"
				spriteType = corneredTiled
				texture_density = 1.5
				texture = "gfx/portraits/portrait_prison_body.dds"

				modify_texture = {
					name = "mask"
					texture =  "gfx/portraits/portrait_mask_event.dds"
					spriteType = Corneredstretched
					blend_mode = alphamultiply
				}
			}
		}
	}

	type scheme_preparations_right_portrait_widget = widget {
		allow_outside = no

		portrait_event = {
			name = "portrait_right"
			datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
			visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
			parentanchor = bottom|hcenter
			position = { -130 -1 }
			size = { 500 558 }

			blockoverride "portrait_button"
			{
				size = { 700 558 }
				portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"

				tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
				tooltip_offset = { -210 0 }
			}

			blockoverride "highlight_visible"
			{
				visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
				position = { 80 0 }
			}

			blockoverride "grayscale" {}

			highlight_icon = {
				name = "prison_bars"
				visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
				visible_at_creation = no
				size = { 285 500 }
				position = { -30 0 }
				parentanchor = bottom|right
				effectname = "NoHighlight"
				spriteType = corneredTiled
				texture_density = 1.5
				texture = "gfx/portraits/portrait_prison_body.dds"

				modify_texture = {
					name = "mask"
					texture =  "gfx/portraits/portrait_mask_event.dds"
					spriteType = Corneredstretched
					blend_mode = alphamultiply
				}
			}
		}
	}
}
