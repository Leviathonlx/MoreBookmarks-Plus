######################################################
################# CREATE ACCOLADE VIEW ###################
######################################################

window = {
	name = "create_accolade_view"
	size = { 540 865 }
	parentanchor = top|right
	position = { -626 170 }
	movable = no
	layer = middle
	datacontext = "[CreateAccoladeView.AccessMilitaryView]"

	using = Window_Background_Subwindow

	state = {
		name = _show
		using = Animation_FadeIn_Quick

		position = { -626 170 }
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick

		position_x = -570
	}

	vbox = {
		name = "create_accolade_tutorial_uses_this"
		widgetid = "create_accolade_tutorial_uses_this"
		margin = { 4 4 }

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "CREATE_ACCOLADE"
			}

			blockoverride "button_close"
			{
				onclick = "[CreateAccoladeView.Close]"
				onclick = "[OpenGameView( 'knights' )]"
				texture = "gfx/interface/icons/flat_icons/window_back.dds"
				tooltip = "BACK_TOOLTIP"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 16 0 }
			margin_top = 8

			widget = {
				size = { 140 160 }

				accolade_banner = {
					size = { 100% 100% }
				}

				portrait_shoulders = {
					datacontext = "[CreateAccoladeView.GetSelectedKnight]"
					parentanchor = center
				}
			}

			vbox = {
				visible = "[CreateAccoladeView.GetSelectedKnight.IsValid]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				margin = { 16 0 }

				background = {
					using = Background_Area

					margin = { 0 2 }
				}

				hbox = {
					spacing = 8
					layoutpolicy_horizontal = expanding

					margin = { 0 8 }

					background = {
						using = Background_Area_Dark
						alpha = 0.6
						margin = { 16 0 }
					}

					text_single = {
						visible = "[Not( CreateAccoladeView.IsRenaming )]"
						text = "[CreateAccoladeView.GetAccoladeName]"
						max_width = 285
						using = Font_Size_Medium
						align = nobaseline
					}

					button_edit_text = {
						size = { 25 25 }
						visible = "[Not( CreateAccoladeView.IsRenaming )]"
						onclick = "[CreateAccoladeView.ToggleRenaming]"
					}

					editbox_standard = {
						layoutpolicy_horizontal = expanding
						visible = "[CreateAccoladeView.IsRenaming]"

						blockoverride "editbox_properties"
						{
							name = "accolade_name"
							text = "[CreateAccoladeView.GetTempName]"
							ontextedited = "[CreateAccoladeView.EditName]"
							onreturnpressed = "[CreateAccoladeView.SubmitName]"
						}
					}

					expand = {}
				}

				hbox = {
					name = "candidate_attributes_tutorial_uses_this"
					widgetid = "candidate_attributes_tutorial_uses_this"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 8

						accolade_type_box = {
							datacontext = "[CreateAccoladeView.GetSelectedPrimaryType]"

							blockoverride "subtitle_text"
							{
								text = "ACCOLADE_PRIMARY_TYPE"
							}

							blockoverride "change_button"
							{
								icon = {
									visible = "[AccoladeType.GetPrimaryMaaUnlock.IsValid]"
									datacontext = "[AccoladeType.GetPrimaryMaaUnlock]"
									texture = "[MenAtArmsType.GetIcon]"
									tooltipwidget = {
										using = maa_type_container_tooltip
									}
									size = { 30 30 }
								}

								button_round = {
									name = "change_primary_type"
									size = { 32 32 }

									enabled = "[GreaterThan_int32( GetDataModelSize( CreateAccoladeView.GetPotentialTypes ), '(int32)2')]"
									onclick = "[CreateAccoladeView.ToggleChangingPrimaryType]"
									tooltip = "[CreateAccoladeView.GetChangePrimaryTypeTooltip]"

									button_change = {
										parentanchor = center
										size = { 24 24 }
										alwaystransparent = yes
									}
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							allow_outside = yes

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							widget = {
								size = { 30 6 }
								allow_outside = yes

								button_round = {
									size = { 24 24 }
									parentanchor = center
									widgetanchor = center

									enabled = "[GreaterThan_int32( GetDataModelSize( CreateAccoladeView.GetPotentialTypes ), '(int32)1')]"
									onclick = "[CreateAccoladeView.SwapSelectedAttributeTypes]"

									button_change = {
										parentanchor = center
										size = { 18 18 }
										alwaystransparent = yes
									}
								}
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
							}
						}

						accolade_type_box = {
							datacontext = "[CreateAccoladeView.GetSelectedSecondaryType]"

							blockoverride "subtitle_text"
							{
								text = "ACCOLADE_SECONDARY_TYPE"
							}

							blockoverride "icons"
							{
								icon = {
									visible = "[AccoladeType.GetPrimaryMaaUnlock.IsValid]"
									datacontext = "[AccoladeType.GetPrimaryMaaUnlock]"
									texture = "[MenAtArmsType.GetIcon]"
									tooltipwidget = {
										using = maa_type_container_tooltip
									}
									size = { 30 30 }

									icon = {
										size = { 30 30 }
										position = { 5 5 }
										texture = "gfx/interface/icons/symbols/icon_cross.dds"
										tooltip = "[AccoladeType.GetPrimaryMaaUnlockWarning]"
									}
								}
							}

							blockoverride "change_button"
							{
								button_round = {
									name = "change_secondary_type"
									size = { 32 32 }

									enabled = "[GreaterThan_int32( GetDataModelSize( CreateAccoladeView.GetPotentialTypes ), '(int32)2')]"
									onclick = "[CreateAccoladeView.ToggleChangingSecondaryType]"
									tooltip = "[CreateAccoladeView.GetChangeSecondaryTypeTooltip]"

									button_change = {
										parentanchor = center
										size = { 24 24 }
										alwaystransparent = yes
									}
								}
							}
						}
					}
				}

				expand = {}
			}

			vbox = {
				visible = "[Not(CreateAccoladeView.GetSelectedKnight.IsValid)]"
				layoutpolicy_horizontal = expanding
				margin = { 8 0 }

				text_multi = {
					text = "CREATE_ACCOLADE_SELECT_KNIGHT"
					default_format = "#help"
					using = Font_Size_Medium
					autoresize = yes
					max_width = 300
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 20 4 }
			visible = "[CreateAccoladeView.GetSelectedKnight.IsValid]"

			hbox = {
				margin = { 0 8 }
				allow_outside = yes

				widget = {
					size = { 460 30 }
					allow_outside = yes

					datacontext = "[CreateAccoladeView.GetProgressBar]"

					hbox_complex_bar_progress = {
						layoutpolicy_horizontal = expanding
					}

					hbox_complex_bar_progress_next = {
						layoutpolicy_horizontal = expanding
					}

					hbox_complex_bar_levels = {
						layoutpolicy_horizontal = expanding

						blockoverride "marker" {
							icon = {
								name = "rank_icon"
								parentanchor = center
								widgetanchor = center
								allow_outside = yes
								size = { 44 44 }

								texture = "[CreateAccoladeView.GetComplexBarRankIcon( ComplexBar.GetIndexOfItem( ComplexBarItem.Self ) )]"
								tooltip = "[CreateAccoladeView.GetComplexBarRankTooltip( ComplexBar.GetIndexOfItem( ComplexBarItem.Self ) )]"
							}
						}
					}
				}

			}
		}

		hbox = {
			spacing = 8
			margin = { 0 16 }

			button_standard = {
				size = { 200 40 }

				onclick = "[CreateAccoladeView.Close]"
				onclick = "[OpenGameView( 'knights' )]"

				text = "CANCEL"
			}

			button_primary = {
				size = { 200 40 }
				enabled = "[CreateAccoladeView.CanCreateAccolade]"
				onclick = "[CreateAccoladeView.CreateAccolade]"

				tooltip = "[CreateAccoladeView.GetCreateAccoladeTooltip]"
				text = "CREATE_ACCOLADE"
			}
		}

		hbox = {
			margin_bottom = 8

			text_label_center = {
				text = "KNIGHTS_SUBHEADER"
				default_format = "#medium"
			}
		}

		scrollbox = {
			name = "accolade_candidate_list_tutorial_uses_this"

			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			visible = "[Not( CreateAccoladeView.IsChangingType )]"

			blockoverride "scrollbox_content" {
				vbox = {
					layoutpolicy_horizontal = expanding

					name = "acclaimed_knights"
					datamodel = "[MilitaryView.GetKnights]"
					datacontext = "[CreateAccoladeView.AccessKnightsView]"
					spacing = 8

					item = {
						button_standard = {
							layoutpolicy_horizontal = expanding
							size = { 0 130 }

							# has at least 2 potential accolade types
							visible = "[And( Or( Not( Character.HasLandedTitles ), Character.GetPrimaryTitle.IsBarony ), KnightsView.HasPotentialAccolade( Character.Self ) ) )]"
							onclick = "[CreateAccoladeView.SetSelectedKnight( Character.Self )]"
							tooltip = "CREATE_ACCOLADE_ASSIGN_TT"
							using = tooltip_nw

							blockoverride "Background_Guest_pattern_visible"
							{
								visible = "[Character.IsGuest]"
								margin_bottom = -5
								margin_right = 5
							}

							blockoverride "Background_Guest_frame_visible"
							{
								visible = "[Character.IsGuest]"
								margin_left = 3
								margin_bottom = -5
								margin_top = 1
								margin_right = 5
							}

							vbox = {
								spacing = 8
								margin_top = 4
								margin_left = 4
								margin_right = 16

								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin_right = 4
									spacing = 5

									portrait_head = {
										alpha = "[Select_float( Character.IsKnight, '(float)1.0', '(float)0.6' )]"
									}

									vbox = {
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										spacing = 10
										margin_top = 10

										hbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												spacing = 4

												icon = {
													visible = "[Character.IsKnight]"
													texture = "gfx/interface/icons/icon_knight_small.dds"
													size = { 40 40 }
												}

												vbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Character.GetNameNoTooltip]"
														using = Font_Size_Medium
														autoresize = no
														alwaystransparent = yes
													}


													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[Character.GetRelationToString( GetPlayer )]"
														default_format = "#low"
														autoresize = no
														align = nobaseline
														alwaystransparent = yes
													}

													expand = {}
												}
											}

											vbox = {
												layoutpolicy_vertical = expanding
												margin = { 4 4 }

												text_label_center  = {
													text = "[prowess_i][Character.GetSkill( 'prowess' )]"
													using = Font_Size_Big
													default_format = "#high"
													alwaystransparent = yes
												}

												expand = {}
											}
										}

										hbox = {
											visible = "[Not(Character.IsGuest)]"
											layoutpolicy_horizontal = expanding
											spacing = 5

											button_standard = {
												size = { 90 33 }
												onclick = "[MilitaryView.SetKnightForced( Character.Self )]"
												down = "[Character.IsKnightForced]"
												alwaystransparent = "[Character.IsKnightForced]"

												text = "KNIGHTS_VIEW_FORCE"

												tooltip = "KNIGHTS_VIEW_TITLE_FORCE_TT"
												using = tooltip_se
											}

											button_standard = {
												size = { 90 33 }
												onclick = "[MilitaryView.SetKnightDefault( Character.Self )]"
												down = "[Character.IsKnightDefault]"
												alwaystransparent = "[Character.IsKnightDefault]"

												text = "KNIGHTS_VIEW_ALLOW"

												tooltip = "KNIGHTS_VIEW_TITLE_BY_PROWESS_TT"
												using = tooltip_se
											}

											button_standard = {
												size = { 90 33 }
												onclick = "[MilitaryView.SetKnightDisallowed( Character.Self )]"
												down = "[Character.IsKnightDisallowed]"
												alwaystransparent = "[Character.IsKnightDisallowed]"
												enabled = "[Not( Character.IsAcclaimedKnight )]"

												text = "KNIGHTS_VIEW_FORBID"
												tooltip = "[SelectLocalization( Character.IsAcclaimedKnight, 'CANNOT_FORBID_ACCLAIMED_KNIGHT', 'KNIGHTS_VIEW_TITLE_FORBID_TT' )]"
												using = tooltip_se
											}

											expand = {}

											icon = {
												visible = "[And( HasDlcFeature( 'accolades' ), And( Or( Not( Character.HasLandedTitles ), Character.GetPrimaryTitle.IsBarony ), KnightsView.HasPotentialAccolade( Character.Self ) ) )]"

												texture = "gfx/interface/icons/icon_knight_acclaimed.dds"
												size = { 30 30 }

												tooltipwidget = {
													using = accolade_types_tooltip
												}

												icon = {
													visible = "[Not( KnightsView.CanBeAcclaimedKnight( Character.Self ) )]"
													size = { 25 25 }
													position = { 10 10 }
													texture = "gfx/interface/icons/symbols/icon_cross.dds"
												}
											}
										}

										hbox = {
											visible = "[Character.IsGuest]"
											layoutpolicy_horizontal = expanding

											button_standard = {
												visible = "[Character.IsPlayerInteractionShown('recruit_guest_interaction')]"
												enabled = "[Character.IsPlayerInteractionValid('recruit_guest_interaction')]"
												onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
												text = "[Character.GetPlayerInteractionName('recruit_guest_interaction')]"
												tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"
												using = tooltip_se
											}

											expand = {}

											icon = {
												datacontext = "[CreateAccoladeView.AccessKnightsView]"

												visible = "[And( HasDlcFeature( 'accolades' ), And( Or( Not( Character.HasLandedTitles ), Character.GetPrimaryTitle.IsBarony ), KnightsView.HasPotentialAccolade( Character.Self ) ) )]"

												texture = "gfx/interface/icons/icon_knight_acclaimed.dds"
												size = { 30 30 }

												tooltipwidget = {
													using = accolade_types_tooltip
												}

												icon = {
													visible = "[Not( KnightsView.CanBeAcclaimedKnight( Character.Self ) )]"
													size = { 25 25 }
													position = { 10 10 }
													texture = "gfx/interface/icons/symbols/icon_cross.dds"
												}
											}
										}

										expand = {}
									}

								}

								divider = {
									layoutpolicy_horizontal = expanding
								}
							}
						}
					}
				}
			}
		}

		scrollbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			visible = "[CreateAccoladeView.IsChangingType]"

			blockoverride "scrollbox_content" {

				vbox = {
					name = "accolade_types"
					datamodel = "[CreateAccoladeView.GetPotentialTypes]"
					layoutpolicy_horizontal = expanding
					spacing = 10

					item = {
						hbox = {
							visible = "[And( Not( ObjectsEqual( AccoladeType.Self, CreateAccoladeView.GetSelectedPrimaryType ) ), Not( ObjectsEqual( AccoladeType.Self, CreateAccoladeView.GetSelectedSecondaryType ) ) )]"
							layoutpolicy_horizontal = expanding

							margin_top = 10
							margin_bottom = 10
							spacing = 10

							background = {
								using = Background_Area

								margin = { 15 5 }
							}

							text_single = {
								layoutpolicy_horizontal = expanding

								text = "[AccoladeType.GetName]"

								align = nobaseline
							}

							icon = {
								datacontext = "[AccoladeType.GetPrimaryMaaUnlock]"
								visible = "[MenAtArmsType.IsValid]"
								texture = "[MenAtArmsType.GetIcon]"
								tooltipwidget = {
									using = maa_type_container_tooltip
								}
								size = { 30 30 }

								icon = {
									visible = "[CreateAccoladeView.IsChangingSecondaryType]"
									size = { 30 30 }
									texture = "gfx/interface/icons/symbols/icon_cross.dds"
									tooltip = "[AccoladeType.GetPrimaryMaaUnlockWarning]"
								}
							}

							icon = {
								datacontext = "[AccoladeType.GetSecondaryMaaUnlock]"
								visible = "[MenAtArmsType.IsValid]"
								texture = "[MenAtArmsType.GetIcon]"
								tooltipwidget = {
									using = maa_type_container_tooltip
								}
								size = { 30 30 }
							}

							button_standard = {
								visible = "[CreateAccoladeView.IsChangingPrimaryType]"

								onclick = "[CreateAccoladeView.SetSelectedPrimaryType( AccoladeType.Self )]"
								onclick = "[CreateAccoladeView.ToggleChangingPrimaryType]"
								tooltip = "CREATE_ACCOLADE_SET_PRIMARY_TYPE_TT"
								using = tooltip_nw

								text = "SELECT"
							}

							button_standard = {
								visible = "[CreateAccoladeView.IsChangingSecondaryType]"

								onclick = "[CreateAccoladeView.SetSelectedSecondaryType( AccoladeType.Self )]"
								onclick = "[CreateAccoladeView.ToggleChangingSecondaryType]"
								tooltip = "CREATE_ACCOLADE_SET_SECONDARY_TYPE_TT"
								using = tooltip_nw

								text = "SELECT"
							}
						}
					}
				}
			}
		}
	}
}

types CreateAccoladeWindowTypes
{
	type empty_accolade_type_box = hbox {
		layoutpolicy_horizontal = expanding
		spacing = 10

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "CREATE_ACCOLADE_EMPTY_TYPE"
			align = nobaseline
		}

		debug_square = {
			size = { 30 30 }
		}
	}
}

