######################################################
############ FIND CONCUBINE INTERACTION ##############
######################################################

window = {
	name = "concubine_interaction_window"
	datacontext = "[ConcubineInteractionWindow.GetBaseWindow]"
	datacontext = "[MatchmakerInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	position = { 0 20 }
	parentanchor = center
	allow_outside = yes
	layer = middle

	using = Window_Size_CharacterList
	using = Window_Background
	using = Window_Decoration_Spike

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins

		hbox = {
			margin_bottom = -10
			layoutpolicy_horizontal = expanding

			header_pattern_interaction = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[CharacterInteractionConfirmationWindow.GetSendName]"
				}

				blockoverride "button_close"
				{
					onclick = "[MatchmakerInteractionWindow.Close]"
				}
			}
		}

		widget_character_interaction_four_characters = {
			layoutpolicy_horizontal = expanding

			blockoverride "bg_illustration_datacontext"
			{
				datacontext = "[GetIllustration( 'character_religion_interior' )]"
			}

			blockoverride "bg_illustration"
			{
				texture = "[Illustration.GetTexture( MatchmakerInteractionWindow.GetActorToMatch.MakeScope )]"
			}

			blockoverride "left_small_portrait"
			{
				visible = no
			}

			blockoverride "right_small_portrait"
			{
				visible = no
			}

			blockoverride "button_clear"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "left_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
			}

			blockoverride "left_interaction_portrait_glow"
			{
				visible = no
			}

			blockoverride "right_portrait"
			{
				datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"
			}

			blockoverride "right_interaction_portrait_glow"
			{
				visible = "[MatchmakerInteractionWindow.IsPickingSecondaryRecipient]"
			}

			blockoverride "button_right_change"
			{
				visible = "[MatchmakerInteractionWindow.CanChangeRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_right_revert"
			{
				visible = "[MatchmakerInteractionWindow.CanRevertRecipientCharacter]"
				onclick = "[MatchmakerInteractionWindow.OnChangeOrRevertRecipientCharacter]"
			}

			blockoverride "button_clear"
			{
				visible = no
			}
		}

		vbox = {
			name = "info_and_send_offer"
			visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "scrollbox_content"
				{
					name = "info"

					vbox = {
						datacontext = "[ConcubineInteractionWindow.GetConcubineInfo]"
						datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"
						
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }

						vbox_concubine_interaction_details = {
							datacontext = "[ConcubineInfo.GetBaseOffer]"
							layoutpolicy_horizontal = expanding
						}

						vbox_character_interaction_effects_contents = {}
					}
				}
			}

			### Send offer info
			vbox_arrangement_interaction_send_offer = {
				layoutpolicy_horizontal = expanding

				blockoverride "button_content" {
					text = "find_concubine_button_name"

				}
			}
		}

		### Character List
		vbox = {
			name = "character_list"
			visible = "[Not(MatchmakerInteractionWindow.HasPickedCharacters)]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin = { 130 0 }

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[ConcubineInteractionWindow.GetPrompt]"
					visible = "[Or(MatchmakerInteractionWindow.GetCharacterList.HasItems, MatchmakerInteractionWindow.HasTopCharacterItem )]"
					align = center
				}

			}

			divider = {
				layoutpolicy_horizontal = expanding
			}

			vbox_character_list = {
				datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
				datacontext = "[CharacterSelectionList.GetFilterWithDefault('fertility_filter', '(int32)1')]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "container_implementation" {
					fixedgridbox = {
						addcolumn = 667
						addrow = 100
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"

						item = {
							widget_character_list_item = {
								size = { 640 110 }
							}
						}
					}
				}

				blockoverride "special_character" {
					vbox = {
						datacontext = "[MatchmakerInteractionWindow.GetTopCharacterItem]"
						visible = "[MatchmakerInteractionWindow.HasTopCharacterItem]"
						layoutpolicy_horizontal = expanding

						widget_character_list_item = {
							layoutpolicy_horizontal = expanding
						}
					}
				}
			}
		}
	}

	window_character_filter = {
		datacontext = "[MatchmakerInteractionWindow.GetCharacterList]"
		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('age_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('age_diff_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('fertility_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('trait_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('sexuality_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"

				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('claim_filter')]"
					}
				}
			}
		}
	}
}
