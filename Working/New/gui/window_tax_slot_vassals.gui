window = {
	name = "window_tax_slot_vassals"
	parentanchor = "center"
	size = { 700 1000 }
	layer = middle
	allow_outside = yes

	using = Window_Background
	using = Window_Decoration

	datacontext = "[TaxSlotVassalWindow.GetTaxSlot]"

	state = {
		name = _show
		on_start = "[GetVariableSystem.Set( 'tax_slot_vassal_tab', Select_CString( TaxSlot.HasTaxpayers, 'manage_vassals', 'assign_vassals' ) )]"
	}

	vbox = {
		using = Window_Margins
		layoutpolicy_vertical = expanding

		datacontext = "[TaxSlotVassalWindow.GetLiege]"

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "TAX_SLOT_VASSAL_WINDOW_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[TaxSlotVassalWindow.Close]"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 10
			margin_bottom = 10
			max_width = 610


			hbox = {
				layoutpolicy_horizontal = expanding

				spacing = 10
				size = { 575 220 }

				widget = {
					block "size_illustration" {
						size = { 600 30 }
					}
					background = {
						using = Background_Area_Dark
						alpha = 0.5
						margin = { 10 10 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						margin = { 10 1 }
						max_width = 580

						text = "TAX_SLOT_VASSAL_WINDOW_ASSIGNED_VASSALS"
						align = left
						using = Font_Size_Medium
					}
				}
			}

			hbox = {
				name = "vassals_tabs"
				layoutpolicy_horizontal = expanding

				button_tab = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					onclick = "[GetVariableSystem.Set( 'tax_slot_vassal_tab', 'manage_vassals' )]"
					down = "[GetVariableSystem.HasValue( 'tax_slot_vassal_tab', 'manage_vassals' )]"

					text = "TAX_SLOT_VASSAL_WINDOW_TAB_CURRENT"
				}

				button_tab = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					onclick = "[GetVariableSystem.Set( 'tax_slot_vassal_tab', 'assign_vassals' )]"
					down = "[GetVariableSystem.HasValue( 'tax_slot_vassal_tab', 'assign_vassals' )]"

					text = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN"
				}
			}

			vbox = {
				name = "manage_vassals_tab"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10

				datacontext = "[TaxSlotVassalWindow.AccessAssignedVassals]"
				visible = "[GetVariableSystem.HasValue( 'tax_slot_vassal_tab', 'manage_vassals' )]"

				text_multi = {
					layoutpolicy_horizontal = expanding

					text = "TAX_SLOT_VASSAL_WINDOW_TAB_CURRENT_DESC"
					default_format = "#instruction"
					align = center

					max_width = 580
					autoresize = yes
				}

				vbox_character_list = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[TaxSlotVassalWindow.AccessAssignedVassalsBase]"

					blockoverride "sort_buttons"
					{
						hbox_list_sort_buttons = {
							layoutpolicy_horizontal = expanding
							blockoverride "sort_dropdown" {
								dropdown_sort_characterlist = {
									name = "assigned_vassals_sort_options"
								}
							}

							blockoverride "skill_sort_buttons" {}

							expand = {}

							button_standard = {
								size = { 170 25 }
								onclick = "[AssignedVassalList.SelectAllCharacters]"

								text = "TAX_SLOT_VASSAL_WINDOW_SELECT_ALL"
							}

							button_standard = {
								size = { 25 25 }

								enabled = "[DataModelHasItems( AssignedVassalList.GetSelectedCharacters )]"
								onclick = "[AssignedVassalList.ClearSelectedCharacters]"

								tooltip = "TAX_SLOT_VASSAL_WINDOW_CLEAR_SELECTION"

								button_cancel = {
									parentanchor = center
									alwaystransparent = yes
									size = { 100% 100% }
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
					}

					blockoverride "container_implementation" {
						fixedgridbox = {
							name = "assigned_vassals_grid"
							datamodel = "[CharacterSelectionList.GetList]"

							layoutpolicy_horizontal = expanding

							addcolumn = 575
							addrow = 130

							item = {
								tax_slot_vassal_item = {
									datacontext = "[CharacterListItem.GetCharacter]"
									size = { 575 120 }

									blockoverride "character_selected_icon"
									{
										visible = "[AssignedVassalList.IsCharacterSelected( CharacterListItem.Self )]"
									}

									blockoverride "character_selected_down" {}

									blockoverride "button_content"
									{
										assigned_vassal_button_content = {}
									}
								}
							}
						}
					}
				}

				vbox = {
					name = "manage_vassals_effects_no_changes"
					layoutpolicy_horizontal = expanding

					visible = "[IsDataModelEmpty( AssignedVassalList.GetSelectedCharacters )]"

					text_multi = {
						max_width = 580
						layoutpolicy_horizontal = expanding
						text = "TAX_SLOT_VASSAL_WINDOW_TAB_CURRENT_PREVIEW"
						default_format = "#instruction"
					}
				}

				vbox = {
					name = "manage_vassals_effects"
					layoutpolicy_horizontal = expanding
					spacing = 10

					visible = "[DataModelHasItems( AssignedVassalList.GetSelectedCharacters )]"

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "TAX_SLOT_VASSAL_WINDOW_EFFECT_HEADER"
					}

					text_single = {
						text = "TAX_SLOT_VASSAL_WINDOW_TAB_CURRENT_EFFECT_SUB_HEADER"
					}

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						spacing = 5

						background = {
							using = Background_Area
							margin = { 0 5 }
						}

						hbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							margin = { 20 0 }

							hbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding
								spacing = 7
								max_width = 260

								text_single = {
									text = "TAX_SLOT_VASSAL_WINDOW_EFFECT_THIS_JURISDICTION"
									max_width = 280
									margin_left = -5
									margin_bottom = 3
								}

								background = {
									texture = "gfx/interface/colors/blue.dds"
									alpha = 0.6
									modify_texture = {
										name = "mask"
										texture = "gfx/interface/window_tax_collector/button_arrow.dds"
										blend_mode = alphamultiply
									}

									modify_texture = {
										name = "mask"
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphamultiply
									}
									using = Mask_Rough_Edges
								}
								expand = {}
								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								max_width = 250
								
								datacontext = "[TaxSlotVassalWindow.GetRemoveChanges]"

								background = {
									using = Background_Area
									using = Color_White
									tintcolor = { 0.6 0.7 0.2 0.3 }
									margin = { 30 3 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphaMultiply
									}
								}

								expand = {}
								icon = {
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_gold.dds"
								}

								text_single = {
									datacontext = "[TaxSlotVassalChange.GetTaxBreakdown]"

									text = "TAX_SLOT_REMOVE_VASSAL_TAX_CHANGE"
									align = nobaseline

									tooltipwidget = {
										tax_contribution_tooltip = {
											blockoverride "descriptive_text"
											{
												text = "TAX_SLOT_REMOVE_VASSAL_TAX_DESC"
											}
										}
									}
									using = tooltip_ws
								}

								expand = {}

								divider_light = {
									layoutpolicy_vertical = expanding
								}

								expand = {}

								icon = {
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_soldier.dds"
								}

								text_single = {
									datacontext = "[TaxSlotVassalChange.GetLeviesBreakdown]"

									text = "TAX_SLOT_REMOVE_VASSAL_LEVIES_CHANGE"
									align = nobaseline

									tooltipwidget = {
										tax_contribution_tooltip = {
											blockoverride "descriptive_text"
											{
												text = "TAX_SLOT_REMOVE_VASSAL_LEVIES_DESC"
											}

											blockoverride "contribution_icon"
											{
												texture = "gfx/interface/icons/icon_soldier.dds"
											}
										}
									}
									using = tooltip_ws
								}
								expand = {}
							}

						}
					}
				}

				button_primary = {
					onclick = "[TaxSlotVassalWindow.RemoveVassals]"
					enabled = "[DataModelHasItems( AssignedVassalList.GetSelectedCharacters )]"

					text = "TAX_SLOT_VASSAL_WINDOW_TAB_CURRENT_BUTTON"
				}
			}

			vbox = {
				name = "assign_vassals_tab"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				spacing = 10

				datacontext = "[TaxSlotVassalWindow.AccessUnassignedVassals]"

				visible = "[GetVariableSystem.HasValue( 'tax_slot_vassal_tab', 'assign_vassals' )]"

				text_multi = {
					layoutpolicy_horizontal = expanding

					text = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN_DESC"
					default_format = "#instruction"
					align = center

					max_width = 600
					autoresize = yes
				}

				vbox_character_list = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[TaxSlotVassalWindow.AccessUnassignedVassalsBase]"

					blockoverride "sort_buttons"
					{
						hbox_list_sort_buttons = {
							layoutpolicy_horizontal = expanding

							blockoverride "sort_dropdown" {
								dropdown_sort_characterlist = {
									name = "unassigned_vassals_sort_options"
								}
							}
							blockoverride "skill_sort_buttons" {}

							expand = {}

							button_standard = {
								size = { 170 25 }

								onclick = "[UnassignedVassalList.SelectAllCharacters]"
								#tooltip = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN_SELECT_ALL"
								text = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN_SELECT_ALL"
							}

							button_standard = {
								size = { 25 25 }

								enabled = "[DataModelHasItems( UnassignedVassalList.GetSelectedCharacters )]"
								onclick = "[UnassignedVassalList.ClearSelectedCharacters]"

								tooltip = "TAX_SLOT_VASSAL_WINDOW_CLEAR_SELECTION"

								button_cancel = {
									parentanchor = center
									alwaystransparent = yes
									size = { 100% 100% }
								}
							}
						}
					}

					blockoverride "container_implementation"
					{
						fixedgridbox = {
							name = "unassgiend_vassals_grid"
							datamodel = "[CharacterSelectionList.GetList]"
							
							layoutpolicy_horizontal = expanding

							addcolumn = 575
							addrow = 130
							datamodel_reuse_widgets = yes

							item = {
								tax_slot_vassal_item = {
									datacontext = "[CharacterListItem.GetCharacter]"
									size = { 575 120 }

									blockoverride "selected_icon"
									{
										visible = "[UnassignedVassalList.IsCharacterSelected( CharacterListItem.Self )]"
										texture = "gfx/interface/icons/flat_icons/plus.dds"
										modify_texture = {
											texture = "gfx/interface/colors/gold.dds"
											alpha = 0.75
										}
									}

									blockoverride "character_selected_icon"
									{
										visible = "[UnassignedVassalList.IsCharacterSelected(CharacterListItem.Self)]"
									}

									blockoverride "character_selected_down"
									{
										down = "[UnassignedVassalList.IsCharacterSelected(CharacterListItem.Self)]"
									}

									blockoverride "button_content"
									{
										unassigned_vassal_button_content = {
											tooltip = "[CharacterListItem.GetText('tooltip')]"
										}
									}
								}
							}
						}
					}
				}

				vbox = {
					name = "assign_vassals_effects_no_changes"
					layoutpolicy_horizontal = expanding

					visible = "[IsDataModelEmpty( UnassignedVassalList.GetSelectedCharacters )]"

					text_multi = {
						layoutpolicy_horizontal = expanding
						max_width = 580
						text = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN_PREVIEW"
						default_format = "#instruction"
					}
				}

				vbox = {
					name = "assign_vassals_effects"
					layoutpolicy_horizontal = expanding
					spacing = 10

					visible = "[DataModelHasItems( UnassignedVassalList.GetSelectedCharacters )]"

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "TAX_SLOT_VASSAL_WINDOW_EFFECT_HEADER"
					}

					text_single = {
						max_width = 620
						text = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN_EFFECT_SUB_HEADER"
					}

					vbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						spacing = 5

						background = {
							using = Background_Area
							margin = { 0 5 }
						}

						hbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							margin = { 20 0 }

							hbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding
								spacing = 7
								max_width = 260

								text_single = {
									text = "TAX_SLOT_VASSAL_WINDOW_EFFECT_THIS_JURISDICTION"
									margin_left = -5
									margin_bottom = 3
								}

								background = {
									texture = "gfx/interface/colors/blue.dds"
									alpha = 0.6
									modify_texture = {
										name = "mask"
										texture = "gfx/interface/window_tax_collector/button_arrow.dds"
										blend_mode = alphamultiply
									}

									modify_texture = {
										name = "mask"
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphamultiply
									}
									using = Mask_Rough_Edges
								}
								expand = {}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								max_width = 250
								
								datacontext = "[TaxSlotVassalWindow.GetAssignChanges]"

								background = {
									using = Background_Area
									using = Color_White
									tintcolor = { 0.6 0.7 0.2 0.3 }
									margin = { 30 3 }

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										blend_mode = alphaMultiply
									}
								}

								expand = {}
								icon = {
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_gold.dds"
								}

								text_single = {
									datacontext = "[TaxSlotVassalChange.GetTaxBreakdown]"

									align = nobaseline
									text = "TAX_SLOT_ASSIGN_VASSAL_TAX_CHANGE"

									tooltipwidget = {
										tax_contribution_tooltip = {
											blockoverride "descriptive_text"
											{
												text = "TAX_SLOT_ASSIGN_VASSAL_TAX_DESC"
											}
										}
									}
									using = tooltip_ws
								}

								expand = {}

								divider_light = {
									layoutpolicy_vertical = expanding
								}

								expand = {}

								icon = {
									size = { 25 25 }
									texture = "gfx/interface/icons/icon_soldier.dds"
								}

								text_single = {
									datacontext = "[TaxSlotVassalChange.GetLeviesBreakdown]"

									align = nobaseline
									text = "TAX_SLOT_ASSIGN_VASSAL_LEVIES_CHANGE"

									tooltipwidget = {
										tax_contribution_tooltip = {
											blockoverride "descriptive_text"
											{
												text = "TAX_SLOT_ASSIGN_VASSAL_LEVIES_DESC"
											}

											blockoverride "contribution_icon"
											{
												texture = "gfx/interface/icons/icon_soldier.dds"
											}
										}
									}
									using = tooltip_ws
								}

								expand = {}
							}

						}
					}
				}

				button_primary = {
					onclick = "[TaxSlotVassalWindow.AssignVassals]"
					enabled = "[DataModelHasItems( UnassignedVassalList.GetSelectedCharacters )]"

					text = "TAX_SLOT_VASSAL_WINDOW_TAB_ASSIGN_BUTTON"
				}
			}

			expand = {}
		}
	}

	window_character_filter = {
		name = "tax_slot_assigned_vassals_filter_window"
		datacontext = "[TaxSlotVassalWindow.AccessAssignedVassalsBase]"

		blockoverride "editbox_properties"
		{
			name = "assigned_vassals_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_house_filter')]"
			}
		}
	}

	window_character_filter = {
		name = "tax_slot_unassigned_vassals_filter_window"
		datacontext = "[TaxSlotVassalWindow.AccessUnassignedVassalsBase]"

		blockoverride "editbox_properties"
		{
			name = "unassigned_vassals_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_house_filter')]"
			}
		}
	}
}

types TaxCollectorVassalViewTypes
{
	type tax_slot_vassal_item = widget {
		size = { 10 120 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}
		hbox = {
			icon = {
				size = { 25 25 }
				block "selected_icon"
				{
					visible = "[AssignedVassalList.IsCharacterSelected( CharacterListItem.Self )]"
					texture = "gfx/interface/icons/flat_icons/cancel.dds"
					modify_texture = {
						texture = "gfx/interface/colors/red.dds"
						alpha = 0.75
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10

				portrait_head_small = {
					blockoverride "portrait_button" {
						text_single = {
							name = "tutorial_highlight_character_view_opinion"
							visible = "[InDebugMode]"
							max_width = 100
							margin = { 3 0 }
							using = tooltip_es
							default_format = "#D"
						}
					}
				}

				button_standard = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					onclick = "[CharacterListItem.OnClick('character')]"
					enabled = "[CharacterListItem.IsSelectable]"

					spriteType = Corneredtiled
					spriteborder = { 20 20 }

					block "character_selected_down"
					{
						down = no
					}

					background = {
						texture = "gfx/interface/buttons/button_entry_characterlist.dds"
						spriteType = Corneredtiled
						margin = { 10 0 }
						using = Color_Orange
						alpha = 0
						using = Mask_Rough_Edges
					}

					block "button" {}

					character_list_arrow = {
						name = "character_list_arrow"
					}

					# Selected icon
					icon = {
						block "character_selected_icon"
						{
							visible = no
						}

						parentanchor = left|vcenter
						position = { -20 0 }
						size = { 20 20 }
						texture = "gfx/interface/buttons/button_entry_characterlist_arrow.dds"
					}

					block "overlay" {
						using = default_character_list_overlay
					}

					block "button_content" {}
				}
			}
		}
	}

	type assigned_vassal_button_content = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 10 0 }

		background = {
			visible = "[AssignedVassalList.IsCharacterSelected( CharacterListItem.Self )]"
			texture = "gfx/interface/colors/red.dds"
			alpha = 0.1
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding

				# Name
				text_single = {
					layoutpolicy_horizontal = expanding
					using = Font_Size_Medium
					autoresize = no
					alwaystransparent = yes

					text = "[Character.GetUINameNoTooltip]"
				}

				text_single = {
					name = "character_relation"
					visible = "[Character.HasRelationTo( GetPlayer )]"
					layoutpolicy_horizontal = expanding
					alwaystransparent = yes

					text = "[Character.GetRelationToString( GetPlayer )]"
					default_format = "#low"
					autoresize = no

					tooltip = "EXTENDED_RELATIONS_TOOLTIP"
				}
			}

			icon = {
				datacontext = "[Character.GetFaith]"
				size = { 40 40 }
				texture = "[Faith.GetIcon]"

				tooltipwidget = {
					faith_tooltip_core_tenents = {}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			expand = {}

			hbox = {
				datacontext = "[Character.GetCulture]"
				margin = { 5 0 }

				Background = {
					using = Background_Area
				}

				tooltipwidget = {
					culture_tooltip = {}
				}

				using = tooltip_se

				icon = {
					name = "culture"
					texture = "gfx/interface/icons/icon_culture.dds"
					size = { 24 24 }
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					min_width = 60
					align = center|nobaseline
					autoresize = no
					text = "CULTURE_LISTS_WINDOW"
				}
			}
		}


		### Vassal Info
		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			icon = {
				datacontext = "[Character.GetVassalStance]"
				visible = "[Not( Character.IsPlayer )]"

				size = { 40 40 }
				texture = "[VassalStance.GetIcon]"

				tooltipwidget = {
					using = vassal_stance_tooltip
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				vassal_progressbars = {
					blockoverride "width"
					{
						layoutpolicy_horizontal = expanding
					}

					blockoverride "background"
					{
					}

					blockoverride "tax_progressbar_size"
					{
						size = { 100% 25 }
					}
					blockoverride "tax_progressbar_value"
					{
						value = "[FixedPointToProgressbarValue( AssignedVassalList.GetTaxPercentage( CharacterListItem.Self ) )]"
					}
					blockoverride "tax_value"
					{
						text = "TAX_SLOT_VASSAL_WINDOW_ASSIGNED_VASSAL_TAX_CONTRIBUTION"
					}
					blockoverride "tax_breakdown"
					{
						datacontext = "[AssignedVassalList.GetTaxBreakdown( CharacterListItem.Self )]"
					}

					blockoverride "levy_progressbar_size"
					{
						size = { 100% 25 }
					}
					blockoverride "levy_progressbar_value"
					{
						value = "[FixedPointToProgressbarValue( AssignedVassalList.GetLevyPercentage( CharacterListItem.Self ) )]"
					}
					blockoverride "levy_value"
					{
						text = "TAX_SLOT_VASSAL_WINDOW_ASSIGNED_VASSAL_LEVY_CONTRIBUTION"
					}
					blockoverride "levy_breakdown"
					{
						datacontext = "[AssignedVassalList.GetLevyBreakdown( CharacterListItem.Self )]"
					}
				}
			}
		}
	}


	type unassigned_vassal_button_content = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 10 0 }

		hbox = {
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding

				# Name
				text_single = {
					layoutpolicy_horizontal = expanding
					using = Font_Size_Medium
					autoresize = no
					alwaystransparent = yes

					text = "[Character.GetUINameNoTooltip]"
				}

				text_single = {
					name = "character_relation"
					visible = "[Character.HasRelationTo( GetPlayer )]"
					layoutpolicy_horizontal = expanding
					alwaystransparent = yes

					text = "[Character.GetRelationToString( GetPlayer )]"
					default_format = "#low"
					autoresize = no

					tooltip = "EXTENDED_RELATIONS_TOOLTIP"
				}
			}

			icon = {
				datacontext = "[Character.GetFaith]"
				size = { 40 40 }
				texture = "[Faith.GetIcon]"

				tooltipwidget = {
					faith_tooltip_core_tenents = {}
				}
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[TaxSlotVassalWindow.GetTaxSlotStatusForCharacter( CharacterListItem.GetCharacter )]"
			}

			hbox = {
				datacontext = "[Character.GetCulture]"
				margin = { 5 0 }

				Background = {
					using = Background_Area
				}

				tooltipwidget = {
					culture_tooltip = {}
				}

				using = tooltip_se

				icon = {
					name = "culture"
					texture = "gfx/interface/icons/icon_culture.dds"
					size = { 24 24 }
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					min_width = 60
					align = center|nobaseline
					autoresize = no
					text = "CULTURE_LISTS_WINDOW"
				}
			}
		}

		### Vassal Info
		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			icon = {
				datacontext = "[Character.GetVassalStance]"
				size = { 40 40 }
				texture = "[VassalStance.GetIcon]"
				tooltipwidget = {
					using = vassal_stance_tooltip
				}
			}

			hbox = {
				margin = { 10 5 }
				spacing = 10
				layoutpolicy_horizontal = expanding

				Background = {
					using = Background_Area
				}

				expand = {}
				text_single = {
					text = "TAX_SLOT_VASSAL_WINDOW_TAXABLE"
				}

				text_single = {
					alwaystransparent = yes
					text = "TAX_SLOT_VASSAL_WINDOW_UNASSIGNED_VASSAL_TAXABLE_INCOME"
				}

				divider_light = {
					layoutpolicy_vertical = expanding
				}

				text_single = {
					alwaystransparent = yes
					text = "TAX_SLOT_VASSAL_WINDOW_UNASSIGNED_VASSAL_LEVIES"
				}
			}
		}
	}


	type tax_contribution_tooltip = widget {
		alwaystransparent = no

		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			set_parent_size_to_minimum = yes
			ignoreinvisible = yes
			spacing = 5
			margin = { 10 10 }

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 5 }
				margin_bottom = 8
				spacing = 15

				background = {
					using = Background_Area
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[ValueBreakdown.GetName]"
					default_format = "#T"
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[ValueBreakdown.GetValue]"
					align = right
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					margin = { 10 0 }
					max_width = 300
					autoresize = yes
					block "descriptive_text"
					{
						text = "TAX_SLOT_VASSAL_WINDOW_TAX_SLOT_TAX_DESC"
					}
					default_format = "#instruction"
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				datamodel = "[ValueBreakdown.GetSubValues]"
				alwaystransparent = no
				margin = { 10 10 }
				spacing = 3

				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 10 5 }
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						block "sub_header"
						{
							text = "TAX_SLOT_VASSAL_WINDOW_TAX_SLOT_SUBHEADER"
						}
						default_format = "#high"
					}

					expand = {}

					icon = {
						size = { 25 25 }
						block "contribution_icon"
						{
							texture = "gfx/interface/icons/icon_gold.dds"
						}
					}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					visible = "[IsDataModelEmpty( ValueBreakdown.GetSubValues)]"

					block "no_sub_values"
					{
						text = "TAX_SLOT_VASSAL_WINDOW_TAX_SLOT_NO_VASSALS_ASSIGNED"
					}

					default_format = "#weak"
				}

				item = {
					hbox = {
						name = "value_breakdown"
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "name"
							layoutpolicy_horizontal = expanding
							text = "[ValueBreakdown.GetName]"
							min_width = 180
							max_width = 250
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							margin_right = 10
						}

						text_single= {
							visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
							name = "value_with_tooltip"
							text = "[ValueBreakdown.GetValue|L]"
							align = right
							fonttintcolor = "[TooltipInfo.GetTintColor]"

							using = tooltip_below

							tooltipwidget = {
								recursive = yes

								widget_value_breakdown_tooltip = {}
							}
						}

						text_single = {
							visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
							name = "value_with_no_tooltip"
							text = "[ValueBreakdown.GetValue]"
							align = right
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}
					}
				}
			}
		}
	}
}

