######################################################
############## INTERACTION NOTIFICATION ##############
######################################################

window = {
	name = "call_ally_interaction_notification_window"
	parentanchor = top|hcenter
	position = { 0 90 }
	layer = middle

	using = Window_Background
	using = Window_Decoration_Warfare

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins
		set_parent_size_to_minimum = yes

		header_pattern_interaction = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "[CharacterInteractionNotificationWindow.GetContextName]"
			}

			blockoverride "button_close"
			{
				onclick = "[CallAllyInteractionNotificationWindow.Close]"
			}
		}

		vbox_sender_portrait_message = {
			layoutpolicy_horizontal = expanding
		}

		hbox = {
			name = "allies"
			datacontext = [CallAllyInteractionNotificationWindow.GetPrimaryAlly]
			visible = [Character.IsValid]
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			margin_left = 15
			spacing = 10

			background = {
				using = Background_Area
			}

			widget = {
				size = { 80 0 }
				layoutpolicy_vertical = expanding

				vbox = {
					text_single = {
						name = "allies_label"
						layoutpolicy_horizontal = expanding
						text = "WAR_ALLIES"

						max_width = 90
						using = Font_Size_Medium
					}
				}
			}

			hbox = {
				datacontext = "[CallAllyInteractionNotificationWindow.GetPrimaryAlly]"
				portrait_head_small = { }
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 0 80 }
				scrollbarpolicy_vertical = always_off
				scrollbarpolicy_horizontal = as_needed

				scrollbar_horizontal = {
					using = Scrollbar_Horizontal
				}

				scrollwidget = {
					dynamicgridbox = {
						name = "secondary_allies_grid"
						datamodel = "[CallAllyInteractionNotificationWindow.GetSecondaryAllies]"

						item = {
							portrait_head_small = {
								name = "character_button"
							}
						}
					}
				}

			}

			expand = {}
		}

		hbox = {
			name = "enemies"
			datacontext = [CallAllyInteractionNotificationWindow.GetPrimaryEnemy]
			visible = [Character.IsValid]
			layoutpolicy_horizontal = expanding
			margin = { 15 5 }
			spacing = 10

			background = {
				using = Background_Area
			}

			widget = {
				size = { 80 0 }
				layoutpolicy_vertical = expanding

				vbox = {
					text_single = {
						name = "enemies_label"
						layoutpolicy_horizontal = expanding
						text = "WAR_ENEMIES"

						max_width = 90
						using = Font_Size_Medium
					}
				}
			}

			hbox = {
				datacontext = "[CallAllyInteractionNotificationWindow.GetPrimaryEnemy]"
				portrait_head_small = { }
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 0 80 }
				scrollbarpolicy_vertical = always_off
				scrollbarpolicy_horizontal = as_needed

				scrollbar_horizontal = {
					using = Scrollbar_Horizontal
				}

				scrollwidget = {
					dynamicgridbox = {
						name = "secondary_allies_grid"
						datamodel = "[CallAllyInteractionNotificationWindow.GetSecondaryEnemies]"

						item = {
							portrait_head_small = {
								name = "character_button"
							}
						}
					}
				}

			}

			expand = {}
		}

		vbox_character_interaction_effects = {
			visible = "[CharacterInteractionNotificationWindow.GetCharacterInteraction.ShowEffectsInNotification]"
			datacontext = "[CharacterInteractionNotificationWindow.GetEffectsDescription]"
		}

		hbox = {
			margin = { 0 10 }
			spacing = 15

			button_standard = {
				name = "reject_button"
				text = "[CharacterInteractionNotificationWindow.GetAnswerRejectText]"
				onclick = "[CharacterInteractionNotificationWindow.Reject]"
				enabled = "[CharacterInteractionNotificationWindow.CanReject]"
				using = tooltip_ws
				default_format = "#medium"
			}

			button_primary = {
				name = "accept_button"
				text = "[CharacterInteractionNotificationWindow.GetAnswerAcceptText]"
				onclick = "[CharacterInteractionNotificationWindow.Accept]"
				enabled = "[CharacterInteractionNotificationWindow.CanAccept]"
			}
		}
	}

}
