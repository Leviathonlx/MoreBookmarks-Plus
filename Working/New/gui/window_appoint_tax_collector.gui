window = {
	name = "window_appoint_tax_collector"
	parentanchor = "center"
	size = { 700 1000 }
	layer = middle
	allow_outside = yes

	using = Window_Background
	using = Window_Decoration

	vbox = {
		using = Window_Margins
		layoutpolicy_vertical = expanding
		margin_bottom = 30

		datacontext = "[AppointTaxCollectorWindow.GetTaxSlot]"

		vbox = {
			layoutpolicy_horizontal = expanding

			###TOPBOX
			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "[SelectLocalization( AppointTaxCollectorWindow.HasTaxCollector, 'TAX_COLLECTOR_REPLACE_HEADER', 'TAX_COLLECTOR_APPOINT_WINDOW_HEADER' )]"
				}

				blockoverride "button_close"
				{
					onclick = "[AppointTaxCollectorWindow.Close]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				spacing = 10

				background = {
					using = Background_Area_Dark
					alpha = 0.6
				}

				background = {
					texture = "gfx/interface/window_tax_collector/tax_collector_illustration.dds"
					alpha = 0.2
					fittype = centercrop

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
					}
				}

				vbox = {
					name = "appoint_tax_collector"
					layoutpolicy_horizontal = expanding

					visible = "[Not( AppointTaxCollectorWindow.HasTaxCollector )]"

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 3 }
						spacing = 5

						text_single = {
							text = "[TaxSlot.GetName]"
							using = Font_Size_Medium
							default_format = "#high"
							align = nobaseline
						}

						text_single = {
							text = "APPOINT_TAX_COLLECTOR_UNTAXED_TAX_SLOT"
							default_format = "#warning"
							align = nobaseline
						}

						expand = {}

						text_single = {
							text = "TAX_COLLECTOR_TAXED_VASSALS_COUNT"
							align = nobaseline
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }

						text_single = {
							text = "APPOINT_TAX_COLLECTOR_WINDOW_NO_CURRENT_COLLECTOR"
						}

						expand = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 10
						margin_left = 10
						margin_right = 60

						text_multi = {
							layoutpolicy_horizontal = expanding
							default_format = "#low"
							text = "APPOINT_TAX_COLLECTOR_WINDOW_DESC"
						}
					}
				}

				vbox = {
					name = "replace_tax_collector"
					layoutpolicy_horizontal = expanding

					visible = "[AppointTaxCollectorWindow.HasTaxCollector]"

					background = {
						using = Background_Area_Dark
						alpha = 0.5
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }
						spacing = 5

						datacontext = "[AppointTaxCollectorWindow.GetTaxCollector]"

						portrait_head = { }

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 5
							hbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[TaxSlot.GetTaxSlotType]"

								text_multi = {
									text = "[Character.GetUINameNoTooltip]"
									autoresize = yes
									max_width = 325
								}

								expand = {}

								tax_collector_aptitude_text = {
									layoutpolicy_horizontal = expanding
									align = right|nobaseline
								}
							}

							text_single = {
								name = "character_relation"
								layoutpolicy_horizontal = expanding

								visible = "[Character.HasRelationTo( GetPlayer )]"

								text = "[Character.GetRelationToString( GetPlayer )]"
								default_format = "#low"

								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							}

							expand = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								button_standard = {
									text = "APPOINT_TAX_COLLECTOR_FIRE_CURRENT"
									onclick = "[AppointTaxCollectorWindow.RemoveTaxCollector]"
									tooltip = "APPOINT_TAX_COLLECTOR_FIRE_CURRENT_TT"
								}
								expand = {}
							}
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox_character_list = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				datacontext = "[AppointTaxCollectorWindow.GetPotentialTaxCollectors]"

				blockoverride "sort_buttons"
				{
					hbox_list_sort_buttons = {
						layoutpolicy_horizontal = expanding
						blockoverride "sort_dropdown" {
							dropdown_sort_characterlist = {
								name = "eligible_tax_collectors_sort_options"
							}
						}
					}
				}

				blockoverride "container_implementation" {
					vbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						layoutpolicy_horizontal = expanding
						ignoreinvisible = yes

						item = {
							tax_collector_candidate_list_widget = {
								datacontext = "[CharacterListItem.GetCharacter]"

								visible = "[Not( AppointTaxCollectorWindow.IsCurrentTaxCollector( Character.Self ) )]"

								block "item_size" {
									size = { 420 110 }
									layoutpolicy_horizontal = expanding
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			name = "selected_potential_tax_collector"
			layoutpolicy_horizontal = expanding
			spacing = 3
			margin_bottom = 15

			visible = "[AppointTaxCollectorWindow.HasSelectedCharacter]"
			datacontext = "[AppointTaxCollectorWindow.GetSelectedCharacter]"
			datacontext = "[AppointTaxCollectorWindow.GetTaxSlot]"
			datacontext = "[TaxSlot.GetTaxSlotType]"

			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 10 15 }

				background = {
					margin = { -10 0 }
					using = Background_Area
				}

				text_multi = {
					text = "TAX_COLLECTOR_NEW_HIRE"
					autoresize = yes
					max_width = 300
				}

				tax_collector_aptitude_text = {
					using = Font_Size_Medium
					align = nobaseline
				}

				warning_icon = {
					visible = "[And( AppointTaxCollectorWindow.HasTaxCollector,  AppointTaxCollectorWindow.HasSelectedCharacter)]"
					tooltip = "APPOINT_TAX_COLLECTOR_REPLACE_CURRENT_TT"
				}
			}

			hbox = {
				margin = { 10 0 }
				spacing = 15
				layoutpolicy_horizontal = expanding
				
				hbox = {
					layoutpolicy_horizontal = expanding
					background = {
						margin = { 25 3 }
						texture = "gfx/interface/colors/blue.dds"
						alpha = 0.6

						modify_texture = {
							name = "mask"
							texture = "gfx/interface/window_tax_collector/button_arrow.dds"
							blend_mode = alphamultiply
						}

						modify_texture = {
							name = "mask"
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
						}

						using = Mask_Rough_Edges
					}

					text_multi = {
						layoutpolicy_horizontal = expanding
						text = "TAX_SLOT_VASSAL_WINDOW_EFFECT_THIS_JURISDICTION"
						max_width = 240
						align = nobaseline
					}

					expand = {}
				}

				expand = {}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10
					max_width = 250

					background = {
						using = Background_Area
						using = Color_White
						tintcolor = { 0.6 0.7 0.2 0.3 }
						margin = { 30 3 }

						modify_texture ={
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle.dds"
							blend_mode = alphaMultiply
							mirror = horizontal
						}
					}

					expand = {}

					hbox = {
						spacing = 5

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/message_feed/tax_collector.dds"
						}

						text_single = {
							datacontext = "[AppointTaxCollectorWindow.GetTaxpayerLimitChange]"
							datacontext = "[TaxCollectorValueChange.GetBreakdown]"

							text = "TAX_COLLECTOR_VALUE_CHANGE_INT"
							align = nobaseline

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
							using = tooltip_ws
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
					}

					hbox = {
						spacing = 5

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/icon_gold.dds"
						}

						text_single = {
							datacontext = "[AppointTaxCollectorWindow.GetTaxChange]"
							datacontext = "[TaxCollectorValueChange.GetBreakdown]"

							text = "TAX_COLLECTOR_VALUE_CHANGE"
							align = nobaseline

							tooltipwidget = {
								tax_contribution_tooltip = {
									blockoverride "descriptive_text"
									{
										text = "TAX_COLLECTOR_NEW_HIRE_TAX_DESC"
									}
								}
							}
							using = tooltip_ws
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
					}

					hbox = {
						spacing = 5

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/icon_soldier.dds"
						}

						text_single = {
							datacontext = "[AppointTaxCollectorWindow.GetLevyChange]"
							datacontext = "[TaxCollectorValueChange.GetBreakdown]"

							text = "TAX_COLLECTOR_VALUE_CHANGE_INT"
							align = nobaseline

							tooltipwidget = {
								tax_contribution_tooltip = {
									blockoverride "descriptive_text"
									{
										text = "TAX_COLLECTOR_NEW_HIRE_LEVIES_DESC"
									}

									blockoverride "contribution_icon"
									{
										texture = "gfx/interface/icons/icon_soldier.dds"
									}
								}
							}
							using = tooltip_ws
						}
					}

					expand = {}
				}
			}
		}

		vbox = {
			name = "no_selected_potential_tax_collector"
			layoutpolicy_horizontal = expanding
			margin_bottom = 15

			visible = "[Not( AppointTaxCollectorWindow.HasSelectedCharacter )]"

			datacontext = "[AppointTaxCollectorWindow.GetTaxSlot]"
			datacontext = "[TaxSlot.GetTaxSlotType]"

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5
				margin = { 10 10 }

				background = {
					margin = { -10 0 }
					using = Background_Area
				}

				text_single = {
					minimumsize = { 0 75 }
					text = "APPOINT_TAX_COLLECTOR_NO_SELECTED_DESC"
					default_format = "#instruction"
				}
			}
		}

		button_primary = {
			onclick = "[AppointTaxCollectorWindow.AppointCharacter]"
			enabled = "[AppointTaxCollectorWindow.HasSelectedCharacter]"
			text = "TAX_COLLECTOR_APPOINT_WINDOW_BUTTON"
		}
	}


	window_character_filter = {
		name = "appoint_tax_collector_filter_window"
		datacontext = "[AppointTaxCollectorWindow.GetPotentialTaxCollectors]"

		blockoverride "editbox_properties"
		{
			name = "eligible_tax_collectors_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('dynasty_house_filter')]"
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
			}

		}
	}
}

types AppointTaxCollectorTypes
{
	type tax_collector_aptitude_text = text_single
	{
		datacontext = "[TaxSlot.GetTaxSlotType]"
		datacontext = "[TaxSlotType.GetTaxCollectorAptitudeTooltipFor( Character.Self )]"

		text = APPOINT_TAX_COLLECTOR_VIEW_APTITUDE

		#default_format = "#L"

		tooltipwidget = {
			widget_value_breakdown_tooltip = {}
		}
	}

	type tax_collector_candidate_list_widget = widget {

		size = { 10 110 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}

		hbox = {
			margin = { 0 5 }
			spacing = 15

			portrait_head_small = {}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				onclick = "[CharacterListItem.OnClick('character')]"
				enabled = "[CharacterListItem.IsSelectable]"

				spriteType = Corneredtiled
				spriteborder = { 20 20 }

				down = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"

				background = {
					texture = "gfx/interface/buttons/button_entry_characterlist.dds"
					spriteType = Corneredtiled
					margin = { 10 0 }
					using = Color_Orange
					alpha = 0
					using = Mask_Rough_Edges
				}

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				# Selected icon
				icon = {
					visible = "[AppointTaxCollectorWindow.IsCharacterSelected(CharacterListItem.Self)]"
					parentanchor = left|vcenter
					position = { -20 0 }
					size = { 20 20 }
					texture = "gfx/interface/buttons/button_entry_characterlist_arrow.dds"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						# Name, Relation, Age and Aptitude
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name, Relation, Age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								# Name
								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
									autoresize = no
									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								# Relation and Age
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
											default_format = "#low"
											autoresize = no
											align = nobaseline
											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
							}

							# Aptitude
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								tax_collector_aptitude_text = {}

								expand = {}
							}

							expand = {}
						}

						expand = {}

						# Skills and Traits
						vbox = {
							minimumsize = { 200 0 }
							datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_bottom = 5
							margin_right = 5

							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								datamodel = "[CharacterListItem.GetSkillItems]"
								margin_right = 5

								item = {
									widget = {
										size = { 32 25 }

										text_single = {
											name = "value"
											parentanchor = center
											margin_bottom = 4
											align = center
											text = "[SkillItem.GetValue]"
											tooltip = "[SkillItem.GetName]"
										}

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											framesize = { 70 26 }
											margin = { 5 0 }

											block "bg"
											{
												frame = "[SkillItem.GetFrame]"
											}
										}
									}
								}
							}

							expand = {}

							# Traits
							fixedgridbox = {
								name = "traits_grid"
								datamodel = "[CharacterListItem.GetTraits]"
								flipdirection = yes
								addcolumn = 30
								addrow = 30
								datamodel_wrap = 7
								maxverticalslots = 2

								item = {
									container = {
										visible = "[Trait.IsValid]"

										icon_trait = {
											blockoverride "icon_size"
											{
												size = { 30 30 }
											}

											blockoverride "tooltip_placement"
											{
												using = tooltip_se
											}

											blockoverride "glow_radius"
											{
												glow_radius = 3
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
