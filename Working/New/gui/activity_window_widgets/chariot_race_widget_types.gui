types ChariotRaceWidgetTypes
{
	type vbox_chariot_race_contestants = vbox {
		layoutpolicy_vertical = expanding
		alwaystransparent = no

		widget_charioteer_item = {
			datacontext_from_model = {
				block "first_place_datacontext" {}
				index = 0
			}
		}

		widget_charioteer_item = {
			datacontext_from_model = {
				block "second_place_datacontext" {}
				index = 1
			}
		}

		widget_charioteer_item = {
			datacontext_from_model = {
				block "third_place_datacontext" {}
				index = 2
			}
		}

		vbox = {
			block "contestants_attributes" {}
			spacing = 1
			layoutpolicy_horizontal = expanding

			item = {
				button_tertiary = {
					layoutpolicy_horizontal = expanding
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"

					hbox = {
						alwaystransparent = yes

						hbox = {
							layoutpolicy_horizontal = expanding
							alwaystransparent = yes
							margin_left = 10

							text_single = {
								name = "character_place"
								visible = "[And( Or( EqualTo_string( ActivityPhase.GetKey, 'chariot_race_phase' ), EqualTo_string( ActivityPhase.GetKey, 'chariot_race_phase_ceremony' ) ), Not( Activity.IsComplete ) )]"
								size = { 20 20 }
								alwaystransparent = yes
								autoresize = no

								align = nobaseline
								default_format = "#high"
								using = Font_Size_Small
								
								text = "[Character.MakeScope.Var('current_place_in_race').GetValue|0]"
							}

							text_single = {
								name = "character_name"
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes
								
								using = Font_Size_Small
								default_format = "#high"
								fontsize_min = 10
								align = nobaseline
								
								text = "[Character.GetTitledFirstNameNoTooltip]"
								
								tooltip = "[Character.GetUINameNotMeNoTooltip]"
								using = tooltip_se
								tooltipwidget = {
									cooltip_type = {}
								}
							}

							# Icons
							hbox = {
								alwaystransparent = yes
								margin_right = 10

								icon = {
									visible = "[ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, Character.Self )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									tooltip = chariot_wager_tooltip
									using = tooltip_se
								}
								icon = {
									visible = "[Character.IsEmployedInPositionBy( GetPlayer, GetCourtPositionType( 'charioteer_court_position' ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/charioteer_court_position.dds"

									tooltip = YOUR_CHARIOTEER_TOOLTIP
									using = tooltip_se
								}


								# Icons only visible when the player has placed a wager on a TEAM and NOT a specific CHARACTER
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_blue') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'blues' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_green') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'greens' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_white') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'whites' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_red') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'reds' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
							}

							background = {
								using = Mask_Rough_Edges
								alpha = 0.8
								margin = { 4 4 }

								texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
								spriteType = Corneredtiled
								spriteborder = { 40 8 }
								texture_density = 2

								modify_texture = {
									name = "mask"
									texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = alphamultiply
									mirror = horizontal
								}
							}
						}

						# Colored background based on charioteer's team
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_blue' ) )]"
							tintcolor = { 0.7 0.8 1 0.8 }
							texture = "gfx/interface/colors/blue.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_green' ) )]"
							tintcolor = { 0.8 0.9 0.5 0.6 }
							texture = "gfx/interface/colors/green.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_white' ) )]"
							tintcolor = { 0.6 0.6 0.6 0.7 }
							texture = "gfx/interface/colors/white.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_red' ) )]"
							tintcolor = { 0.9 0.7 0.8 0.6 }
							texture = "gfx/interface/colors/red.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						expand = {}
					}
				}
			}
		}

		vbox = {
			block "dead_contestants" {}
			layoutpolicy_horizontal = expanding
			spacing = 1

			item = {
				button_tertiary = {
					datacontext = "[Scope.Char]"
					layoutpolicy_horizontal = expanding
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"

					hbox = {
						alwaystransparent = yes

						hbox = {
							layoutpolicy_horizontal = expanding
							alwaystransparent = yes
							margin_left = 3

							icon = {
								size = { 25 25 }
								texture = "gfx/interface/icons/icon_dead.dds"
							}

							text_single = {
								name = "character_name"
								text = "[Character.GetUINameNotMeNoTooltip]"
								layoutpolicy_horizontal = expanding
								alwaystransparent = yes
								margin_left = 2

								using = Font_Size_Small
								align = nobaseline
								
								tooltip = "[Character.GetUINameNotMeNoTooltip]"
								using = tooltip_se
								tooltipwidget = {
									cooltip_type = {}
								}
							}

							hbox = {
								alwaystransparent = yes 
								margin_right = 10

								icon = {
									visible = "[ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, Character.Self )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									tooltip = chariot_wager_tooltip
									using = tooltip_se
								}
								icon = {
									visible = "[Character.IsEmployedInPositionBy( GetPlayer, GetCourtPositionType( 'charioteer_court_position' ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/charioteer_court_position.dds"

									tooltip = YOUR_CHARIOTEER_TOOLTIP
									using = tooltip_se
								}

								icon = {
									visible = "[ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, Character.Self )]"
									size = { 25 25 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}

								# Icons only visible when the player has placed a wager on a TEAM and NOT a specific CHARACTER
								# BLUES
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_blue') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'blues' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
								# GREENS
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_green') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'greens' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
								# WHITES
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_white') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'whites' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
								# REDS
								icon = {
									visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_red') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'reds' ) ) )]"
									size = { 20 20 }
									texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

									raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
									using = tooltip_se
								}
							}

							background = {
								using = Mask_Rough_Edges
								alpha = 0.8
								margin = { 4 4 }

								texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
								spriteType = Corneredtiled
								spriteborder = { 40 8 }
								texture_density = 2

								modify_texture = {
									name = "mask"
									texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = alphamultiply
									mirror = horizontal
								}
							}
						}

						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_blue' ) )]"
							tintcolor = { 0.7 0.8 1 0.8 }
							texture = "gfx/interface/colors/blue.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_green' ) )]"
							tintcolor = { 0.8 0.9 0.5 0.6 }
							texture = "gfx/interface/colors/green.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_white' ) )]"
							tintcolor = { 0.6 0.6 0.6 0.7 }
							texture = "gfx/interface/colors/white.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}
						background = {
							visible = "[Character.HasTrait( GetTrait( 'charioteer_red' ) )]"
							tintcolor = { 0.9 0.7 0.8 0.6 }
							texture = "gfx/interface/colors/red.dds"

							using = Mask_Rough_Edges
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
								blend_mode = alphaMultiply
								alpha = 0.5
							}
						}

						expand = {}
					}
				}
			}
		}

		expand = {}
	}


	type widget_charioteer_item = hbox {
		layoutpolicy_horizontal = expanding
		margin = { 5 5 }

		vbox = {
			layoutpolicy_horizontal = expanding
			# NAME AND PLACE
			hbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					# PLACE
					text_single = {
						name = "place"
						margin_left = 10
						using = Font_Size_Medium
						default_format = "#high"
						align = nobaseline
						visible = "[And( Or( EqualTo_string( ActivityPhase.GetKey, 'chariot_race_phase' ), EqualTo_string( ActivityPhase.GetKey, 'chariot_race_phase_ceremony' ) ), Not( Activity.IsComplete ) )]"
						raw_text = "[Character.MakeScope.Var('current_place_in_race').GetValue|0)]"
					}

					# NAME
					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "[Character.GetTitledFirstNameNoTooltip]"
						using = Font_Size_Medium
						fontsize_min = 8
						default_format = "#high"
						autoresize = yes
						align = nobaseline
						margin_left = 10
					}

					hbox = {
						margin_right = 15

						icon = {
							visible = "[ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, Character.Self )]"
							size = { 20 20 }
							texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

							tooltip = chariot_wager_tooltip
							using = tooltip_se
						}
						icon = {
							visible = "[Character.IsEmployedInPositionBy( GetPlayer, GetCourtPositionType( 'charioteer_court_position' ) )]"
							size = { 20 20 }
							texture = "gfx/interface/icons/court_position_types/charioteer_court_position.dds"

							tooltip = YOUR_CHARIOTEER_TOOLTIP
							using = tooltip_se
						}

						# Icons only visible when the player has placed a wager on a TEAM and NOT a specific CHARACTER
						icon = {
							visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_blue') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'blues' ) ) )]"
							size = { 25 25 }
							texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

							raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
							using = tooltip_se
						}
						icon = {
							visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_green') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'greens' ) ) )]"
							size = { 25 25 }
							texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

							raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
							using = tooltip_se
						}
						icon = {
							visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_white') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'whites' ) ) )]"
							size = { 25 25 }
							texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

							raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
							using = tooltip_se
						}
						icon = {
							visible = "[And( ObjectsEqual( GetPlayer.MakeScope.Var('wager_target').Char, GetPlayer.Self ), And( Character.HasTrait( GetTrait('charioteer_red') ), ObjectsEqual( GetPlayer.MakeScope.Var('wager_team').GetFlagName, 'reds' ) ) )]"
							size = { 25 25 }
							texture = "gfx/interface/icons/court_position_types/bookmaker_court_position.dds"

							raw_tooltip = "[GetPlayer.Custom('BuildChariotRaceWagerTooltip')]"
							using = tooltip_se
						}
					}

					background = {
						using = Mask_Rough_Edges
						alpha = 0.8
						margin = { 2 2 }

						texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
						spriteType = Corneredtiled
						spriteborder = { 40 8 }
						texture_density = 2

						modify_texture = {
							name = "mask"
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
							mirror = horizontal
						}
					}
				}

				background = {
					visible = "[Character.HasTrait( GetTrait( 'charioteer_blue' ) )]"
					tintcolor = { 0.7 0.8 1 0.8 }
					texture = "gfx/interface/colors/blue.dds"

					using = Mask_Rough_Edges
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphaMultiply
						alpha = 0.5
					}
					margin = { 0 2 }
				}
				background = {
					visible = "[Character.HasTrait( GetTrait( 'charioteer_green' ) )]"
					tintcolor = { 0.8 0.9 0.5 0.6 }
					texture = "gfx/interface/colors/green.dds"

					using = Mask_Rough_Edges
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphaMultiply
						alpha = 0.5
					}
					margin = { 0 2 }
				}
				background = {
					visible = "[Character.HasTrait( GetTrait( 'charioteer_white' ) )]"
					tintcolor = { 0.6 0.6 0.6 0.7 }
					texture = "gfx/interface/colors/white.dds"

					using = Mask_Rough_Edges
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphaMultiply
						alpha = 0.5
					}
					margin = { 0 2 }
				}
				background = {
					visible = "[Character.HasTrait( GetTrait( 'charioteer_red' ) )]"
					tintcolor = { 0.9 0.7 0.8 0.6 }
					texture = "gfx/interface/colors/red.dds"

					using = Mask_Rough_Edges
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_short.dds"
						blend_mode = alphaMultiply
						alpha = 0.5
					}
					margin = { 0 2 }
				}
			}

			hbox = {
				portrait_head_small = {}

				spacer = {
					size = { 5 5 }
				}

				# CHARIOTEER TRAIT
				icon_trait = {
					datacontext = "[GetTrait( 'charioteer_blue' )]"
					visible = "[Character.HasTrait( GetTrait( 'charioteer_blue' ) )]"
					blockoverride "icon_size"
					{
						size = { 50 50 }
					}
				}
				icon_trait = {
					datacontext = "[GetTrait( 'charioteer_green' )]"
					visible = "[Character.HasTrait( GetTrait( 'charioteer_green' ) )]"
					blockoverride "icon_size"
					{
						size = { 50 50 }
					}
				}
				icon_trait = {
					datacontext = "[GetTrait( 'charioteer_white' )]"
					visible = "[Character.HasTrait( GetTrait( 'charioteer_white' ) )]"
					blockoverride "icon_size"
					{
						size = { 50 50 }
					}
				}
				icon_trait = {
					datacontext = "[GetTrait( 'charioteer_red' )]"
					visible = "[Character.HasTrait( GetTrait( 'charioteer_red' ) )]"
					blockoverride "icon_size"
					{
						size = { 50 50 }
					}
				}

				# APTITUDE
				vbox = {
					text_single = {
						raw_text = "[aptitude|E]:"
					}
					
					text_single = {
						name = "aptitude"
						align = nobaseline
						margin_left = 10
						text = "[Character.GetCourtPositionAptitude( GetCourtPositionType( 'charioteer_court_position' ) )]"

						tooltip = CHARIOTEER_APTITUDE_GUI_TOOLTIP
					}
				}
				
				spacer = {
					size = { 7 7 }
				}
				
				background = {
					using = Background_Area_Dark
					margin = { 3 3 }
					alpha = 0.5
				}
			}
		}

		background = {
			using = Background_Area
			margin_right = 7
			margin_left = 5
		}
	}


	### Brief: widget_pivotal_moment_event_window_small
	type widget_pivotal_moment_event_window_small = activity_event_widget {
		datacontext = "[ActivityWindow.GetEventWindowInsert( PdxGuiWidget.AccessSelf )]"
		datacontext = "[EventWindowViewInsert.GetOpenEvent]"
		visible = "[EventWindowViewInsert.HasOpenEvent]"

		state = {
			name = activity_new_event_shown
			on_start = "[PdxGuiWidget.FindChild( 'event_video' ).GfxVideoControl.Restart]"
			on_start = "[PdxGuiTriggerAllAnimations( 'activity_event_appear' )]"
		}

		blockoverride "event_transition_picture_properties"
		{
			parentanchor = center
			using = PivotalMomentTransitionAnimation

			state = {
				name = activity_event_appear
				alpha = 1
				scale = 1.25
				next = transition_still
			}
		}
		
		blockoverride "event_transition_video_properties"
		{
			parentanchor = center
			loop = no
			restart_on_show = yes
		}

		video_icon = {
			name = "shrouded_event_effect"
			video = "gfx/interface/component_masks/animated_masks/contest_reveal_fin.bk2"
			size = { 95.5% 99% }
			parentanchor = top|hcenter
			loop = no
			restart_on_show = yes
		}
	}
}
