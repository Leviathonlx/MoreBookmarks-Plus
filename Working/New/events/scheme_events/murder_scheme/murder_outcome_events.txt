# System by Petter Vilberg and Linnéa Thimrén

###########################################################################
# !!!!!! OUTDATED — REPLACED BY murder_outcome_reworked_events.txt !!!!!! #
###########################################################################

namespace = murder_outcome

#####################################
# SUCCESSFUL OUTCOME 2000 - 2999
#####################################


########################
# Target was already dead
# by Linnéa Thimrén
########################

murder_outcome.2000 = {
	type = character_event
	title = murder_outcome.2000.t
	desc = murder_outcome.2000.desc
	theme = murder_scheme

	left_portrait = scope:target

	trigger = {
		scope:target = { is_alive = no }
	}

	immediate = {
		custom_tooltip = murder_outcome.2000.a.tt
	}

	option = {
		name = murder_outcome.2000.a
	}
}

########################
# Target has moved far away
# by Bianca Savazzi
########################

murder_outcome.2500 = {
	type = character_event
	title = murder_outcome.2000.t
	desc = murder_outcome.2500.desc
	theme = murder_scheme

	left_portrait = scope:target

	trigger = {
		scope:target = { 
			NOT = { in_diplomatic_range = scope:owner }
		}
	}

	option = {
		name = murder_outcome.2500.a
	}
}


#########################
## Hired an assassin
#########################
#murder_outcome.2001 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2001.t
#
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2001.opening_1
#			desc = murder_outcome.2001.opening_2
#			desc = murder_outcome.2001.opening_3
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2001.heh
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2001.owner_is_known_1
#						desc = murder_outcome.2001.owner_is_known_2
#					#	desc = # I am known 3
#					}
#				}
#			}
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2001.no_awareness_1
#					desc = murder_outcome.2001.no_awareness_2
#				#	desc = # Nothing is known 3
#				}
#			}
#		}
#	}
#
#	### END OF DESC
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:owner
#		animation = schadenfreude
#	}
#	center_portrait = {
#		character = scope:assassin
#		animation = assassin
#	}
#	right_portrait = {
#		character = scope:target
#		animation = map_fear
#	}
#
#	trigger = {
#		scope:murder_method = flag:hired_assassin
#	}
#
#	immediate = {
#		grab_best_agent_murderer_effect = yes
#		murder_success_effect = yes
#
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2001.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2001.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
#
#
###########################
## Hired a gang of thugs
###########################
#murder_outcome.2002 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2002.t
#
#			### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2002.opening_1
#			desc = murder_outcome.2002.opening_2
#			desc = murder_outcome.2002.opening_3
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2002.heh
#		}
#
#		desc = murder_outcome.2002.no_save
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2002.owner_is_known_1
#						desc = murder_outcome.2002.owner_is_known_2
#					}
#				}
#			}
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2002.no_awareness_1
#					desc = murder_outcome.2002.no_awareness_2
#				}
#			}
#		}
#	}
#	### END OF DESC
#
#	theme = murder_scheme
#	override_background = {
#		reference = terrain_scope
#	}
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:hired_thugs
#	}
#
#	immediate = {
#		scope:target.location = { save_scope_as = background_terrain_scope }
#		murder_success_effect = yes
	#
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2002.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#				NOR = {
#					has_trait = humble
#					has_trait = compassionate
#					has_trait = content
#				}
#			}
#			text = murder_outcome.2002.a
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#				OR = {
#					has_trait = humble
#					has_trait = compassionate
#					has_trait = content
#				}
#			}
#			text = murder_outcome.2002.a.less_arrogant
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#######################
## Poisoning
#######################
#murder_outcome.2003 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2003.t
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2003.opening_1
#			desc = murder_outcome.2003.opening_2
#			desc = murder_outcome.2003.opening_3
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2001.heh
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2003.owner_is_known_1
#						desc = murder_outcome.2003.owner_is_known_2
#						desc = murder_outcome.2003.owner_is_known_3
#					}
#				}
#			}
#
#			# If the Scheme Owner is not known:
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2003.no_awareness_1
#					desc = murder_outcome.2003.no_awareness_2
#				}
#			}
#		}
#	}
#	### END OF DESC
#	theme = murder_scheme
#	override_background = {
#		reference = feast
#	}
#	left_portrait = {
#		character = scope:target
#		animation = poison
		#
#	}
#
#
#	trigger = {
#		scope:murder_method = flag:used_poison
#	}
#
#	immediate = {
#
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#
#		murder_success_effect = yes
#		add_character_flag = {
#			flag = murdered_by_poison
#			years = 5
#		}
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2003.a.discovered_1
#		}
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2003.a.discovered_2
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2003.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
###########################
## Creepy-Crawly
##########################
#murder_outcome.2004 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1004.t
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2004.opening_1
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2001.heh
#		}
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2004.owner_is_known_1
#					}
#				}
#			}
#			# If the Scheme Owner is not known:
#			desc = {
#				first_valid = {
#					triggered_desc = {
#						trigger = {
#							scope:venomous_creature = flag:beaked_mammal
#						}
#						desc = murder_outcome.2004.no_awareness_1_beaked_mammal
#					}
#					random_valid = {
#						desc = murder_outcome.2004.no_awareness_1
#					}
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#
#	### END OF DESC
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:creepy_crawly
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#
#		murder_success_effect = yes
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2004.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2004.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
###########################
## Riled-up Mob
##########################
#murder_outcome.2005 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1005.t
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2005.opening_1
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2001.heh
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2005.owner_is_known_1
#					}
#				}
#			}
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2005.no_awareness_1
#				}
#			}
#		}
#	}
#	### END OF DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:riled_up_mob
#	}
#
#	immediate = {
#		murder_success_effect = yes
#
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#				NOR = {
#					has_trait = humble
#					has_trait = compassionate
#				}
#			}
#			text = murder_outcome.2005.a.discovered
#		}
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#				OR = {
#					has_trait = humble
#					has_trait = compassionate
#				}
#			}
#			text = murder_outcome.2005.a.discovered.less_arrogant
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2005.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
#
###########################
## Immurement
##########################
#murder_outcome.2006 = {
#	type = character_event
#	window = scheme_successful_event
#	window = scheme_successful_event
#
#	title = murder_outcome.1006.t
#	desc = {
#		desc = murder_outcome.2006.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2006.scheme_owner_known
#			}
#			desc = murder_outcome.2006.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#
#	left_portrait = {
#		character = root
#		animation = toast_goblet
#	}
#
#	right_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	override_background = {
#		reference = bp1_wine_cellar
#	}
	#
#
#	trigger = {
#		scope:murder_method = flag:bricked
#	}
#
#	immediate = {
#
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#
#		murder_success_effect = yes
#		scope:home_province.barony = {
#			set_variable = { #You can find the corpse if you siege the place...
#				name = immured
#				value = scope:target
#			}
#		}
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2006.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2006.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
###########################
## Sink a boat they're on
##########################
#murder_outcome.2007 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1007.t
#	desc = {
#		desc = murder_outcome.2007.desc
#		first_valid = {
#			triggered_desc = {
#			    trigger = {
#					scope:target = { is_lowborn = yes }
#			    }
#			    desc = murder_outcome.2007.desc_lowborn
#			}
#			desc = murder_outcome.2007.desc_highborn
#		}
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2007.scheme_owner_known
#			}
#			desc = murder_outcome.2007.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:sunken_boat
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2007.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2007.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#
#	after = {
#		if = {
#			limit = {
#				scope:owner = {
#					has_variable_list = entourage_members_to_kill
#				}
#			}
#			clear_variable_list = entourage_members_to_kill
#		}
#	}
#
#}
#
#######################
## Poisoned drink
#######################
#murder_outcome.2008 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1008.t
#	desc = {
#		first_valid = {
#			triggered_desc = {
#			    trigger = {
#					scope:target = { has_trait = drunkard }
#			    }
#			    desc = murder_outcome.2008.desc_drunkard
#			}
#			desc = murder_outcome.2008.desc_not_drunkard
#		}
#		desc = murder_outcome.2008.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2008.scheme_owner_known
#			}
#			desc = murder_outcome.2008.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	override_background = {
#		reference = feast
#	}
#	left_portrait = {
#		character = scope:target
#		animation = poison
#	}
#
#
#	trigger = {
#		scope:murder_method = flag:used_poisoned_drink
#	}
#
#	immediate = {
#
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#
#		murder_success_effect = yes
#		add_character_flag = {
#			flag = murdered_by_poison
#			years = 5
#		}
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2008.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2008.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
################################
## Left Child in Forest
################################
#murder_outcome.2201 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2201.t
#	desc = {
#		desc = murder_outcome.2201.opening
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2201.scheme_owner_known
#			}
#			desc = murder_outcome.2201.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#
#	trigger = {
#		scope:murder_method = flag:lured_into_forest
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = medium_stress_gain
#			compassionate = major_stress_impact_gain
#		}
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2201.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2201.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
################################
## Infant Stabbed to Death
################################
#murder_outcome.2202 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.2202.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					has_trait = sadistic
#				}
#				desc = murder_outcome.2202.desc_sadistic
#			}
#			desc = murder_outcome.2202.desc_normal
#		}
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2202.scheme_owner_known
#			}
#			desc = murder_outcome.2202.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#
#	trigger = {
#		scope:murder_method = flag:stab_infant
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#
#	}
#
#	option = {
#		name = murder_outcome.2202.a
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = medium_stress_gain
#			compassionate = major_stress_impact_gain
#		}
#	}
#
#	option = {
#		name = murder_outcome.2202.a.sadistic
#		trigger = {
#			has_trait = sadistic
#		}
#		trait = sadistic
#		exclusive = yes
		#
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = minor_stress_loss
#		}
#	}
#}
#
#
################################
## Infant bitten by creepy crawly
################################
#murder_outcome.2203 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.2203.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2203.scheme_owner_known
#			}
#			desc = murder_outcome.2203.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:infant_creepy_crawly
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.2202.a
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = medium_stress_gain
#			compassionate = major_stress_impact_gain
#		}
#	}
#
#	option = {
#		name = murder_outcome.2202.a.sadistic
#		trigger = {
#			has_trait = sadistic
#		}
#		trait = sadistic
#		exclusive = yes
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = minor_stress_loss
#		}
#	}
#}
#
#
################################
## Poisoned candy
################################
#murder_outcome.2204 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.2204.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2204.scheme_owner_known
#			}
#			desc = murder_outcome.2204.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:poisoned_candy
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#
#		murder_success_effect = yes
#		add_character_flag = {
#			flag = murdered_by_poison
#			years = 5
#		}
#	}
#
#	option = {
#		name = murder_outcome.2202.a
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = minor_stress_gain
#			compassionate = major_stress_impact_gain
#		}
#	}
#
#	option = {
#		name = murder_outcome.2202.a.sadistic
#		trigger = {
#			has_trait = sadistic
#		}
#		trait = sadistic
#		exclusive = yes
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = minor_stress_loss
#		}
#	}
#}
#
#
################################
## Child pushed to death
################################
#murder_outcome.2205 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2205.t
#	desc = {
#		desc = murder_outcome.2205.desc_opening
#		first_valid = {
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_dog
#			    }
#			    desc = murder_outcome.2205.desc_dog
#			}
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_cat
#					NOT = { exists = scope:cat_survives }
#			    }
#			    desc = murder_outcome.2205.desc_cat
#			}
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_cat
#					exists = scope:cat_survives
#			    }
#			    desc = murder_outcome.2205.desc_cat_alive
#			}
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_toy
#			    }
#			    desc = murder_outcome.2205.desc_toy
#			}
#			desc = murder_outcome.2205.desc_nothing
#		}
#		desc = murder_outcome.2205.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.2205.scheme_owner_known
#			}
#			desc = murder_outcome.2205.scheme_unknown
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:child_pushed
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.2202.a
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = minor_stress_gain
#			compassionate = major_stress_impact_gain
#		}
#	}
#
#	option = {
#		name = murder_outcome.2202.a.sadistic
#		trigger = {
#			has_trait = sadistic
#		}
#		trait = sadistic
#		exclusive = yes
#		successful_murder_outcome_event_option_effect = yes
#		stress_impact = {
#			base = minor_stress_loss
#		}
#	}
#}
#
##############################
## Successful Prison Murders
## 2301 - 2399
##############################
#
##Beaten to death in prison
#murder_outcome.2301 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2301.t
#
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2301.opening_1
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2301.heh
#		}
#
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2301.owner_is_known_1
#					}
#				}
#			}
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2301.no_awareness_1
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	### END OF DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:beat_to_death_in_dungeon
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2301.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2301.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
##############################
##Unwelcome Guest - House Arrest
##############################
#murder_outcome.2302 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.2302.t
#
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2302.opening_1
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2001.heh
#		}
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2302.owner_is_known_1
#					}
#				}
#			}
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2302.no_awareness_1
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#	}
#	### END OF DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:unwelcome_guest_house_arrest
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#		murder_success_effect = yes
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2302.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2302.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
###########################
## Various Special Murders
## 2401-2499
###########################
#
##Strangling Incapable
#murder_outcome.2401 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1401.t
#	### START DESC
#	desc = {
#		# Open with a statement celebrating success
#		# Remember to name the Target character
#		random_valid = {
#			desc = murder_outcome.2401.opening_1
#		}
#		triggered_desc = {
#			# Additional comment if you're sadistic.
#			trigger = {
#				has_trait = sadistic
#			}
#			desc = murder_outcome.2001.heh
#		}
#		first_valid = {
#			# If the Scheme Owner is known:
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = {
#					random_valid = {
#						desc = murder_outcome.2401.owner_is_known_1
#					}
#				}
#			}
#			desc = {
#				random_valid = {
#					desc = murder_outcome.2401.no_awareness_1
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:bad_memory
#			}
#			desc = murder_outcome.2001.memories
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.2001.house_feud
#		}
#
#	}
#	### END OF DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = pain
#	}
#
#	trigger = {
#		scope:murder_method = flag:strangle_incapable
#	}
#
#	immediate = {
#		random_memory = {
#			limit = {
#				has_memory_category = negative
#				has_memory_participant = scope:target
#				NOR = { # These read poorly
#					has_memory_type = became_rivals
#					has_memory_type = became_nemesis
#				}
#			}
#
#			save_scope_as = bad_memory
#		}
#
#		murder_success_effect = yes
#		successful_murder_outcome_event_option_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2401.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.2401.a
#		}
#		trigger = {
#			NOT = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.b
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#	}
#
#	option = {
#		name = murder_outcome.2001.c
#		trigger = {
#			existing_feud_against_target_trigger = { TARGET = scope:target }
#		}
#		show_as_tooltip = { house_feud_end_modifier_effect = yes }
#		house_feud_end_story_effect = yes
#	}
#}
#
#
#
################################
## FAILURE OUTCOMES 4000 - 4999
################################
#
########################
## Hired Assassin
########################
#murder_outcome.4001 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.4001.t
#	### START DESC
#	desc = {
	#
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4001.failure_declaration_1
#			desc = murder_outcome.4001.failure_declaration_2
#			desc = murder_outcome.4001.failure_declaration_3
#		}
	#
#		desc = murder_outcome.4001.desc
#
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4001.exposed_scheme
#			}
#			desc = murder_outcome.4001.not_exposed_scheme
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:owner
#		animation = shock
#	}
#	center_portrait = {
#		character = scope:assassin
#		animation = sword_yield_start
#	}
#	right_portrait = {
#		character = scope:target
#		animation = anger
#	}
#
#	trigger = {
#		scope:murder_method = flag:hired_assassin
#	}
#
#	immediate = {
#		grab_best_agent_murderer_effect = yes
#		random_dummy_gender_assassin_effect = yes
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4001.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4001.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
############################
## HIRED THUGS
############################
#
#murder_outcome.4002 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1002.t
#	### START DESC
#	desc = {
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4001.failure_declaration_1
#			desc = murder_outcome.4001.failure_declaration_2
#			desc = murder_outcome.4001.failure_declaration_3
#		}
	#
#		desc = murder_outcome.4002.desc
#
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4002.exposed_scheme
#			}
#			desc = murder_outcome.4002.not_exposed_scheme
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:hired_thugs
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4002.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#				NOT = {
#					has_trait = humble
#				}
#			}
#			text = murder_outcome.4002.a
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#				has_trait = humble
#			}
#			text = murder_outcome.4002.a.less_arrogant
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
############################
## USED POISON
############################
#
#murder_outcome.4003 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1003.t
#	### START DESC
#	desc = {
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4001.failure_declaration_1
#			desc = murder_outcome.4001.failure_declaration_2
#			desc = murder_outcome.4001.failure_declaration_3
#		}
#
#		desc = murder_outcome.4003.desc
#
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4003.exposed_scheme
#			}
#			desc = murder_outcome.4003.not_exposed_scheme
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:used_poison
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4003.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4003.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
##########################
## Creepy-crawlies
##########################
#murder_outcome.4004 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1004.t
#	### START DESC
#	desc = {
#
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4004.failure_declaration_1
#		}
#
#		first_valid = {
#			# "Regular" scheme execution
#			desc = {
#				desc = murder_outcome.4004.failed_attempt_1
#				first_valid = {
#					triggered_desc = {
#						trigger = {
#							exists = scope:scheme_discovered
#						}
#						desc = murder_outcome.4004.scheme_owner_known
#					}
#					desc = murder_outcome.4004.scheme_known
#				}
#			}
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:creepy_crawly
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.2004.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4004.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
#
##########################
## Riled-up Mob
##########################
#murder_outcome.4005 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1005.t
#	### START DESC
#	desc = {
#
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4005.failure_declaration_1
#		}
#
#		first_valid = {
#			# "Regular" scheme execution
#			desc = {
#				desc = murder_outcome.4005.failed_attempt_1
#				first_valid = {
#					triggered_desc = {
#						trigger = {
#							exists = scope:scheme_discovered
#						}
#						desc = murder_outcome.4005.scheme_owner_known
#					}
#					desc = murder_outcome.4005.scheme_unknown
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:riled_up_mob
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4005.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4005.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
##########################
## Immurement
##########################
#murder_outcome.4006 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1006.t
#	desc = {
#		desc = murder_outcome.4006.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4006.scheme_owner_known
#			}
#			desc = murder_outcome.4006.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#	override_background = {
#		reference = bp1_wine_cellar
#	}
#
#
#	trigger = {
#		scope:murder_method = flag:bricked
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4006.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4006.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
##########################
## Sink boat they're on
##########################
#murder_outcome.4007 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1007.t
#	desc = {
#		desc = murder_outcome.4007.opening
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4007.scheme_owner_known
#			}
#			desc = murder_outcome.4007.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:sunken_boat
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4007.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4007.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
##########################
## Poisoned drink
##########################
#murder_outcome.4008 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1006.t
#	desc = {
#		desc = murder_outcome.4008.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4008.scheme_owner_known
#			}
#			desc = murder_outcome.4008.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:used_poisoned_drink
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4008.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4008.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
###########################
## Lured Child Into Forest
###########################
#murder_outcome.4201 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.4201.t
#	desc = {
#		random_valid = {
#			desc = murder_outcome.4001.failure_declaration_1
#			desc = murder_outcome.4001.failure_declaration_2
#			desc = murder_outcome.4001.failure_declaration_3
#		}
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4201.scheme_owner_known
#			}
#			desc = murder_outcome.4201.scheme_unknown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:lured_into_forest
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4201.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4201.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
###########################
## Stabbed Infant
###########################
#murder_outcome.4202 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.4202.opening
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4202.scheme_owner_known
#			}
#			desc = murder_outcome.4202.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:stab_infant
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.4202.a
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
###########################
## Infant bitten by creepy crawly
###########################
#murder_outcome.4203 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.4203.opening
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4203.scheme_owner_known
#			}
#			desc = murder_outcome.4203.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:infant_creepy_crawly
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.4202.a
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
###########################
## Poisoned candy
###########################
#murder_outcome.4204 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.4204.desc_opening
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4203.scheme_owner_known
#			}
#			desc = murder_outcome.4204.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:poisoned_candy
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.4204.a
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
###########################
## Child pushed to death
###########################
#murder_outcome.4205 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1202.t
#	desc = {
#		desc = murder_outcome.4205.desc_opening
#		first_valid = {
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_dog
#			    }
#			    desc = murder_outcome.4205.desc_dog
#			}
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_cat
#			    }
#			    desc = murder_outcome.4205.desc_cat
#			}
#			triggered_desc = {
#			    trigger = {
#					exists = scope:child_pushed_toy
#			    }
#			    desc = murder_outcome.4205.desc_toy
#			}
#			desc = murder_outcome.4205.desc_nothing
#		}
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					exists = scope:scheme_discovered
#				}
#				desc = murder_outcome.4203.scheme_owner_known
#			}
#			desc = murder_outcome.4205.scheme_unkown
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:child_pushed
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.4202.a
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#####################################
## Prison Murder Failures
## 4301-4399
#####################################
#
##Beaten to death in a cell
#murder_outcome.4301 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.4301.t
#	### START DESC
#	desc = {
#
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4301.failure_declaration_1
#		}
#
#		first_valid = {
#			# "Regular" scheme execution
#			first_valid = {
#				triggered_desc = {
#					trigger = {
#						exists = scope:scheme_discovered
#					}
#					desc = murder_outcome.4301.disastrous_attempt_1
#				}
#				desc = {
#					desc = murder_outcome.4301.failed_attempt_1
#					desc = murder_outcome.4301.unknown_so_far
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#
#
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:beat_to_death_in_dungeon
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4301.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4301.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
##An Unwelcome Guest
#murder_outcome.4302 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.4302.t
#	### START DESC
#	desc = {
#
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4302.failure_declaration_1
#		}
#
#		first_valid = {
#			# "Regular" scheme execution
#			desc = {
#				first_valid = {
#					triggered_desc = {
#						trigger = {
#							scope:scheme = {
#								scheme_progress < 10
#							}
#						}
#						desc = murder_outcome.4302.failed_lack_of_planning
#					}
#					desc = murder_outcome.4302.failed_attempt_1
#				}
#				first_valid = {
#					triggered_desc = {
#						trigger = {
#							exists = scope:scheme_discovered
#						}
#						desc = murder_outcome.4302.disastrous_attempt_1
#					}
#					desc = murder_outcome.4302.unknown_so_far
#				}
#			}
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#
#
#
#	theme = murder_scheme
#	left_portrait = {
#		character = scope:target
#		animation = shock
#	}
#
#	trigger = {
#		scope:murder_method = flag:unwelcome_guest_house_arrest
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = {
#			trigger = {
#				exists = scope:scheme_discovered
#			}
#			text = murder_outcome.4302.a.discovered
#		}
#		name = {
#			trigger = {
#				NOT = { exists = scope:scheme_discovered }
#			}
#			text = murder_outcome.4302.a
#		}
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = { exists = scope:scheme_discovered }
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = {
#					exists = scope:scheme_discovered
#				}
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
#
###########################
## Various Special Murders
## 4401-4499
###########################
#
##Strangle Incapable
#murder_outcome.4401 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.1401.t
#	### START DESC
#	desc = {
#
#		# Start off with declaration of failure
#		# Include Target's name!
#		random_valid = {
#			desc = murder_outcome.4401.failure_declaration_1
#		}
#
#		first_valid = {
#			# "Regular" scheme execution
#			desc = {
#				desc = murder_outcome.4401.failed_attempt_1
#				first_valid = {
#					triggered_desc = {
#						trigger = {
#							exists = scope:scheme_discovered
#						}
#						desc = murder_outcome.4401.disastrous_attempt_1
#					}
#					desc = murder_outcome.4401.unknown_so_far
#				}
#			}
#		}
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:target }
#			}
#			desc = murder_outcome.4301.house_feud
#		}
#	}
#	### END DESC
#
#	theme = murder_scheme
#	left_portrait = scope:target
#
#	trigger = {
#		scope:murder_method = flag:strangle_incapable
#	}
#
#	immediate = {
#		murder_failure_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.4401.a
#		show_as_tooltip = {
#			scope:scheme = {
#				end_scheme = yes
#			}
#			if = {
#				limit = { exists = scope:scheme_discovered }
#				add_dread = minor_dread_gain
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.4001.b
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		show_as_tooltip = {
#			if = {
#				limit = { exists = scope:scheme_discovered }
#				add_dread = minor_dread_gain
#			}
#			start_scheme = {
#				type = murder
#				target_character = scope:target
#			}
#		}
#		hidden_effect = {
#			save_scope_value_as = {
#				name = restart_scheme
#				value = yes
#			}
#		}
#	}
#
#	after = {
#		hidden_effect = {
#			trigger_event = murder_outcome.9999
#		}
#	}
#}
#
#
#############################################
## YOU GOT (ATTEMPTED?) MURDERED 5000 - 5999
#############################################
#
##You've been killed
#murder_outcome.5001 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.5001.t
#	desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:used_poison
#				}
#				desc = murder_outcome.5001.poisoned_duck
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:hired_thugs
#				}
#				desc = murder_outcome.5001.gang_of_thugs
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:hired_assassin
#				}
#				desc = murder_outcome.5001.hired_assassin
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:creepy_crawly
#				}
#				desc = {
#					desc = murder_outcome.5001.creepy_crawly_intro
#					first_valid = {
#						triggered_desc = {
#							trigger = {
#								OR = {
#									learning > 8
#									has_trait = lifestyle_hunter
#								}
#							}
#							desc = murder_outcome.5001.creepy_crawly_known
#						}
#						desc = murder_outcome.5001.creepy_crawly_unknown
#					}
#					desc = murder_outcome.5001.creepy_crawly_end
#				}
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:riled_up_mob
#				}
#				desc = murder_outcome.5001.riled_up_mob
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:bricked
#				}
#				desc = murder_outcome.5001.bricked
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:sunken_boat
#					is_travelling = yes
#				}
#				desc = murder_outcome.5001.sunken_boat_travel
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:sunken_boat
#					is_travelling = no
#				}
#				desc = murder_outcome.5001.sunken_boat
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:used_poisoned_drink
#				}
#				desc = {
#					first_valid = {
#						triggered_desc = {
#						    trigger = {
#								drinks_alcohol_trigger = yes
#						    }
#						    desc = murder_outcome.5001.poisoned_drink_alcohol
#						}
#						desc = murder_outcome.5001.poisoned_drink_no_alcohol
#					}
#					desc = murder_outcome.5001.poisoned_drink
#				}
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:lured_into_forest
#				}
#				desc = {
#					first_valid = {
#						triggered_desc = {
#							trigger = { exists = scope:assassin }
#							desc = murder_outcome.5001.assassin
#						}
#						desc = murder_outcome.5001.courtier
#					}
#					desc = murder_outcome.5001.lured_into_forest
#				}
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:stab_infant
#				}
#				desc = murder_outcome.5001.stab_infant
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:infant_creepy_crawly
#				}
#				desc = murder_outcome.5001.infant_creepy_crawly
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:poisoned_candy
#				}
#				desc = murder_outcome.5001.poisoned_candy
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#					exists = scope:child_pushed_dog
#			    }
#			    desc = murder_outcome.5001.child_pushed_dog
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#					exists = scope:child_pushed_cat
#			    }
#			    desc = murder_outcome.5001.child_pushed_cat
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#					exists = scope:child_pushed_toy
#			    }
#			    desc = murder_outcome.5001.child_pushed_toy
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#			    }
#			    desc = murder_outcome.5001.child_pushed
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:beat_to_death_in_dungeon
#				}
#				desc = murder_outcome.5001.beat_to_death_in_dungeon
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:unwelcome_guest_house_arrest
#				}
#				desc = {
#					desc = murder_outcome.5001.unwelcome_guest_house_arrest
#					first_valid = {
#						triggered_desc = {
#							trigger = { exists = scope:target_home }
#							desc = murder_outcome.5001.unwelcome_guest_house_arrest.target_court
#						}
#						desc = murder_outcome.5001.unwelcome_guest_house_arrest.no_court
#					}
#					desc = murder_outcome.5001.unwelcome_guest_house_arrest.end
#				}
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:strangle_incapable
#				}
#				desc = murder_outcome.5001.strangle_incapable
#			}
#		}
#		triggered_desc = {
#			trigger = {
#				exists = scope:scheme_discovered
#				exists = scope:owner_to_reveal.house
#				exists = scope:bad_memory
#				OR = { # Murder methods with characters who can deliver messages
#					scope:murder_method = flag:hired_thugs
#					scope:murder_method = flag:riled_up_mob
#					scope:murder_method = flag:hired_assassin
#					scope:murder_method = flag:beat_to_death_in_dungeon
#					scope:murder_method = flag:unwelcome_guest_house_arrest
#				}
#			}
#			desc = murder_outcome.5002.memories_death
#		}
#		triggered_desc = {
#			trigger = {
#				exists = scope:scheme_discovered
#				exists = scope:owner_to_reveal
#				NOT = {
#					has_trait = incapable #No notification of identity for Incapable characters
#				}
#			}
#			desc = murder_outcome.5001.schemer_known
#		}
#
#		triggered_desc = {
#			trigger = {
#				existing_feud_against_target_trigger = { TARGET = scope:owner_to_reveal }
#			}
#			desc = murder_outcome.5002.house_feud
#		}
#	}
#	theme = murder_scheme
#	override_background = {
#		trigger = { scope:murder_method = flag:sunken_boat }
#		reference = fp1_ocean
#	}
#	override_background = {
#		trigger = {
#			OR = {
#				scope:murder_method = flag:hired_thugs
#				scope:murder_method = flag:riled_up_mob
#			}
#		}
#		reference = alley_night
#	}
#	override_background = {
#		trigger = {
#			OR = {
#				scope:murder_method = flag:lured_into_forest
#			}
#		}
#		reference = wilderness_forest
#	}
#	override_background = {
#		trigger = {
#			OR = {
#				scope:murder_method = flag:beat_to_death_in_dungeon
#			}
#		}
#		reference = dungeon
#	}
#	override_background = {
#		trigger = {
#			OR = {
#				scope:murder_method = flag:strangle_incapable
#				scope:murder_method = flag:stab_infant
#				scope:murder_method = flag:infant_creepy_crawly
#				scope:murder_method = flag:creepy_crawly
#			}
#		}
#		reference = bedchamber
#	}
#	left_portrait = {
#		character = root
#		triggered_animation = {
#			trigger = {
#				OR = {
#					scope:murder_method = flag:used_poison
#					scope:murder_method = flag:used_poisoned_drink
#					scope:murder_method = flag:poisoned_candy
#				}
#			}
#  			animation = poison
#  		}
#		triggered_animation = {
#			trigger = {
#				OR = {
#					scope:murder_method = flag:infant_creepy_crawly
#					scope:murder_method = flag:creepy_crawly
#				}
#			}
#  			animation = shock
#  		}
#		animation = shock
#	}
#	right_portrait = {
#		character = scope:owner_to_reveal
#		animation = schadenfreude
#	}
#	override_background = {
#		trigger = { scope:murder_method = flag:bricked }
#		reference = bp1_wine_cellar
#	}
#
#
#	immediate = {
#		if = {
#			limit = {
#				exists = scope:owner_to_reveal
#			}
#			scope:owner_to_reveal = {
#				random_memory = {
#					limit = {
#						has_memory_category = negative
#						has_memory_participant = root
#						NOR = { # These read poorly
#							has_memory_type = became_rivals
#							has_memory_type = became_nemesis
#						}
#					}
#					save_scope_as = bad_memory
#				}
#			}
#		}
#
#		if = {
#			limit = {
#				exists = scope:scheme_discovered
#				exists = scope:owner_to_reveal
#			}
#			scope:owner_to_reveal = {
#				add_character_flag = {
#					flag = use_stealth_clothes
#					days = 1
#				}
#			}
#		}
#		if = {
#			limit = {
#				scope:murder_method = flag:child_pushed
#				exists = scope:child_pushed_cat
#				NOT = { exists = scope:cat_survives }
#			}
#			show_as_tooltip = {
#				scope:target = {
#					remove_cat_story_modifiers_effect = yes
#				}
#			}
#			scope:target = {
#				random_owned_story = {
#					limit = { story_type = story_cycle_pet_cat }
#					hidden_effect = { end_story = yes }
#				}
#			}
#		}
#		if = {
#			limit = {
#				scope:murder_method = flag:child_pushed
#				exists = scope:child_pushed_dog
#			}
#			show_as_tooltip = {
#				scope:target = {
#					remove_dog_story_modifiers_effect = yes
#				}
#			}
#			scope:target = {
#				random_owned_story = {
#					limit = { story_type = story_cycle_pet_dog }
#					hidden_effect = { end_story = yes }
#				}
#			}
#		}
#
#		murder_success_kill_effect = yes
#	}
#
#	option = {
#		name = murder_outcome.5001.avenge_me
#		trigger = {
#			exists = scope:scheme_discovered
#			is_adult = yes
#		}
#	}
#
#	option = {
#		name = murder_outcome.5001.not_my_time
#		trigger = {
#			OR = {
#				NOT = { exists = scope:scheme_discovered }
#				scope:target = { is_adult = no }
#			}
#		}
#		exclusive = yes
#	}
#
#	option = {
#		name = murder_outcome.5001.option_incapable
#		trigger = {
#			scope:target = { has_trait = incapable }
#		}
#		exclusive = yes
#	}
#}
#
##You've survived a murder attempt
#murder_outcome.5002 = {
#	type = character_event
#	window = scheme_successful_event
#	title = murder_outcome.5002.t
#	desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:used_poison
#				}
#				desc = murder_outcome.5002.poisoned_duck
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:hired_thugs
#				}
#				desc = murder_outcome.5002.gang_of_thugs
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:hired_assassin
#				}
#				desc = murder_outcome.5002.hired_assassin
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:creepy_crawly
#				}
#				desc = {
#					desc = murder_outcome.5001.creepy_crawly_intro
#					first_valid = {
#						triggered_desc = {
#							trigger = {
#								OR = {
#									learning > 8
#									has_trait = lifestyle_hunter
#								}
#							}
#							desc = murder_outcome.5001.creepy_crawly_known
#						}
#						desc = murder_outcome.5001.creepy_crawly_unknown
#					}
#					desc = murder_outcome.5002.creepy_crawly_end
#				}
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:riled_up_mob
#				}
#				desc = murder_outcome.5002.riled_up_mob
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:bricked
#				}
#				desc = murder_outcome.5002.bricked
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:sunken_boat
#				}
#				desc = murder_outcome.5002.sunken_boat
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:used_poisoned_drink
#				}
#				desc = murder_outcome.5002.poisoned_drink
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:lured_into_forest
#				}
#				desc = murder_outcome.5002.lured_into_forest
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:stab_infant
#				}
#				desc = murder_outcome.5002.stab_infant
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:infant_creepy_crawly
#				}
#				desc = murder_outcome.5002.infant_creepy_crawly
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:poisoned_candy
#				}
#				desc = murder_outcome.5002.poisoned_candy
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#					exists = scope:child_pushed_dog
#			    }
#			    desc = murder_outcome.5002.child_pushed_dog
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#					exists = scope:child_pushed_cat
#			    }
#			    desc = murder_outcome.5002.child_pushed_cat
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#					exists = scope:child_pushed_toy
#			    }
#			    desc = murder_outcome.5002.child_pushed_toy
#			}
#			triggered_desc = {
#			    trigger = {
#			    	scope:murder_method = flag:child_pushed
#			    }
#			    desc = murder_outcome.5002.child_pushed
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:beat_to_death_in_dungeon
#				}
#				desc = murder_outcome.5002.beat_to_death_in_dungeon
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:unwelcome_guest_house_arrest
#				}
#				desc = murder_outcome.5002.unwelcome_guest_house_arrest
#			}
#			triggered_desc = {
#				trigger = {
#					scope:murder_method = flag:strangle_incapable
#				}
#				desc = murder_outcome.5002.strangle_incapable
#			}
#		}
#		triggered_desc = {
#			trigger = {
#				exists = scope:scheme_discovered
#				exists = scope:owner_to_reveal.house
#				exists = scope:bad_memory
#				OR = {
#					scope:murder_method = flag:hired_thugs
#					scope:murder_method = flag:riled_up_mob
#					scope:murder_method = flag:hired_assassin
#					scope:murder_method = flag:beat_to_death_in_dungeon
#					scope:murder_method = flag:unwelcome_guest_house_arrest
#				}
#			}
#			desc = murder_outcome.5002.memories
#		}
#		triggered_desc = {
#			trigger = {
#				exists = scope:scheme_discovered
#				NOT = { has_trait = incapable }
#				age > 8
#			}
#			desc = murder_outcome.5002.schemer_known
#
#
#		}
#
#		triggered_desc = {
#			trigger = {
#				exists = scope:scheme_discovered
#				existing_feud_against_target_trigger = { TARGET = scope:owner_to_reveal }
#			}
#			desc = murder_outcome.5002.house_feud
#		}
#	}
#	theme = murder_scheme
#	left_portrait = {
#		character = root
#		animation = shock
#	}
#	right_portrait = {
#		character = scope:owner_to_reveal
#		animation = scheme
#	}
#	override_background = {
#		trigger = { scope:murder_method = flag:bricked }
#		reference = bp1_wine_cellar
#	}
#
#
#	immediate = {
#		if = {
#			limit = { exists = scope:owner_to_reveal }
#			scope:owner_to_reveal = {
#				random_memory = {
#					limit = {
#						has_memory_category = negative
#						has_memory_participant = root
#						NOR = { # These read poorly
#							has_memory_type = became_rivals
#							has_memory_type = became_nemesis
#						}
#					}
#					save_scope_as = bad_memory
#				}
#			}
#		}
#
#		if = {
#			limit = {
#				exists = scope:scheme_discovered
#				exists = scope:owner_to_reveal
#			}
#			scope:owner_to_reveal = {
#				add_character_flag = {
#					flag = use_stealth_clothes
#					days = 1
#				}
#			}
#		}
#	}
#
#	option = {
#		name = murder_outcome.5002.will_find_out
#		trigger = {
#			NOT = { exists = scope:scheme_discovered }
#		}
#		add_character_modifier = {
#			modifier = watchful_modifier
#			days = watchful_modifier_duration
#		}
#	}
#
#	option = {
#		name = murder_outcome.5002.revenge_will_be_had
#		trigger = {
#			exists = scope:scheme_discovered
#		}
#		add_character_modifier = {
#			modifier = watchful_modifier
#			days = watchful_modifier_duration
#		}
#	}
#
#	option = {
#		name = murder_outcome.5002.child
#		trigger = {
#			is_adult = no
#			age >= 2
#		}
#		exclusive = yes
#		add_character_modifier = {
#			modifier = watchful_modifier
#			days = watchful_modifier_duration
#		}
#	}
#
#	option = {
#		name = murder_outcome.5002.infant
#		trigger = {
#			age < 2
#		}
#		exclusive = yes
#		add_character_modifier = {
#			modifier = watchful_modifier
#			days = watchful_modifier_duration
#		}
#	}
#
#	option = {
#		name = murder_outcome.5002.option_incapable
#		trigger = {
#			has_trait = incapable
#		}
#		exclusive = yes
#		add_character_modifier = {
#			modifier = watchful_modifier
#			days = watchful_modifier_duration
#		}
#	}
#
#	after = {
#		if = {
#			limit = {
#				exists = scope:owner_to_reveal
#			}
#			attempted_murder_opinion_effect = {
#				VICTIM = root
#				MURDERER = scope:owner_to_reveal
#			}
#		}
#	}
#}
#
#
#########################
## Scheme End Handling
#########################
#murder_outcome.9999 = {
#	hidden = yes
#
#	immediate = {
#		if = {
#			limit = {
#				exists = scope:restart_scheme
#				exists = scope:scheme
#			}
#			scope:scheme = {
#				increment_variable_effect = {
#					VAR = restarted_tally
#					VAL = 1
#				}
#			}
#		}
#		else_if = {
#			limit = {
#				exists = scope:scheme
#				exists = scope:target
#				scope:target = { is_alive = yes }
#			}
#			scope:scheme = {
#				end_scheme = yes
#			}
#		}
#	}
#}
